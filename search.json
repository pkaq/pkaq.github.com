[{"title":"Gradle置顶帖","url":"https://pkaq.org/2099/12/13/index/","content":"<p>为了方便查询，创建此篇；预知详情，请点更多；</p>\n<a id=\"more\"></a>\n<p>中文文档翻译进行时,欢迎参与<br><a href=\"https://github.com/pkaq/gradledoc\">https://github.com/pkaq/gradledoc</a>  </p>\n<p>最近攒了一个Gradle的示例大全，欢迎参与<br><a href=\"https://github.com/pkaq/gradleside\">https://github.com/pkaq/gradleside</a>  </p>\n<p>广告:如果你对gradle有所了解并且感兴趣 那么 我们有个小群 109752483</p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"基于Keycloak的SSO","url":"https://pkaq.org/2021/07/07/keycloak/","content":"","categories":["SSO"],"tags":["Spring Boot","Spring","SSO","Keycloak","Spring Security"]},{"title":"使用Gradle发布Jar包到Maven Repository","url":"https://pkaq.org/2021/06/07/publish2maven/","content":"<h1><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h1><p>由于Jcenter已经停止了服务，之前发布到Jcenter的构件需要转移到Maven仓库中。<br>在开始之前，先对OSSRH做下了解是很必要的，因为一开始，我并不知道这是个啥玩儿意。我想和我一样的人应该还是有很多的。<br>OSSRH：Sonatype Open Source Software Repository Hosting Service，为开源软件提供maven仓库托管服务。你可以在上面部署snapshot、release等，最后你可以申请把你的release同步到Maven Central Repository（Maven中央仓库）。</p>\n<p>个人的理解，OSSRH是Maven中央仓库的前置审批仓库，只有你完全符合了发布要求，成功的将你的项目发布到了OSSRH，才有机会申请同步到Maven中央仓库。</p>\n<!--- more --->\n<h1><span id=\"yi-shen-qing-group-id\">一、申请group id</span><a href=\"#yi-shen-qing-group-id\" class=\"header-anchor\">#</a></h1><ol>\n<li><strong>注册Sonatype JIRA账号</strong></li>\n</ol>\n<p>网址：<a href=\"https://issues.sonatype.org/\">https://issues.sonatype.org/</a></p>\n<p>无非就是填写下注册信息，没有什么特别的</p>\n<ol start=\"2\">\n<li><strong>创建一个Issue</strong><br>填写资料<br>可以在头部看到一个Create的按钮<br><img src=\"1.png\" alt=\"1\"><br>sonatype-create-issue-button</li>\n</ol>\n<p>会弹出Create Issue表单<br><img src=\"2.png\" alt=\"2\"><br>sonatype-create-issue-form</p>\n<ul>\n<li><p>Project：选择Community Support - Open Source Project Repository Hosting (OSSRH)</p>\n</li>\n<li><p>Issue Type：选择New Project</p>\n</li>\n<li><p>Summary：写个标题做个简单概述你要做啥。真不知道写什么，直接把项目名称写上就行，我就这么干了哈。<br>  Group Id：<br>  自己有域名<br>  可以使用子域名作为Group Id 。例：我的项目叫paladin2，那么就用org.pkaq作为Group Id</p>\n<p>  注意：不能瞎编一个，因为后面审核人员会来审核你是否是该域名的拥有者<br>  自己没域名<br>  可以借助github，例：我的用户名为michaelzx，那么就用com.github.pkaq.eva作为作为Group Id<br>  Project URL：要与Group Id一定关联性<br>  例：<br>  Project URL=<a href=\"https://github.com/pkaq/eva\">https://github.com/pkaq/eva</a><br>  Group Id=com.github.pkaq.eva</p>\n</li>\n<li><p>SCM url：版本仓库的拉取地址</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>等待回复</strong><br>如果有问题，老外在评论中把问题给你指出来，可以在原有的issue把资料改正确</li>\n</ol>\n<p>审核人员要处理的issue很多，你可能要耐心等待一会，不要急<br>我之前急了，就重新提交了2个新的issue，最后管理员还是耐心的把重复的issue关闭<br>如果一切顺利，那么你会收到审核人员，这样的一个评论：<br><img src=\"3.png\" alt=\"3\"></p>\n<p>这里我使用了自己的域名，如果使用自己的域名，需要解析一个TXT记录到你提交的这个issue来证明你是这个域名的持有人即可。</p>\n<h1><span id=\"er-zhun-bei-gong-zuo\">二、准备工作</span><a href=\"#er-zhun-bei-gong-zuo\" class=\"header-anchor\">#</a></h1><p>为了确保中央存储库中可用组件的质量水平，OSSRH对提交的文件有明确的要求。</p>\n<p>一个基础的提交，应该包含一下文件：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>.pom</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>.pom.asc</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>.jar</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>.jar.asc</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>-sources.jar</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>-sources.jar.asc</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>-javadoc.jar</span><br><span class=\"line\"><span class=\"attribute\">example</span>-application-<span class=\"number\">1</span>.<span class=\"number\">4</span>.<span class=\"number\">7</span>-javadoc.jar.asc</span><br></pre></td></tr></table></figure>\n<p>除了jar包和pom文件，Javadoc和Sources是必须的，后面会说到用Gradle的一些插件来生成<br>每个文件都有一个对应的asc文件，这是GPG签名文件，可以用于校验文件</p>\n<p><strong>GPG</strong><br>Windows下如果使用了cmder那么,cmder已经集成了gpg命令工具</p>\n<p><strong>公钥、私钥、签名</strong><br>GPG的默认秘钥类型是RSA，这里涉及涉及几个概念公钥（public-key）、私钥（secret-key）、签名(sign/signature)</p>\n<ul>\n<li>公钥和私钥是成对</li>\n<li>公钥加密，私钥解密。</li>\n<li>私钥签名，公钥验证。</li>\n</ul>\n<p><strong>新建一个密钥</strong><br>生成了密钥以后，才能导出公钥、私钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --generate-key</span><br></pre></td></tr></table></figure>\n<p>创建的时候，会让你输入密码，别输了以后忘记了，后面gradle插件中会用到。</p>\n<p><strong>查看已经生成的密钥</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg -k</span><br></pre></td></tr></table></figure>\n<p><img src=\"4.png\" alt=\"4\"></p>\n<ul>\n<li>pub下面第二行, 936DDBCE5B649E51D37464283F199C01AE4240A5，这个叫做密钥指纹(应该是用来做唯一识别)</li>\n<li>后面8位DF855F85,叫做标识或KEY ID，在后面需要加到Gradle插件配置中</li>\n</ul>\n<p><strong>导出私钥文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --export-secret-keys [密钥指纹] &gt; secret.gpg</span><br></pre></td></tr></table></figure>\n<p>以上命令就可以生成一个二进制的私钥文件，后面需要配置到gradle中，让插件帮我们给文件批量签名</p>\n<p>加上-a会生成一个用ASCII 字符封装的文本文件，方便复制,不过我们这里不需要</p>\n<p><strong>上传公钥到公钥服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver keyserver.ubuntu.com --send-keys [密钥指纹]</span><br></pre></td></tr></table></figure>\n<p>在sonatype的仓库提交后，会需要一个校验步骤<br>会需要从多个公钥服务器上下载匹配的公钥，然后来校验你上传的文件的签名</p>\n<p>简单的说，你用来签名的私钥和你上传的公钥，必须要一对，这样才能通过校验</p>\n<p>以下是sonatype会去拉取的公钥服务器列表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">keys</span><span class=\"selector-class\">.gnupg</span><span class=\"selector-class\">.net</span></span><br><span class=\"line\"><span class=\"selector-tag\">pool</span><span class=\"selector-class\">.sks-keyservers</span><span class=\"selector-class\">.net</span></span><br><span class=\"line\"><span class=\"selector-tag\">keyserver</span><span class=\"selector-class\">.ubuntu</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n<p>为什么我要特意列出来？<br>因为有些文章或教程里面，都仅给出了一个服务器，如pool.sks-keyservers.net<br>但是，我在实际操作有时候因为网络原因，并不是总能成功上传。<br>所以，如果把公钥上传到keyserver.ubuntu.com也是OK的。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>密钥的key id</li>\n<li>密钥的password</li>\n<li>私钥的KeyRingFile</li>\n<li>公钥上传到了公钥服务器<br>准备好了以上几项，我们就可以开始撸Gradle了</li>\n</ul>\n<h1><span id=\"san-bian-zhi-fa-bu-jiao-ben\">三、编制发布脚本</span><a href=\"#san-bian-zhi-fa-bu-jiao-ben\" class=\"header-anchor\">#</a></h1><p>主要依赖于两个插件：</p>\n<ul>\n<li>signing</li>\n<li>maven-publish</li>\n</ul>\n<p>注: maven插件已经过时</p>\n<p>编写发布脚本，在工程下新建。<code>publish.gradle</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext.<span class=\"string\">&#x27;signing.keyId&#x27;</span>=<span class=\"string\">&#x27;AE4240A5&#x27;</span></span><br><span class=\"line\">ext.<span class=\"string\">&#x27;signing.password&#x27;</span>=<span class=\"string\">&#x27;sai18109&#x27;</span></span><br><span class=\"line\">ext.<span class=\"string\">&#x27;signing.secretKeyRingFile&#x27;</span>=<span class=\"string\">&#x27;D:/keys/maven_publish_secret.gpg&#x27;</span></span><br><span class=\"line\">ext.ARTIFACTORY_USER=<span class=\"string\">&#x27;OSSRH用户名&#x27;</span></span><br><span class=\"line\">ext.ARTIFACTORY_PASSWORD=<span class=\"string\">&#x27;OSSRH密码&#x27;</span></span><br><span class=\"line\">ext.ARTIFACTORY_CONTEXTURL=<span class=\"string\">&#x27;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&#x27;</span></span><br><span class=\"line\">ext.LOCAL_ARTIFACTORY_USER=<span class=\"string\">&#x27;本地私服用户名&#x27;</span></span><br><span class=\"line\">ext.LOCAL_ARTIFACTORY_PASSWORD=<span class=\"string\">&#x27;本地私服密码&#x27;</span></span><br><span class=\"line\">ext.LOCAL_ARTIFACTORY_CONTEXTURL=<span class=\"string\">&#x27;本地地址&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#GAV</span></span><br><span class=\"line\">ext.<span class=\"keyword\">GROUP</span>=<span class=\"string\">&#x27;org.pkaq&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#项目地址相关</span></span><br><span class=\"line\">ext.POM_URL=<span class=\"string\">&#x27;http://pkaq.org&#x27;</span></span><br><span class=\"line\">ext.POM_SCM_URL=<span class=\"string\">&#x27;项目地址&#x27;</span></span><br><span class=\"line\">ext.POM_SCM_CONNECTION=<span class=\"string\">&#x27;项目地址&#x27;</span></span><br><span class=\"line\">ext.POM_SCM_DEV_CONNECTION=<span class=\"string\">&#x27;项目地址&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#项目相关信息</span></span><br><span class=\"line\">ext.GIT_URL=<span class=\"string\">&#x27;项目git地址&#x27;</span></span><br><span class=\"line\">ext.ISSUE_URL=<span class=\"string\">&#x27;issue提交地址&#x27;</span></span><br><span class=\"line\">ext.POM_PACKAGING=<span class=\"string\">&#x27;jar&#x27;</span></span><br><span class=\"line\">ext.POM_DESCRIPTION=<span class=\"string\">&#x27;项目描述&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#开源协议</span></span><br><span class=\"line\">ext.POM_LICENCE_NAME=<span class=\"string\">&#x27;The Apache Software License, Version 2.0&#x27;</span></span><br><span class=\"line\">ext.POM_LICENCE_URL=<span class=\"string\">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class=\"line\">ext.POM_LICENCE_DIST=<span class=\"string\">&#x27;repo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#开发者信息</span></span><br><span class=\"line\">ext.POM_DEVELOPER_ID=<span class=\"string\">&#x27;PKAQ&#x27;</span></span><br><span class=\"line\">ext.POM_DEVELOPER_NAME=<span class=\"string\">&#x27;开发者名称&#x27;</span></span><br><span class=\"line\">ext.POM_DEVELOPER_EMAIL=<span class=\"string\">&#x27;pkaq@msn.com&#x27;</span></span><br><span class=\"line\">ext.POM_DEVELOPER_URL=<span class=\"string\">&#x27;http://pkaq.org&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> sourcesJar(type: Jar) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"keyword\">sourceSets</span>.main.allJava</span><br><span class=\"line\">    archiveClassifier = <span class=\"string\">&#x27;sources&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> javadocJar(type: Jar) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> javadoc</span><br><span class=\"line\">    archiveClassifier = <span class=\"string\">&#x27;javadoc&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">javadoc &#123;</span><br><span class=\"line\">    <span class=\"keyword\">options</span> &#123;</span><br><span class=\"line\">        encoding <span class=\"string\">&quot;UTF-8&quot;</span></span><br><span class=\"line\">        charSet <span class=\"string\">&#x27;UTF-8&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(JavaVersion.current().isJava9Compatible()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">options</span>.addBooleanOption(<span class=\"string\">&#x27;html5&#x27;</span>, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">publishing &#123;</span><br><span class=\"line\">    publications &#123;</span><br><span class=\"line\">        mavenJava(MavenPublication) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">from</span> components.java</span><br><span class=\"line\">            <span class=\"comment\">// groupId,artifactId,version，如果不定义，则会按照以上默认值执行</span></span><br><span class=\"line\">            <span class=\"comment\">// groupId 必须于maven repo申请的group Id一致</span></span><br><span class=\"line\">            groupId <span class=\"keyword\">GROUP</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tafterEvaluate &#123;</span><br><span class=\"line\">\t\t\t\tartifactId <span class=\"keyword\">project</span>.archivesBaseName</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tartifact sourcesJar</span><br><span class=\"line\">            artifact javadocJar</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpom &#123;</span><br><span class=\"line\">                name = artifactId</span><br><span class=\"line\">                <span class=\"keyword\">description</span> = provider &#123; <span class=\"keyword\">project</span>.<span class=\"keyword\">description</span> &#125;</span><br><span class=\"line\">                url = POM_URL</span><br><span class=\"line\">                <span class=\"comment\">// 许可证</span></span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name = POM_LICENCE_NAME</span><br><span class=\"line\">                        url = POM_LICENCE_URL</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 开发者信息</span></span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id = POM_DEVELOPER_ID</span><br><span class=\"line\">                        name = POM_DEVELOPER_NAME</span><br><span class=\"line\">                        email = POM_DEVELOPER_EMAIL</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 版本控制仓库地址</span></span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection = POM_SCM_CONNECTION</span><br><span class=\"line\">                    developerConnection = POM_SCM_DEV_CONNECTION</span><br><span class=\"line\">                    url = POM_SCM_URL</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;\t\t        \t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 定义发布到哪里</span></span><br><span class=\"line\">\t<span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">           url = ARTIFACTORY_CONTEXTURL</span><br><span class=\"line\">            <span class=\"comment\">// 这里就是之前在issues.sonatype.org注册的账号</span></span><br><span class=\"line\">            credentials &#123;</span><br><span class=\"line\">                username ARTIFACTORY_USER</span><br><span class=\"line\">                password ARTIFACTORY_PASSWORD</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 本地私服</span></span><br><span class=\"line\"><span class=\"comment\">//        maven &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            name &quot;local&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//            url = LOCAL_ARTIFACTORY_CONTEXTURL</span></span><br><span class=\"line\"><span class=\"comment\">//            allowInsecureProtocol = true</span></span><br><span class=\"line\"><span class=\"comment\">//            credentials &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                username LOCAL_ARTIFACTORY_USER</span></span><br><span class=\"line\"><span class=\"comment\">//                password LOCAL_ARTIFACTORY_PASSWORD</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signing &#123;</span><br><span class=\"line\">    sign publishing.publications</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>build.gradle</code>中引入发布脚本</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 由于publish.gradle中有诸多敏感信息,不建议提交此文件,为了防止其他人报错,这里可以写一个判断.</span><br><span class=\"line\"># 如果一定要提交也可以将敏感信息存储到环境变量中,由环境变量获取</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(<span class=\"string\">&#x27;publish.gradle&#x27;</span>).exists()) &#123;</span><br><span class=\"line\">    apply <span class=\"keyword\">from</span>: <span class=\"string\">&#x27;publish.gradle&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"si-gou-jian-shang-chuan\">四、构件上传</span><a href=\"#si-gou-jian-shang-chuan\" class=\"header-anchor\">#</a></h1><p>首先，用Gradle执行publishToMavenLocal任务，先在本地发布下，看看生成了哪些文件，或还有什么问题</p>\n<p>然后，用Gradle执行publish任务，发布到指定的maven仓库</p>\n<p>如果没有报错，那么恭喜你，已经成功提交到了sonatype的仓库中</p>\n<p>但是提交成功，并不代表发布成功, 上传完成后去你之前提的 ISSUE 中回复一下官方人员 告诉他你已经上传好了, 之后他会给你审核,并且告诉你一个地址</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have already completed <span class=\"keyword\">the</span> <span class=\"keyword\">first</span> release.</span><br></pre></td></tr></table></figure>\n<h1><span id=\"wu-gou-jian-fa-bu\">五、构件发布</span><a href=\"#wu-gou-jian-fa-bu\" class=\"header-anchor\">#</a></h1><p>用你之前注册的账号密码，登录官方人员给你的回复里的地址<br><img src=\"5.png\" alt=\"5\"><br>登录后查看左侧的Build Promotion-&gt;Staging Repositories</p>\n<p>你的提交，会出现在最下面. Staging Repositories 中😂<br><img src=\"6.png\" alt=\"6\"></p>\n<p><strong>Close</strong><br>你的提交在未处理前，是open状态，然后点击Close按钮。</p>\n<p>一开始不太明白这个Close是啥意思，后来看了下，主要按照中央仓库的要求来验证下你上传到文件<br>签名就是其中一个步骤，会去公钥服务器拉取公钥，然后来验证你所有的文件<br>需要等待一会，等它执行完毕，状态会从open变成closed</p>\n<p>如果碰到错误的话，仔细看下Activity选项卡，执行了什么步骤，那个步骤出现了什么错误，很清晰的<br><strong>Release</strong><br>一般情况下，感觉如果顺利close后，再次选中点击Release，耐心等待一会，就大功告成了！</p>\n<p>可以在侧边栏Artifact Search中搜索下你的groupId，此时应该能看到对应的构件名称和版本了</p>\n<h1><span id=\"liu-chang-jian-wen-ti\">六、常见问题</span><a href=\"#liu-chang-jian-wen-ti\" class=\"header-anchor\">#</a></h1><p>如果不想让某个模块参与发布，可以添加如下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project.tasks.publish.enabled = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>","categories":["Gradle"],"tags":["Gradle","Maven"]},{"title":"使用Docker搭建基于官方镜像的Oracle 12c","url":"https://pkaq.org/2021/05/07/oracle12c/","content":"<h1><span id=\"qian-qi-zhun-bei\">前期准备</span><a href=\"#qian-qi-zhun-bei\" class=\"header-anchor\">#</a></h1><p>​    由于获取官方镜像需要登录，首先要去hub.docker.com注册一个docker hub账号，注册后在命令行执行如下命令进行登录。<br>​    </p>\n<h1><span id=\"huo-qu-jing-xiang\">获取镜像</span><a href=\"#huo-qu-jing-xiang\" class=\"header-anchor\">#</a></h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用刚才注册得用户名密码登录</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">docker pull store/oracle/database-enterprise:12.2.0.1-slim</span><br></pre></td></tr></table></figure>\n<p>官方镜像分了两个版本，其中一个slim版本是精简版。精简版不包含 : Analytics, Oracle R, Oracle Label Security, Oracle Text, Oracle Application Express and Oracle DataVault. </p>\n<h1><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\">#</a></h1><ol>\n<li><strong>创建宿主机映射目录</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/data/oradata </span><br></pre></td></tr></table></figure></li>\n<li><strong>创建并启动oracle数据库</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name 12c </span><br><span class=\"line\">-e DB_SID=orcl </span><br><span class=\"line\">-e DB_PDB=pdb </span><br><span class=\"line\">-e WEB_CONSOLE=<span class=\"literal\">false</span> </span><br><span class=\"line\">-e ORACLE_CHARACTERSET=ZHS16GBK </span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> </span><br><span class=\"line\">-v /opt/data/oradata:/ORCL \\ </span><br><span class=\"line\">-v /etc/localtime:/etc/localtime:ro\\</span><br><span class=\"line\">-p 15210:1521 </span><br><span class=\"line\">store/oracle/database-enterprise:12.2.0.1-slim</span><br></pre></td></tr></table></figure>\n命令解释<br> -d：创建后以守护进程运行<br> –restart=always： 当 docker 重启时,容器自动启动<br> –privileged：获取宿主机root权限<br> -v：将宿主机的/opt/data/oradata映射到容器内的/u01/app/oracle目录<br> -e：指定容器内环境变量<br> -p：指定宿主机的 15210 端口 映射到容器内的 1521 端口   </li>\n</ol>\n<ol start=\"3\">\n<li><strong>连接测试</strong><br>数据库安装成功后使用客户端工具，用初始创建的用户名/密码登录进行连接测试。<br>用户名：sys<br>密码：Oradoc_db1<br>SID:  orcl</li>\n</ol>\n<h1><span id=\"fu-1-xiu-gai-zi-fu-ji\">附1.修改字符集</span><a href=\"#fu-1-xiu-gai-zi-fu-ji\" class=\"header-anchor\">#</a></h1><p>1.连接测试</p>\n<p>使用客户端工具执行如下命令查看当前字符集配置。NLS_CHARACTERSET参数为当前字符集设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from v<span class=\"variable\">$nls_parameters</span>;</span><br></pre></td></tr></table></figure>\n<p>2.进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 12c /bin/bash</span><br></pre></td></tr></table></figure>\n<p>3.字符集修改</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 连接数据库</span><br><span class=\"line\">sqlplus /nolog</span><br><span class=\"line\"># 登录</span><br><span class=\"line\">conn /<span class=\"keyword\">as</span> sysdba</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;shutdown <span class=\"keyword\">immediate</span>;  </span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;startup mount</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">ALTER</span>  <span class=\"keyword\">SYSTEM</span>  <span class=\"keyword\">ENABLE</span>  RESTRICTED  <span class=\"keyword\">SESSION</span>;  </span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">ALTER</span>  <span class=\"keyword\">SYSTEM</span>  <span class=\"keyword\">SET</span>  JOB_QUEUE_PROCESSES=<span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">ALTER</span>  <span class=\"keyword\">SYSTEM</span>  <span class=\"keyword\">SET</span>  AQ_TM_PROCESSES=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">alter</span> <span class=\"keyword\">database</span> <span class=\"keyword\">open</span>;  </span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> ZHS16GBK;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> ZHS16GBK  ERROR at <span class=\"type\">line</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">ORA<span class=\"number\">-12712</span>: <span class=\"built_in\">new</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span> must be a superset <span class=\"keyword\">of</span> <span class=\"built_in\">old</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span></span><br><span class=\"line\">提示我们的字符集：新字符集必须为旧字符集的超集，这时我们可以跳过超集的检查做更改：</span><br><span class=\"line\">复制代码 代码如下:</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span> INTERNAL_USE ZHS16GBK;  </span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> v$nls_parameters; </span><br><span class=\"line\">重启检查是否更改完成：</span><br><span class=\"line\">复制代码 代码如下:</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;shutdown <span class=\"keyword\">immediate</span>;</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;startup</span><br><span class=\"line\"><span class=\"keyword\">SQL</span>&gt;<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> v$nls_parameters;</span><br></pre></td></tr></table></figure>","categories":["Database"],"tags":["SSO","Oracle"]},{"title":"使用cas-overlay-template搭建CAS服务","url":"https://pkaq.org/2020/05/07/cas-overlay-template/","content":"<h1><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h1><p>  单点登录的英文名称为Single Sign-On，简写为SSO，它是一个用户认证的过程，允许用户一次性进行认证之后，就访问系统中不同的应用；而不需要访问每个应用时，都重新输入密码。</p>\n<ul>\n<li>用户第一次访问受保护的应用，将会重定向到cas登录页面</li>\n<li>用户输入用户名和密码，cas server 认证用户创建sso session,并生成TGT和改客户端的服务票据（ST）</li>\n<li>应用拿着ST到 CAS 服务验证ST,验证通过后设置session和cookie返回浏览器</li>\n<li>用户浏览器携带cookie访问，应用验证后返回内容</li>\n<li>访问第二个cas client 应用，此时cookie中有TGT但是没有ST，应用要求去CAS 服务获取ST,cas 服务验证TGT并生成一个ST</li>\n<li>客户端携带ST访问应用，应用服务区Cas server 验证ticket,验证成功后设置session,cookie,重定向到应用服务地址<br>展示第二个应用的内容</li>\n</ul>\n<p><img src=\"0.jpg\" alt=\"0\"></p>\n<h1><span id=\"kuai-su-kai-shi\">快速开始</span><a href=\"#kuai-su-kai-shi\" class=\"header-anchor\">#</a></h1><p>git clone <a href=\"https://github.com/apereo/cas-overlay-template.git\">https://github.com/apereo/cas-overlay-template.git</a></p>\n<p>执行./gradlew.bat clean build  第一次构建比较慢，耐心等待<br>./gradlew.bat explodeWar 解压<br>此时将会在bulid目录下生成一个cas-resources 文件夹，我们把里面的文件全部拷贝到src/main/resources,将\\etc\\cas\\thekeystore 也拷贝到该目录下</p>\n<p>更改配置application.properties    server.ssl.key-store=classpath:thekeystore </p>\n<p>./gradlew.bat run 将cas运行在内嵌的 Embedded Tomcat 中</p>\n<p>启动完成后浏览器中打开 <a href=\"https://localhost:8443/cas/login\">https://localhost:8443/cas/login</a> </p>\n<p><img src=\"1.png\" alt=\"1\"></p>\n<p>此时我们的cas已经部署成功 在登录也面输入用户名和密码 casuser Mellon ,出现下面界面表明cas已经部署成功</p>\n<p><img src=\"2.png\" alt=\"2\"></p>\n","categories":["SSO"],"tags":["CAS","SSO"]},{"title":"基于 TrueLicense 的项目证书验证","url":"https://pkaq.org/2020/02/13/truelicense/","content":"<h2><span id=\"yi-jian-shu\">一、简述</span><a href=\"#yi-jian-shu\" class=\"header-anchor\">#</a></h2><p>开发的软件产品在交付使用的时候，往往有一段时间的试用期，这期间我们不希望自己的代码被客户二次拷贝，这个时候 license 就派上用场了，license 的功能包括设定有效期、绑定 ip、绑定 mac 等。授权方直接生成一个 license 给使用方使用，如果需要延长试用期，也只需要重新生成一份 license 即可，无需手动修改源代码。</p>\n<p>TrueLicense 是一个开源的证书管理引擎，详细介绍见 <a href=\"https://truelicense.java.net/\">https://truelicense.java.net/</a></p>\n<p>首先介绍下 license 授权机制的原理：</p>\n<ol>\n<li>生成密钥对，包含私钥和公钥。</li>\n<li>授权者保留私钥，使用私钥对授权信息诸如使用截止日期，mac 地址等内容生成 license 签名证书。</li>\n<li>公钥给使用者，放在代码中使用，用于验证 license 签名证书是否符合使用条件。</li>\n</ol>\n<a id=\"more\"></a>\n<h2><span id=\"er-sheng-cheng-mi-yao-dui\">二、生成密钥对</span><a href=\"#er-sheng-cheng-mi-yao-dui\" class=\"header-anchor\">#</a></h2><p>以下命令在 window cmd 命令窗口执行，注意当前执行目录，最后生成的密钥对即在该目录下：<br>1、首先要用 KeyTool 工具来生成私匙库：（-alias别名 -validity 3650 表示10年有效）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -<span class=\"built_in\">alias</span> privatekey -keysize 1024 -keystore privateKeys.store -validity 3650</span><br></pre></td></tr></table></figure>\n<p>2、然后把私匙库内的证书导出到一个文件当中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -<span class=\"built_in\">export</span> -<span class=\"built_in\">alias</span> privatekey -file certfile.cer -keystore privateKeys.store</span><br></pre></td></tr></table></figure>\n<p>3、然后再把这个证书文件导入到公匙库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -import -<span class=\"built_in\">alias</span> publiccert -file certfile.cer -keystore publicCerts.store</span><br></pre></td></tr></table></figure>\n<p>最后生成的文件 privateKeys.store（私钥）、publicCerts.store（公钥）拷贝出来备用。</p>\n<h2><span id=\"san-zhun-bei-gong-zuo\">三、准备工作</span><a href=\"#san-zhun-bei-gong-zuo\" class=\"header-anchor\">#</a></h2><p>首先，我们需要引入 truelicense 的 jar 包，用于实现我们的证书管理。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation  <span class=\"string\">&quot;cn.hutool:hutool-all:$&#123;hutool&#125;&quot;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&quot;de.schlichtherle.truelicense:truelicense-core:1.33&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们建立一个单例模式下的证书管理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LicenseManagerHolder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> LicenseManager licenseManager = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LicenseManagerHolder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LicenseManager <span class=\"title\">getLicenseManager</span><span class=\"params\">(LicenseParam param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (licenseManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LicenseManagerHolder.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (licenseManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    licenseManager = <span class=\"keyword\">new</span> LicenseManager(param);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> licenseManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"si-li-yong-si-yao-sheng-cheng-zheng-shu\">四、利用私钥生成证书</span><a href=\"#si-li-yong-si-yao-sheng-cheng-zheng-shu\" class=\"header-anchor\">#</a></h2><p>利用私钥生成证书，我们需要两部分内容，一部分是私钥的配置信息（私钥的配置信息在生成私钥库的过程中获得），一部分是自定义的项目证书信息。如下展示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eva:</span></span><br><span class=\"line\">  <span class=\"attr\">license:</span></span><br><span class=\"line\">    <span class=\"comment\">########## 私钥的配置信息 ###########</span></span><br><span class=\"line\">    <span class=\"attr\">priv:</span></span><br><span class=\"line\">      <span class=\"comment\"># 私钥的别名</span></span><br><span class=\"line\">      <span class=\"attr\">key_alias:</span> <span class=\"string\">private_license_key</span></span><br><span class=\"line\">      <span class=\"comment\"># privateKeyPwd（该密码是生成密钥对的密码 — 需要妥善保管，不能让使用者知道）</span></span><br><span class=\"line\">      <span class=\"attr\">key_pwd:</span> <span class=\"string\">7u8i9o0p</span></span><br><span class=\"line\">      <span class=\"comment\"># keyStorePwd（该密码是访问密钥库的密码 — 使用 keytool 生成密钥对时设置，使用者知道该密码）</span></span><br><span class=\"line\">      <span class=\"attr\">keystore_pwd:</span> <span class=\"string\">7u8i9o0p</span></span><br><span class=\"line\">      <span class=\"comment\"># 密钥库的地址（放在 resource 目录下）</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/license/private_license.store</span></span><br><span class=\"line\">    <span class=\"comment\">########## 公钥的配置信息 ###########</span></span><br><span class=\"line\">    <span class=\"attr\">pub:</span></span><br><span class=\"line\">      <span class=\"comment\"># 公钥别名</span></span><br><span class=\"line\">      <span class=\"attr\">alias:</span> <span class=\"string\">publiccert</span></span><br><span class=\"line\">    <span class=\"comment\"># 该密码是访问密钥库的密码 — 使用 keytool 生成密钥对时设置，使用者知道该密码</span></span><br><span class=\"line\">      <span class=\"attr\">keystore_pwd:</span> <span class=\"string\">7u8i9o0p</span></span><br><span class=\"line\">      <span class=\"comment\"># 公共库路径（放在 resource 目录下</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/license/publicCerts.store</span></span><br><span class=\"line\">      <span class=\"comment\"># 证书路径（我这边配置在了 linux 根路径下，即 /license.lic ）</span></span><br><span class=\"line\">      <span class=\"attr\">license:</span> <span class=\"string\">/license/license.lic</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目的唯一识别码</span></span><br><span class=\"line\">    <span class=\"attr\">subject:</span> <span class=\"string\">eva</span></span><br><span class=\"line\">    <span class=\"comment\">########## license content ###########</span></span><br><span class=\"line\">    <span class=\"comment\"># 发布日期</span></span><br><span class=\"line\">    <span class=\"attr\">issuedTime:</span> <span class=\"number\">2020-02-09 00:00:00</span></span><br><span class=\"line\">    <span class=\"comment\"># 有效开始日期</span></span><br><span class=\"line\">    <span class=\"attr\">notBefore:</span> <span class=\"number\">2020-02-09 00:00:00</span></span><br><span class=\"line\">    <span class=\"comment\"># 有效截止日期</span></span><br><span class=\"line\">    <span class=\"attr\">notAfter:</span> <span class=\"number\">2029-02-09 23:16:00</span></span><br><span class=\"line\">    <span class=\"comment\"># ip 地址</span></span><br><span class=\"line\">    <span class=\"attr\">ipAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.107</span></span><br><span class=\"line\">    <span class=\"comment\"># mac 地址</span></span><br><span class=\"line\">    <span class=\"attr\">macAddress:</span> <span class=\"number\">70</span><span class=\"string\">-C9-4E-E6-6D-D1</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用者类型，用户(user)、电脑(computer)、其他（else）</span></span><br><span class=\"line\">    <span class=\"attr\">consumerType:</span> <span class=\"string\">user</span></span><br><span class=\"line\">    <span class=\"comment\"># 证书允许使用的消费者数量</span></span><br><span class=\"line\">    <span class=\"attr\">consumerAmount:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 证书说明</span></span><br><span class=\"line\">    <span class=\"attr\">info:</span> <span class=\"string\">power</span> <span class=\"string\">by</span> <span class=\"string\">xiamen</span> <span class=\"string\">yungu</span></span><br><span class=\"line\">    <span class=\"comment\">#生成证书的地址</span></span><br><span class=\"line\">    <span class=\"attr\">licPath:</span> <span class=\"string\">D:\\eva_license\\license.lic</span></span><br></pre></td></tr></table></figure>\n<p>接下来，就是如何生成证书的实操部分了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.nerv.license;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.DateUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> de.schlichtherle.license.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.security.auth.x500.X500Principal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.prefs.Preferences;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LicenseGenerator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LicenseConfig licenseConfig;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * X500Princal 是一个证书文件的固有格式，详见API</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> X500Principal DEFAULT_HOLDERAND_ISSUER = <span class=\"keyword\">new</span> X500Principal(<span class=\"string\">&quot;CN=Eva, OU=Nerv, O=Nerv, L=Nerv, ST=Unknown, C=CN&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成证书，在证书发布者端执行</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        LicenseManager licenseManager = LicenseManagerHolder.getLicenseManager(initLicenseParams());</span><br><span class=\"line\">        licenseManager.store(buildLicenseContent(), <span class=\"keyword\">new</span> File(licenseConfig.getLicPath()));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;------ 证书发布成功 ------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化证书的相关参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> LicenseParam <span class=\"title\">initLicenseParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;LicenseGenerator&gt; clazz = LicenseGenerator.class;</span><br><span class=\"line\">        Preferences preferences = Preferences.userNodeForPackage(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置对证书内容加密的对称密码</span></span><br><span class=\"line\">        CipherParam cipherParam = <span class=\"keyword\">new</span> DefaultCipherParam(licenseConfig.getPriv().getKeystorePwd());</span><br><span class=\"line\">        <span class=\"comment\">// 参数 1,2 从哪个Class.getResource()获得密钥库;</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数 3 密钥库的别名;</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数 4 密钥库存储密码;</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数 5 密钥库密码</span></span><br><span class=\"line\">        KeyStoreParam privateStoreParam = <span class=\"keyword\">new</span> DefaultKeyStoreParam(clazz, licenseConfig.getPriv().getPath(),</span><br><span class=\"line\">                                                                          licenseConfig.getPriv().getKeyAlias(),</span><br><span class=\"line\">                                                                          licenseConfig.getPriv().getKeystorePwd(),</span><br><span class=\"line\">                                                                          licenseConfig.getPriv().getKeyPwd());</span><br><span class=\"line\">        <span class=\"comment\">// 返回生成证书时需要的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultLicenseParam(licenseConfig.getSubject(), preferences, privateStoreParam, cipherParam);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过外部配置文件构建证书的的相关信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ParseException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LicenseContent <span class=\"title\">buildLicenseContent</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">        LicenseContent content = <span class=\"keyword\">new</span> LicenseContent();</span><br><span class=\"line\"><span class=\"comment\">//        SimpleDateFormat formate = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        content.setConsumerAmount(licenseConfig.getConsumerAmount());</span><br><span class=\"line\">        content.setConsumerType(licenseConfig.getConsumerType());</span><br><span class=\"line\">        content.setHolder(DEFAULT_HOLDERAND_ISSUER);</span><br><span class=\"line\">        content.setIssuer(DEFAULT_HOLDERAND_ISSUER);</span><br><span class=\"line\">        content.setIssued( DateUtil.parseDateTime(licenseConfig.getIssuedTime()) );</span><br><span class=\"line\">        content.setNotBefore( DateUtil.parseDateTime(licenseConfig.getNotBefore()) );</span><br><span class=\"line\">        content.setNotAfter( DateUtil.parseDateTime(licenseConfig.getNotAfter()) );</span><br><span class=\"line\">        content.setInfo(licenseConfig.getInfo());</span><br><span class=\"line\">        <span class=\"comment\">// 扩展字段</span></span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;ip&quot;</span>, licenseConfig.getIpAddress());</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;mac&quot;</span>, licenseConfig.getMacAddress());</span><br><span class=\"line\">        content.setExtra(map);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，来尝试生成一份证书吧！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       licenseVerify.init();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"si-li-yong-gong-yao-yan-zheng-zheng-shu\">四、利用公钥验证证书</span><a href=\"#si-li-yong-gong-yao-yan-zheng-zheng-shu\" class=\"header-anchor\">#</a></h2><p>利用公钥生成证书，我们需要有公钥库、license 证书等信息。</p>\n<p>接下来就是怎么用公钥验证 license 证书，怎样验证 ip、mac 地址等信息的过程了~</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.nerv.license;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.net.NetUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> de.schlichtherle.license.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.prefs.Preferences;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LicenseVerify</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LicenseConfig licenseConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 安装证书证书</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">install</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            LicenseManager licenseManager = getLicenseManager();</span><br><span class=\"line\">            licenseManager.install(<span class=\"keyword\">new</span> File(licenseConfig.getLicPath()));</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;安装证书成功!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;授权已过期, 安装证书失败!&quot;</span>, e);</span><br><span class=\"line\">            Runtime.getRuntime().halt(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> LicenseManager <span class=\"title\">getLicenseManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LicenseManagerHolder.getLicenseManager(initLicenseParams());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化证书的相关参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> LicenseParam <span class=\"title\">initLicenseParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;LicenseVerify&gt; clazz = LicenseVerify.class;</span><br><span class=\"line\">        Preferences pre = Preferences.userNodeForPackage(clazz);</span><br><span class=\"line\">        CipherParam cipherParam = <span class=\"keyword\">new</span> DefaultCipherParam(licenseConfig.getPub().getKeystorePwd());</span><br><span class=\"line\">        KeyStoreParam pubStoreParam = <span class=\"keyword\">new</span> DefaultKeyStoreParam(clazz,</span><br><span class=\"line\">                                                               licenseConfig.getPub().getPath(),</span><br><span class=\"line\">                                                               licenseConfig.getPub().getAlias(),</span><br><span class=\"line\">                                                               licenseConfig.getPub().getKeystorePwd() , <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultLicenseParam(licenseConfig.getSubject(), pre, pubStoreParam, cipherParam);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证证书的合法性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">vertify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            LicenseManager licenseManager = getLicenseManager();</span><br><span class=\"line\">            LicenseContent verify = licenseManager.verify();</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;验证证书成功!&quot;</span>);</span><br><span class=\"line\">            Map&lt;String, String&gt; extra = (Map) verify.getExtra();</span><br><span class=\"line\">            String ip = extra.get(<span class=\"string\">&quot;ip&quot;</span>);</span><br><span class=\"line\">            InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class=\"line\">            String localIp = inetAddress.toString().split(<span class=\"string\">&quot;/&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Objects.equals(ip, localIp)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;IP 地址验证不通过&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String mac = extra.get(<span class=\"string\">&quot;mac&quot;</span>);</span><br><span class=\"line\">            String localMac = getLocalMac(inetAddress);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Objects.equals(mac, localMac)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;MAC 地址验证不通过&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;IP、MAC地址验证通过&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (LicenseContentException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;证书已经过期!&quot;</span>, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;验证证书失败!&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到本机 mac 地址</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inetAddress</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLocalMac</span><span class=\"params\">(InetAddress inetAddress)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NetUtil.getMacAddress(inetAddress).toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了公钥的验证过程了，等下！事情还没结束呢！我们需要在项目启动的时候，安装 licnese 证书，然后验证ip、mac 等信息。如果校验不通过，就阻止项目启动！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (evaConfig.getLicense().isEnable())&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 安装license</span></span><br><span class=\"line\">   licenseVerify.init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证license</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!licenseVerify.vertify()) &#123;</span><br><span class=\"line\">   log.error(<span class=\"string\">&quot;授权验证未通过, 请更新授权文件&quot;</span>);</span><br><span class=\"line\">   \tRuntime.getRuntime().halt(<span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","categories":["Spring Boot"],"tags":["Spring boot","License"]},{"title":"使用Spring Boot Admin监控Spring Boot应用","url":"https://pkaq.org/2020/01/08/monitor/","content":"<h1><span id=\"1-gai-shu\">1.概述</span><a href=\"#1-gai-shu\" class=\"header-anchor\">#</a></h1><p>​    Spring Boot Admin是一个开源社区项目，用于管理和监控SpringBoot应用程序。 应用程序作为Spring Boot Admin Client向为Spring Boot Admin Server注册（通过HTTP）或使用SpringCloud注册中心（例如Eureka，Consul）发现。 UI是的AngularJs应用程序，展示Spring Boot Admin Client的Actuator端点上的一些监控。常见的功能或者监控如下：</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>显示健康状况</p>\n</li>\n<li><p>显示详细信息，例如</p>\n<ul>\n<li>JVM和内存指标</li>\n<li>micrometer.io指标</li>\n<li>数据源指标</li>\n<li>缓存指标</li>\n</ul>\n</li>\n<li><p>显示构建信息编号</p>\n</li>\n<li><p>关注并下载日志文件</p>\n</li>\n<li><p>查看jvm系统和环境属性</p>\n</li>\n<li><p>查看Spring Boot配置属性</p>\n</li>\n<li><p>支持Spring Cloud的postable / env-和/ refresh-endpoint</p>\n</li>\n<li><p>轻松的日志级管理</p>\n</li>\n<li><p>与JMX-beans交互</p>\n</li>\n<li><p>查看线程转储</p>\n</li>\n<li><p>查看http跟踪</p>\n</li>\n<li><p>查看auditevents</p>\n</li>\n<li><p>查看http-endpoints</p>\n</li>\n<li><p>查看计划任务</p>\n</li>\n<li><p>查看和删除活动会话（使用spring-session）</p>\n</li>\n<li><p>查看Flyway / Liquibase数据库迁移</p>\n</li>\n<li><p>下载heapdump</p>\n</li>\n<li><p>状态变更通知（通过电子邮件，Slack，Hipchat，……）</p>\n</li>\n<li><p>状态更改的事件日志（非持久性）</p>\n</li>\n</ul>\n<h1><span id=\"2-kai-shi\">2.开始</span><a href=\"#2-kai-shi\" class=\"header-anchor\">#</a></h1><p><code>Spring Boot Admin</code>由两部分组成<code>Server</code>和<code>Client</code>，一个<code>Server</code>可支持多个<code>Client</code>的监控。   </p>\n<h2><span id=\"2-1-server-duan-da-jian\">2.1 Server端搭建</span><a href=\"#2-1-server-duan-da-jian\" class=\"header-anchor\">#</a></h2><p>​    Server端搭建主要分为如下步骤：</p>\n<ul>\n<li><p>引入依赖</p>\n</li>\n<li><p>配置注解</p>\n</li>\n<li><p>项目配置</p>\n</li>\n<li><p>上线发布</p>\n</li>\n</ul>\n<h3><span id=\"2-1-1-yin-ru-yi-lai\">2.1.1 引入依赖</span><a href=\"#2-1-1-yin-ru-yi-lai\" class=\"header-anchor\">#</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;de.codecentric:spring-boot-admin-starter-server:$&#123;boot_admin&#125;&quot;</span></span><br><span class=\"line\"># 可选增强配置(如需对监控页面进行鉴权访问添加此项) </span><br><span class=\"line\"><span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-security:$&#123;springBootVersion&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-1-2-pei-zhi-zhu-jie\">2.1.2 配置注解</span><a href=\"#2-1-2-pei-zhi-zhu-jie\" class=\"header-anchor\">#</a></h3><p>启动类上添加启用注解<code>@EnableAdminServer</code>即可。</p>\n<h3><span id=\"2-1-3-xiang-mu-pei-zhi\">2.1.3 项目配置</span><a href=\"#2-1-3-xiang-mu-pei-zhi\" class=\"header-anchor\">#</a></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置应用发布的端口</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">19001</span></span><br><span class=\"line\"><span class=\"comment\"># 可选增强配置(如需对监控页面进行鉴权访问添加此项) </span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span></span><br><span class=\"line\">      <span class=\"comment\"># 这里不要丢掉外面的引号</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">&quot;eva&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">&quot;***&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Spring security 鉴权配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter( <span class=\"string\">&quot;redirectTo&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">                .antMatchers( adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span> ).permitAll()</span><br><span class=\"line\">                .antMatchers( adminContextPath + <span class=\"string\">&quot;/login&quot;</span> ).permitAll()</span><br><span class=\"line\">                .anyRequest().authenticated()</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .formLogin().loginPage( adminContextPath + <span class=\"string\">&quot;/login&quot;</span> ).successHandler( successHandler ).and()</span><br><span class=\"line\">                .logout().logoutUrl( adminContextPath + <span class=\"string\">&quot;/logout&quot;</span> ).and()</span><br><span class=\"line\">                .httpBasic().and()</span><br><span class=\"line\">                .csrf().disable();</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:on</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3><span id=\"2-1-4-shang-xian-fa-bu\">2.1.4 上线发布</span><a href=\"#2-1-4-shang-xian-fa-bu\" class=\"header-anchor\">#</a></h3><p>建议使用<code>Docker</code>将打包后的文件发布</p>\n<h3><span id=\"2-1-5-jian-dan-fang-shi\">2.1.5 简单方式</span><a href=\"#2-1-5-jian-dan-fang-shi\" class=\"header-anchor\">#</a></h3><p>可以直接拉取我上传的 docker 镜像 然后启动容器即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mosvex/eva-boot-admin</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-2-client-pei-zhi\">2.2 Client配置</span><a href=\"#2-2-client-pei-zhi\" class=\"header-anchor\">#</a></h2><p>   客户端的配置也十分简单,分为如下步骤</p>\n<ul>\n<li>引入依赖</li>\n<li>项目配置</li>\n<li>上线发布</li>\n</ul>\n<h3><span id=\"2-2-1-yin-ru-yi-lai\">2.2.1 引入依赖</span><a href=\"#2-2-1-yin-ru-yi-lai\" class=\"header-anchor\">#</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;de.codecentric:spring-boot-admin-starter-client:$&#123;boot_admin&#125;&quot;</span>,</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-2-2-xiang-mu-pei-zhi\">2.2.2 项目配置</span><a href=\"#2-2-2-xiang-mu-pei-zhi\" class=\"header-anchor\">#</a></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">boot:</span></span><br><span class=\"line\">    <span class=\"attr\">admin:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">http://192.168.10.166:19001/</span></span><br><span class=\"line\">        <span class=\"comment\"># Server鉴权需要的用户名/密码 这里不需要引号</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">eva</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">***</span></span><br><span class=\"line\">        <span class=\"comment\">#是否使用注册的ip地址来取代上述各个url中hostname的值，默认值是false（也就是说默认情况下上述各个url中会使用hostname的值，比如我的电脑的hostname为p-v-9）。如果设置了server.address或者management.address的话ip地址就是该值，如果没有设置这两个属性的话ip地址值是InetAddress.getLocalHost()的值。</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意 不配置此项使用默认hostname可能会出现 `Name or service not known`异常</span></span><br><span class=\"line\">        <span class=\"attr\">instance:</span></span><br><span class=\"line\">          <span class=\"attr\">prefer-ip:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">      \t<span class=\"comment\"># 暴露所有端口</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br><span class=\"line\">  <span class=\"comment\"># 本机ip 对应上面instace:prefeer-ip配置说明</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.127</span></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"2-2-3-shang-xian-fa-bu\">2.2.3 上线发布</span><a href=\"#2-2-3-shang-xian-fa-bu\" class=\"header-anchor\">#</a></h3><p>​    启动客户端服务之后 访问<code>Server</code>即可在应用墙看到客户端情况。</p>\n","categories":["Spring Boot"],"tags":["Spring boot","应用监控"]},{"title":"为Gradle创建一个自定义插件","url":"https://pkaq.org/2018/12/08/gradleplugin/","content":"<h1><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h1><p>　 在对<code>Gradle</code>有了一定的了解后，你会发现通过使用Gradle的内置任务以及各种插件可以轻松地达成构建目标，例如使用了<code>war</code>插件后，无需编写任何<code>Task</code>即拥有了打<code>war</code>包的能力。大多数情况下，官方提供的插件和众多第三方插件可以满足你的绝大部分需求，但或许你也想为团队提供一个定制化功能的插件。本章节就是来讲解如何编写、发布一个自定义插件来实现<code>Gradle</code>功能的扩展。</p>\n<a id=\"more\"></a>\n\n<h1><span id=\"mu-lu-jie-gou\">目录结构</span><a href=\"#mu-lu-jie-gou\" class=\"header-anchor\">#</a></h1><p>　 在前面的章节已经介绍了<code>如何自定义一个Task</code>，编写插件其实与之类似，也可以把插件看作为若干任务的包装器。甚至方式也与编写一个<code>Task</code>相同，你可以选择把插件代码直接编写到脚本中或者作为一个独立的工程发布出去。出于可维护性、易用性等方面的考虑，本章节只介绍如何采用独立工程的方式编写插件。</p>\n<p>　 一个插件工程的目录结构与一个普通的<code>java</code>工程一致，你可以选择使用Java或者Groovy来作为插件的实现。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-src   </span><br><span class=\"line\">\t|-main   </span><br><span class=\"line\">\t\t|-java</span><br><span class=\"line\">        |-groovy</span><br><span class=\"line\">\t\t|-resources   </span><br><span class=\"line\">\t\t\t|-META-INF   </span><br><span class=\"line\">\t|-test   </span><br><span class=\"line\">\t\t|-java </span><br><span class=\"line\">        |-groovy</span><br><span class=\"line\">\t\t|-resource  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1><span id=\"ru-he-kai-shi\">如何开始</span><a href=\"#ru-he-kai-shi\" class=\"header-anchor\">#</a></h1><p>　 接下来我们便携与一个名为<code>org.pkaq.foLeng</code>的插件，来描述一个插件编写的步骤，该插件提供一个名为<code>mlfl</code>的<code>Task</code>，该<code>Task</code>可接受一个名为<code>words</code>的输入属性，运行插件任务后会在控制台显出佛祖真身，保佑你的代码不受<code>bug</code>侵扰。</p>\n<p>　 该插件主要有三部分：任务定义、插件定义、插件的扩展属性。</p>\n<p>　 开始编写之前你需要引入<code>Gradle</code>相关依赖:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile localGroovy() </span><br><span class=\"line\">    compile gradleApi() </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"1-ren-wu-ding-yi\">1.任务定义</span><a href=\"#1-ren-wu-ding-yi\" class=\"header-anchor\">#</a></h2><p>　 首先定义一个插件任务，方式与<code>如何自定义一个Task</code>提到的方式相同。只需继承<code>DefaultTask</code>类，并添加相应注解即可。<code>@Input</code>定义了该任务接受一个名为<code>words</code>的入参，<code>@TaskAction</code>注解了<code>Task</code>的行为，表示该<code>Task</code>调用时将执行注解动作。该动作执行后会在控制台打印出佛祖真身以及输入的参数。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.pkaq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.DefaultTask</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.Input</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.TaskAction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FoLengTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultTask</span> &#123;</span></span><br><span class=\"line\">   <span class=\"meta\">@Input</span></span><br><span class=\"line\">    String words = <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    FoLengTask()&#123;</span><br><span class=\"line\">       description = <span class=\"string\">&quot;Mai Le FoLeng?&quot;</span></span><br><span class=\"line\">       group = <span class=\"string\">&quot;FoLeng&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TaskAction</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> mlfl() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取输入的属性</span></span><br><span class=\"line\">        words = getWords()</span><br><span class=\"line\">        println <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                   _ooOoo_</span></span><br><span class=\"line\"><span class=\"string\">                  o8888888o</span></span><br><span class=\"line\"><span class=\"string\">                  88&quot; . &quot;88</span></span><br><span class=\"line\"><span class=\"string\">                  (| -_- |)</span></span><br><span class=\"line\"><span class=\"string\">                  O\\\\  =  /O</span></span><br><span class=\"line\"><span class=\"string\">               ____/`---&#x27;\\\\____</span></span><br><span class=\"line\"><span class=\"string\">             .&#x27;  \\\\\\\\|     |//  `.</span></span><br><span class=\"line\"><span class=\"string\">            /  \\\\\\\\|||  :  |||//  \\\\</span></span><br><span class=\"line\"><span class=\"string\">           /  _||||| -:- |||||-  \\\\</span></span><br><span class=\"line\"><span class=\"string\">           |   | \\\\\\\\\\\\  -  /// |   |</span></span><br><span class=\"line\"><span class=\"string\">           | \\\\_|  &#x27;&#x27;\\\\---/&#x27;&#x27;  |   |</span></span><br><span class=\"line\"><span class=\"string\">           \\\\  .-\\\\__  `-`  ___/-. /</span></span><br><span class=\"line\"><span class=\"string\">         ___`. .&#x27;  /--.--\\\\  `. . __</span></span><br><span class=\"line\"><span class=\"string\">      .&quot;&quot; &#x27;&lt;  `.___\\\\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span></span><br><span class=\"line\"><span class=\"string\">     | | :  ` - `.;`\\\\ _ /`;.`/ - ` : | |</span></span><br><span class=\"line\"><span class=\"string\">     \\\\  \\\\ `-.   \\\\_ __\\\\ /__ _/   .-` /  /</span></span><br><span class=\"line\"><span class=\"string\">======`-.____`-.___\\\\_____/___.-`____.-&#x27;======</span></span><br><span class=\"line\"><span class=\"string\">                   `=---=&#x27;</span></span><br><span class=\"line\"><span class=\"string\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class=\"line\"><span class=\"string\">            佛祖保佑       永无BUG</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        println <span class=\"string\">&quot;            &lt; -   $&#123;words&#125;   -&gt;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"2-kuo-zhan-shu-xing\">2.扩展属性</span><a href=\"#2-kuo-zhan-shu-xing\" class=\"header-anchor\">#</a></h2><p>　 为插件添加一个名为<code>words</code>的扩展属性。这样我们在插件发布后可以采用定义的扩展容器来方面的设定插件的各类参数。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.pkaq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FolengExtension</span> &#123;</span></span><br><span class=\"line\">   String words</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"3-cha-jian-ding-yi\">3.插件定义</span><a href=\"#3-cha-jian-ding-yi\" class=\"header-anchor\">#</a></h2><p>　 定义插件只需实现<code>Plugin</code>接口即可，该接口只提供了一个方法：<code>void apply(Project project)；</code>。由<code>DefaultTask</code>继承而来的<code>Task</code>都有一个<code>conventionMapping</code>属性，通过这个属性可以将扩展模型的值赋值给<code>Task</code>的<code>@Input``@Output</code>参数。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.pkaq</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.Plugin</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.Project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FoLengPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt;&#123;</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span>\t\t</span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(Project project) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**注册一个扩展容器，扩展容器可以使我们在一个闭包中为task赋值*/</span></span><br><span class=\"line\">        project.extensions.create(<span class=\"string\">&#x27;foleng&#x27;</span>, FolengExtension)</span><br><span class=\"line\">        folengTask(project)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> folengTask(Project project)&#123;</span><br><span class=\"line\">        project.tasks.withType(FoLengTask) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**查找扩展容器中已配置的属性*/</span></span><br><span class=\"line\">            <span class=\"keyword\">def</span> extension = project.extensions.findByName(<span class=\"string\">&#x27;foleng&#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\">/**将闭包中的扩展属性值赋给 FoLengTask 的相关属性*/</span></span><br><span class=\"line\">            conventionMapping.words = &#123; extension.words &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        project.task(<span class=\"string\">&#x27;mlfl&#x27;</span>, <span class=\"attr\">type:</span> FoLengTask) &#123;</span><br><span class=\"line\">            conventionMapping.words = &#123;</span><br><span class=\"line\">               project.hasProperty(<span class=\"string\">&#x27;words&#x27;</span>) ?</span><br><span class=\"line\">                       project.words :</span><br><span class=\"line\">                       project.extensions.findByName(<span class=\"string\">&#x27;foleng&#x27;</span>).words</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println <span class=\"string\">&#x27; The End &#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1><span id=\"fa-bu-cha-jian\">发布插件</span><a href=\"#fa-bu-cha-jian\" class=\"header-anchor\">#</a></h1><p>　 　 至此已经完成了一个简单插件的编写，默认情况下插件的ID与工程的名称是一致的，如果要改变这个默认规则可以在<code>src/main/resources/META-INF/gradle-plugins</code>下新建一个<code>pluginId.properties</code>的文件，该文件的名称即为插件的<code>id</code>，在插件发布后可通过<code>apply plugin:id</code>来引入插件。内容如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">implementation-class</span>=<span class=\"string\">org.pkaq.FoLengPlugin</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"fa-bu-dao-maven-cang-ku\">发布到maven仓库</span><a href=\"#fa-bu-dao-maven-cang-ku\" class=\"header-anchor\">#</a></h3><p>　 　 现在可以把编写好的插件发布到<code>Maven</code>仓库来使用了。不过在发布之前可以通过使用<code>gradle assemble </code>本地打包测试一下。只需要将打包后的<code>jar</code>放到需要调用插件的工程内，通过本地文件仓库的形式引入即可。关于如何上传到<code>Maven</code>仓库，请查阅<code>打包与发布章节</code>进行详细了解。这里使用了maven插件简单的发布到了本地目录中。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;maven&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 发布插件到本地目录</span></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">             repository(<span class=\"attr\">url:</span> uri(<span class=\"string\">&#x27;/opt/repo&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　 　 使用插件</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">repositories</span> &#123; <span class=\"keyword\">flatDir</span> name: <span class=\"string\">&#x27;libs&#x27;</span>, dirs: <span class=\"string\">&quot;libs&quot;</span> &#125;\t</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;org.pkaq:plugin:1.0&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//应用插件</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;org.pkaq.foLeng&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">foleng &#123;</span><br><span class=\"line\">\twords = <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"fa-bu-dao-gradle-plugin-portal\">发布到<code>Gradle Plugin Portal</code></span><a href=\"#fa-bu-dao-gradle-plugin-portal\" class=\"header-anchor\">#</a></h3><p> 　 　 为了便于插件的推广和检索，更好的形式是将编写好的插件上传到<code>Gradle Plugin Portal</code>，上传到<code>Gradle Plugin Portal</code>只需如下几步即可。</p>\n<ol>\n<li>创建一个Gradle账户和Key获取</li>\n<li>配置相关Key和发布参数到Gradle脚本</li>\n</ol>\n<p>　 　 注册登录后在个人中心界面可以看到<code>API Key</code>的标签页，复制key和secret后保存到<code>gradle.properties</code>中即可。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">gradle.publish.key</span>=<span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"meta\">gradle.publish.secret</span>=<span class=\"string\">bar</span></span><br></pre></td></tr></table></figure>\n<p>　 　 脚本配置，首先应用<code>Gradle</code>提供的发布插件，然后针对插件参数进行配置。如图该插件提供了见名知意的属性这里不做过多赘述。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">plugins</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">id</span> <span class=\"string\">&#x27;java-gradle-plugin&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;com.gradle.plugin-publish&#x27;</span> version <span class=\"string\">&#x27;0.10.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pluginBundle &#123;</span><br><span class=\"line\">    <span class=\"attribute\">website</span> = <span class=\"string\">&#x27;https://github.com/GradleCN/GradleSide&#x27;</span></span><br><span class=\"line\">    vcsUrl = <span class=\"string\">&#x27;https://github.com/GradleCN/GradleSide&#x27;</span></span><br><span class=\"line\">    tags = [<span class=\"string\">&#x27;买了佛冷&#x27;</span>, <span class=\"string\">&#x27;pluginlearn&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gradlePlugin &#123;</span><br><span class=\"line\">    <span class=\"section\">plugins</span> &#123;</span><br><span class=\"line\">        <span class=\"section\">foLeng</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">id</span> = <span class=\"string\">&#x27;org.pkaq.foLeng&#x27;</span></span><br><span class=\"line\">            displayName = <span class=\"string\">&#x27;Mai le fo leng?&#x27;</span></span><br><span class=\"line\">            description = <span class=\"string\">&#x27;&lt;a plugin demo&gt;&#x27;</span></span><br><span class=\"line\">            implementationClass = <span class=\"string\">&#x27;org.pkaq.FoLengPlugin&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>完整脚本如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;java-gradle-plugin&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;com.gradle.plugin-publish&#x27;</span> version <span class=\"string\">&#x27;0.10.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;maven&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">group = <span class=\"string\">&#x27;org.pakq&#x27;</span></span><br><span class=\"line\">archivesBaseName=<span class=\"string\">&quot;plugin&quot;</span></span><br><span class=\"line\">version = <span class=\"string\">&#x27;1.0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pluginBundle &#123;</span><br><span class=\"line\">    website = <span class=\"string\">&#x27;https://github.com/GradleCN/GradleSide&#x27;</span></span><br><span class=\"line\">    vcsUrl = <span class=\"string\">&#x27;https://github.com/GradleCN/GradleSide&#x27;</span></span><br><span class=\"line\">    tags = [<span class=\"string\">&#x27;买了佛冷&#x27;</span>, <span class=\"string\">&#x27;pluginlearn&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gradlePlugin &#123;</span><br><span class=\"line\">    plugins &#123;</span><br><span class=\"line\">        foLeng &#123;</span><br><span class=\"line\">            id = <span class=\"string\">&#x27;org.pkaq.foLeng&#x27;</span></span><br><span class=\"line\">            displayName = <span class=\"string\">&#x27;Mai le fo leng?&#x27;</span></span><br><span class=\"line\">            description = <span class=\"string\">&#x27;&lt;a plugin demo&gt;&#x27;</span></span><br><span class=\"line\">            implementationClass = <span class=\"string\">&#x27;org.pkaq.FoLengPlugin&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile localGroovy() </span><br><span class=\"line\">    compile gradleApi() </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发布插件到本地目录</span></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">             repository(<span class=\"attr\">url:</span> uri(<span class=\"string\">&#x27;/opt/repo&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"使用pt-archiver进行数据归档","url":"https://pkaq.org/2018/12/04/pt-archiver/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>​    pt-archiver是percona工具集的一员 ,可以方便针对数据库数据不同场景进行清理\\导出\\合并等操作。</p>\n<a id=\"more\"></a>\n\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>mysql: 5.7.22</li>\n<li>Percona Toolkit: 3.0.12<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1></li>\n</ul>\n<h3><span id=\"1-an-zhuang-yi-lai\">1.安装依赖</span><a href=\"#1-an-zhuang-yi-lai\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y perl perl-IO-Socket-SSL perl-DBD-MySQL perl-Time-HiRes perl-Digest-MD5 perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-xia-zai-an-zhuang-pt-archiver\">2.下载 安装pt-archiver</span><a href=\"#2-xia-zai-an-zhuang-pt-archiver\" class=\"header-anchor\">#</a></h3><p><a href=\"https://www.percona.com/downloads/percona-toolkit/LATEST/\">下载Percona Toolkit</a>，选择与目标系统匹配的版本，下载相应rpm进行安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm ivh percona-toolkit-3.0.12-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-pei-zhi-gui-dang-gui-ze\">3.配置归档规则</span><a href=\"#3-pei-zhi-gui-dang-gui-ze\" class=\"header-anchor\">#</a></h3><p><code>pt-archiver </code>的基本用法如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-archiver [OPTIONS] --source DSN [--dest DSN] --where WHERE</span><br><span class=\"line\"></span><br><span class=\"line\">DSN的详细参数：</span><br><span class=\"line\">a:查询</span><br><span class=\"line\">A:字符集</span><br><span class=\"line\">b：true代表禁用binlog</span><br><span class=\"line\">D：数据库</span><br><span class=\"line\">u：数据库链接账号</span><br><span class=\"line\">p：数据库链接密码</span><br><span class=\"line\">h：主机IP</span><br><span class=\"line\">F：配置文件位置</span><br><span class=\"line\">i：是否使用某索引</span><br><span class=\"line\">m：插件模块</span><br><span class=\"line\">P：端口号</span><br><span class=\"line\">S：socket文件</span><br><span class=\"line\">t：表</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-archiver  \\</span><br><span class=\"line\">--source h=ip,P=3306,p=&#x27;pwd!&#x27;,D=dbname,t=tablename  \\</span><br><span class=\"line\">--charset=UTF8  \\</span><br><span class=\"line\">--where &#x27;condition=curdate()-1&#x27;  \\</span><br><span class=\"line\">--progress 5000 --file &quot;/opt/data/pt-archinver/%t-%Y%m%d.dat&quot;  \\</span><br><span class=\"line\">--statistics --limit 5000 --txn-size 1000 --bulk-delete</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数说明:</p>\n<p>–source : 来源数据, 子参数参见上文</p>\n<p>–charset: 字符编码</p>\n<p>– where: 归档条件</p>\n<p>–progress 5000: 每5000行打印一次信息</p>\n<p>–file : 导出的文件名 <strong>导出的路径必须存在</strong></p>\n<p>–statistics:结束的时候给出统计信息：开始的时间点，结束的时间点，查询的行数，归档的行数，删除的行数，以及各个阶段消耗的总的时间和比例，便于以此进行优化。 </p>\n<p>–limit 5000: 每次事务删除5000条数据，默认1条 </p>\n<p>–txn-size 1000: 每个事务提交的数据行数（包括读写操作），批量提交 </p>\n<p>–bulk-delete: 批量删除source上的旧数据 </p>\n</blockquote>\n<h2><span id=\"ding-shi-gui-dang\">定时归档</span><a href=\"#ding-shi-gui-dang\" class=\"header-anchor\">#</a></h2><p>把归档命令存成<code>.sh</code>脚本后,使用<code>crontab -e</code>创建定时任务实现定时归档。如下示例为每小时执行一次:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* */1 * * *  sh /opt/cronjob/archiver.sh</span><br></pre></td></tr></table></figure>\n<h2><span id=\"fu-lu\">附录</span><a href=\"#fu-lu\" class=\"header-anchor\">#</a></h2><p><strong>常用参数说明</strong></p>\n<blockquote>\n<p><strong>–limit10000</strong>       每次取1000行数据用pt-archive处理，Number of rows to fetch and archive per statement.<br><strong>–txn-size  1000</strong>   设置1000行为一个事务提交一次，Number of rows pertransaction.<br><strong>–where‘id&lt;3000‘</strong>   设置操作条件<br><strong>–progress5000</strong>     每处理5000行输出一次处理信息<br><strong>–statistics</strong>       输出执行过程及最后的操作统计。（只要不加上–quiet，默认情况下pt-archive都会输出执行过程的）<br><strong>–charset=UTF8</strong>     指定字符集为UTF8<br><strong>–bulk-delete</strong>      批量删除source上的旧数据(例如每次1000行的批量删除操作)<br><strong>–bulk-insert</strong>      批量插入数据到dest主机 (看dest的general log发现它是通过在dest主机上LOAD DATA LOCAL INFILE插入数据的)<br><strong>–replace</strong>          将insert into 语句改成replace写入到dest库<br><strong>–sleep120</strong>         每次归档了limit个行记录后的休眠120秒（单位为秒）<br><strong>–file ‘/root/test.txt‘</strong>：数据存放的文件，最好指定绝对路径，文件名可以灵活地组合<br><strong>–purge</strong>             删除source数据库的相关匹配记录<br><strong>–header</strong>            输入列名称到首行（和–file一起使用）<br><strong>–no-check-charset</strong>  不指定字符集<br><strong>–check-columns</strong>    检验dest和source的表结构是否一致，不一致自动拒绝执行（不加这个参数也行。默认就是执行检查的）<br><strong>–no-check-columns</strong>    不检验dest和source的表结构是否一致，不一致也执行（会导致dest上的无法与source匹配的列值被置为null或者0）<br><strong>–chekc-interval</strong>      默认1s检查一次<br><strong>–local</strong>            不把optimize或analyze操作写入到binlog里面（防止造成主从延迟巨大）<br><strong>–retries</strong>         超时或者出现死锁的话，pt-archiver进行重试的间隔（默认1s）<br><strong>–no-version-check</strong>   目前为止，发现部分pt工具对阿里云RDS操作必须加这个参数<br><strong>–analyze=ds</strong>      操作结束后，优化表空间（d表示dest，s表示source）<br> 默认情况下，pt-archiver操作结束后，不会对source、dest表执行analyze或optimize操作，因为这种操作费时间，并且需要你提前预估有足够的磁盘空间用于拷贝表。一般建议也是pt-archiver操作结束后，在业务低谷手动执行analyze table用以回收表空间。</p>\n</blockquote>\n","categories":["数据库"],"tags":["mysql"]},{"title":"使用Let's encrypt和nginx配置https访问","url":"https://pkaq.org/2018/12/01/https/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书 ， 虽然Let’s Encrypt’s证书有效期只有90天，不过你可以通过配置一个简单的定时任务来免费更新你的证书。</p>\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>CentOS Linux 7 (Core) x86_64 </li>\n<li>nginx 1.12.2</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><h2><span id=\"nginx-pei-zhi\">nginx配置</span><a href=\"#nginx-pei-zhi\" class=\"header-anchor\">#</a></h2><p>　　首先要配置<code>nginx</code>的<code>server</code>节点，用以<code>lets&#39;s encrypt </code>进行域名验证。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tserver_name yourdomain.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成后，<code>reload</code>一下<code>nginx</code>配置</p>\n<h2><span id=\"zheng-shu-huo-qu\">证书获取</span><a href=\"#zheng-shu-huo-qu\" class=\"header-anchor\">#</a></h2><h3><span id=\"an-zhuang-certbot\">安装Certbot</span><a href=\"#an-zhuang-certbot\" class=\"header-anchor\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto </span><br><span class=\"line\">chmod a+x ./certbot-auto </span><br></pre></td></tr></table></figure>\n<h3><span id=\"zheng-shu-shen-qing\">证书申请</span><a href=\"#zheng-shu-shen-qing\" class=\"header-anchor\">#</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto -d yourdomain.com</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 -d 参数来指定你的域名</p>\n<p>申请时根据提示输入你的<code>Email</code>并且同意协议等。完成后会自动配置<code>nginx</code></p>\n<p>注意: <code>https</code>走的是443端口，记得防火墙放开443端口的访问</p>\n</blockquote>\n<h2><span id=\"zi-dong-geng-xin\">自动更新</span><a href=\"#zi-dong-geng-xin\" class=\"header-anchor\">#</a></h2><p>　　使用<code>crontab -e</code>创建定时任务，来定时更新你的证书文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 15 1-12/2 * /path/of/your/certbot-auto renew --quiet</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"zheng-shu-guan-li\">证书管理</span><a href=\"#zheng-shu-guan-li\" class=\"header-anchor\">#</a></h2><p>　　可以通过以下几个命令参数来管理你的证书</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>certificates    显示证书信息</span><br><span class=\"line\"><span class=\"bullet\">- </span>revoke          撤销证书（提供证书路径 --cert-path）</span><br><span class=\"line\"><span class=\"bullet\">- </span>delete          删除证书</span><br></pre></td></tr></table></figure>\n","categories":["Http"],"tags":["nginx","https"]},{"title":"使用Syncthing自建网盘","url":"https://pkaq.org/2018/12/01/syncthing/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　<code>Syncthing</code>是一个开源免费的文件夹/文件同步神器，支持<code>Android</code>、<code>Linux</code>、<code>Windows</code>、<code>Mac OS X</code>等系统，可以使我们任意台任何系统任何设备之间，实现文件实时同步。所有通信都使用<code>TLS</code>进行保护。所使用的加密包括完美的前向保密，以防止窃听者获得对您的数据的访问权限。很适合用来搭建私有同步网盘。 </p>\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>Centos OS7 + Win10 x64</li>\n<li>Syncthing v0.14.52</li>\n<li>Docker version 1.13.1</li>\n</ul>\n<p>#步骤</p>\n<h2><span id=\"la-qu-jing-xiang\">拉取镜像</span><a href=\"#la-qu-jing-xiang\" class=\"header-anchor\">#</a></h2><p>　　使用<code>docker pull syncthing/syncthing</code>拉取最新镜像。</p>\n<h2><span id=\"chuang-jian-rong-qi\">创建容器</span><a href=\"#chuang-jian-rong-qi\" class=\"header-anchor\">#</a></h2><p>　　使用如下命令创建容器, 这里需要注意 外挂的目录需要执行<code>chown -R 1000:1000 dir</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create --name syncthing -p 8384:8384 -p 22000:22000 -p 21027:21027/udp -v /opt/data/docker/syncthing/st-cfg:/var/syncthing/config -v /opt/data/docker/syncthing/st-sync:/var/syncthing docker.io/syncthing/syncthing:latest </span><br></pre></td></tr></table></figure>\n<p>　　参数说明：</p>\n<ul>\n<li> –name： 容器别名</li>\n<li>-p： 映射主机端口</li>\n<li>-v： 映射主机目录</li>\n</ul>\n<p>　　容器创建完成后，使用<code>docker start syncthing</code>即可启动容器，这里需要注意的是，需要放开防火墙对8384端口的访问。</p>\n<p>　　启动完成后，访问<code>http://ip:8384</code>即可。</p>\n<h2><span id=\"an-quan-fang-wen\">安全访问</span><a href=\"#an-quan-fang-wen\" class=\"header-anchor\">#</a></h2><p>　　访问到webui界面后，依次点击<code>操作-&gt;设置-&gt;图形用户界面</code>，设置用户名/密码。\n　　</p>\n<h2><span id=\"wen-jian-tong-bu\">文件同步</span><a href=\"#wen-jian-tong-bu\" class=\"header-anchor\">#</a></h2><p>　　在你的<code>Windows</code>机器下载相应的客户端，启动后点击<code>添加远程设备</code>，此时会要求你输入远程设备的ID，打开你的远程界面，点击<code>操作-&gt;显示ID</code>将相应设备ID复制后填入即可。</p>\n<p>　　界面左侧可以点击<code>添加文件夹</code>添加需要同步的文件夹，默认会一小时扫描一次磁盘更改，可以点击<code>选项</code>重新设置扫描间隔，需要注意的是，这里的间隔单位是<code>秒</code>。设置完成后便会开始同步啦。</p>\n","categories":["The Others"],"tags":["Syncthing"]},{"title":"使用 Docker 发布 Spring Boot 应用","url":"https://pkaq.org/2018/09/16/sbwithdocker/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　一个 <code>Spring Boot</code>  应用在编写完成后，可以方便的打包成一个 <code>jar</code> 文件直接运行。通常的做法是使用 <code>nohup java -jar app.jar &amp;</code> 的方式使其在服务器后台运行。 这种方式对服务器环境不仅有着很强的依赖并且会产生一个随时间推移越来越大的 <code>nohup</code> 文件 ，虽然可以利用管道黑洞将其输出到未知领域，但是对于运行版本的管理仍然依赖于人肉备份的方式。</p>\n<p>　　借助 <code>Docker</code>  不仅可以做到运行环境与服务器环境的隔离，同时可以方便的管理发布版本。通过版本 <code>tag</code>  不仅可以方便的回滚到相应版本，使用端口映射也可以方便的配合蓝绿发布。</p>\n<a id=\"more\"></a>\n\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>Spring Boot： 2.0.5 Release</li>\n<li>Docker：</li>\n<li>Centos: 7.3</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><h2><span id=\"1-bian-xie-jiao-ben\">1.编写脚本</span><a href=\"#1-bian-xie-jiao-ben\" class=\"header-anchor\">#</a></h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于哪个镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> daocloud.io/java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> PKAQ <span class=\"comment\">#pkaq@msn.com</span></span><br><span class=\"line\"><span class=\"comment\"># 在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录。</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"comment\"># 将打包好的spring程序拷贝到容器中的指定位置</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./build/lib/app.jar /opt/app.jar</span></span><br><span class=\"line\"><span class=\"comment\">#容器对外暴露9006</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9006</span></span><br><span class=\"line\"><span class=\"comment\"># 容器启动后执行的命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/opt/app.jar&quot;</span>]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"2-gou-jian-jing-xiang\">2.构建镜像</span><a href=\"#2-gou-jian-jing-xiang\" class=\"header-anchor\">#</a></h2><p>　    在 <code>Dockerfile</code> 所在目录，使用 <code>docker build -t MyApp:1.0 .</code>  这句话的意思是从当前目录的 <code>Dockerfile</code> 文件构建一个名为 <code>MyApp</code> ，版本为 <code>1.0</code>  的镜像。</p>\n<h2><span id=\"3-yun-xing-rong-qi\">3.运行容器</span><a href=\"#3-yun-xing-rong-qi\" class=\"header-anchor\">#</a></h2><p>　　使用 <code>docker run -d -e &quot;SPRING_PROFILES_ACTIVE=dev&quot; -p 9006:9006 --name Myapp1.0 Myapp:1.0</code></p>\n<p>　　上面操作的意思是 </p>\n<ul>\n<li><p><code>-d</code> : 以守护进程运行一个容器</p>\n</li>\n<li><p><code>-e</code> : 为容器传递一个环境变量</p>\n</li>\n<li><p><code>-p</code>：映射容器端口 9006 到宿主机的 9006</p>\n</li>\n<li><p><code>--name</code>：指定容器的别名</p>\n</li>\n</ul>\n<p>　　下面是针对容器操作的几个常用命令：   </p>\n<ul>\n<li><p>启动容器：<code>docker start Myapp1.0 </code></p>\n</li>\n<li><p>停止容器：<code>docker stop Myapp1.0 </code></p>\n</li>\n<li><p>删除容器：<code>docker rm Myapp1.0 </code></p>\n</li>\n</ul>\n<h2><span id=\"4-ying-yong-sheng-ji\">4.应用升级</span><a href=\"#4-ying-yong-sheng-ji\" class=\"header-anchor\">#</a></h2><p>　　要升级应用版本时，需要重复步骤 2-3 构建新的 <code>Dockerfile</code> 镜像。需要注意的是不要忘记修改构建时的版本号，此时可以通过 <code>-p</code> 参数在与上一个版本不同的端口上启动一个新的容器。配合 <code>LB</code> 工具（如 <code>nginx</code>）切换到新的容器上实现蓝绿部署。</p>\n<p>　　如果发布出现问题，如果应用了蓝绿部署只需要切换回原来运行端口即可。若未使用蓝绿部署的方式，那么也只需要 <code>stop</code> 有问题的版本，重新 <code>start</code> 即可。</p>\n<h2><span id=\"5-shi-yong-gradle-cha-jian\">5.使用 Gradle 插件</span><a href=\"#5-shi-yong-gradle-cha-jian\" class=\"header-anchor\">#</a></h2><p>　　如果你是用 <code>Gradle</code> 来进行应用构建的，那么可以使用 <a href=\"https://github.com/palantir/gradle-docker\">Gradle-Docker</a>  插件进行镜像创建操作。</p>\n<p>1.引入插件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  id <span class=\"string\">&quot;com.palantir.docker&quot;</span> version <span class=\"string\">&quot;0.20.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.编写 <code>Dockerfile</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于哪个镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> daocloud.io/java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> PKAQ <span class=\"comment\">#pkaq@msn.com</span></span><br><span class=\"line\"><span class=\"comment\"># 在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录。</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"comment\">#将打包好的spring程序拷贝到容器中的指定位置</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> JAR_FILE</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> <span class=\"variable\">$&#123;JAR_FILE&#125;</span> /opt/app.jar</span></span><br><span class=\"line\"><span class=\"comment\">#容器对外暴露9006</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9006</span></span><br><span class=\"line\"><span class=\"comment\"># 容器启动后执行的命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/opt/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>3.应用插件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker &#123;</span><br><span class=\"line\">    dependsOn build</span><br><span class=\"line\">    name <span class=\"string\">&quot;$&#123;project.group&#125;/$&#123;bootJar.baseName&#125;&quot;</span></span><br><span class=\"line\">    files bootJar.archivePath</span><br><span class=\"line\">    buildArgs([<span class=\"string\">&#x27;JAR_FILE&#x27;</span>: <span class=\"string\">&quot;$&#123;bootJar.archiveName&#125;&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Spring Boot"],"tags":["Java","Gradle","Spring Boot","Spring"]},{"title":"使用Flyway管理你的Spring boot数据库版本","url":"https://pkaq.org/2018/09/11/flyway/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　<code>Flyway</code>是一款开源的数据库版本管理工具，它更倾向于规约优于配置的方式。Flyway可以独立于应用实现管理并跟踪数据库变更，支持数据库版本自动升级，并且有一套默认的规约，不需要复杂的配置，Migrations可以写成SQL脚本，也可以写在Java代码中，不仅支持Command Line和Java API，还支持Build构建工具和Spring Boot等，同时在分布式环境下能够安全可靠地升级数据库，同时也支持失败恢复等。</p>\n<p>　　通常在项目上线后，由于需求的不断改进或功能的完善需要对个别字段进行调整或新增。如果采用传统方式直接修改开发和生产数据库但凡涉及人为操作总无法避免出错的可能。一种方法是避免直接修改数据库，所有数据库修改通过PDM去操作。当然毕竟PDM是花钱的，通过采用<code>Flyway</code>编写变更脚本的方式，可以使应用在启动时检查数据库变更并进行自动同步。</p>\n<a id=\"more\"></a>\n\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>Flyway: 5.1.4</li>\n<li>Gradle: 4.10</li>\n<li>Spring Boot: 2.0.4</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><p>　　Flyway对数据库进行版本管理主要由Metadata表和6种命令完成，Metadata主要用于记录元数据，在Flyway首次启动时会创建默认名为<code>flyway_schema_history</code>的元数据表，该表用于记录版本变更日志、Checksum等信息。</p>\n<p>　　Flyway脚本的命名规则如下：</p>\n<p><img src=\"sql_migration_naming.png\" alt=\"flyway\"></p>\n<ul>\n<li>prefix: 可配置，前缀标识，默认值<code>V</code>表示Versioned，<code>R</code>表示Repeatable</li>\n<li>version: 标识版本号，由一个或多个数字构成，数字之间的分隔符可用点<code>.</code>或下划线<code>_</code></li>\n<li>separator: 可配置，用于分隔版本标识与描述信息，默认为两个下划线<code>__</code></li>\n<li>description: 描述信息，文字之间可以用下划线或空格分隔</li>\n<li>suffix: 可配置，后续标识，默认为<code>.sql</code></li>\n</ul>\n<p>　　要实现在<code>Spring boot</code>中使用<code>Flyway</code>进行版本管理需要做到如下步骤：</p>\n<pre><code> 1. 添加依赖  \n 2. 来点配置\n 3. 编写脚本</code></pre>\n<p>　　这里示例以一个存在若干张表的数据库为例，为该库添加一张新的<code>test_alpha</code>表，然后追加一列<code>bravo</code>。   </p>\n<p>1.添加依赖   </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">compile</span> &quot;<span class=\"selector-tag\">org</span><span class=\"selector-class\">.flywaydb</span><span class=\"selector-pseudo\">:flyway-core</span><span class=\"selector-pseudo\">:5.1.4&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.来点配置 <code>application.yaml</code>   </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flyway配置 对于非空数据库 需要开启此项避免报错</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">flyway:</span></span><br><span class=\"line\">  <span class=\"attr\">baseline-on-migrate:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>3.准备脚本   </p>\n<p>　　依据上文描述的命名规则，在<code>src\\main\\resources\\db\\migration</code>下添加你的数据库变更脚本，这里需要注意的是，由于我们是在非空数据库进行操作，所以这里的版本号是从<code>v2</code>开始。</p>\n<p><code>V2__Add_new_table.sql</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> flyway_test_alpha;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `flyway_test_alpha`  (</span><br><span class=\"line\">\t`id`          \t<span class=\"type\">int</span>(<span class=\"number\">11</span>) AUTO_INCREMENT <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`column_alpha`\t<span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">PRIMARY</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>V3__Add_column.sql</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `flyway_test_alpha`</span><br><span class=\"line\">\t<span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> `column_bravo` <span class=\"type\">varchar</span>(<span class=\"number\">25</span>) <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure>\n<p>　　</p>\n<p>现在启动你的应用，你会发现这两项操作会隐士完成了，实在是非常省心。</p>\n<p>附录: Flyway配置详解</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">flyway.baseline-description</span>= <span class=\"string\"># 执行基线时标记已有Schema的描述</span></span><br><span class=\"line\"><span class=\"meta\">flyway.baseline-version</span>=<span class=\"string\">1 # 基线版本默认开始序号 默认为 1. </span></span><br><span class=\"line\"><span class=\"meta\">flyway.baseline-on-migrate</span>=<span class=\"string\">false # 针对非空数据库是否默认调用基线版本 ， 这也是我们上面版本号从 2 开始的原因</span></span><br><span class=\"line\"><span class=\"meta\">flyway.check-location</span>=<span class=\"string\">false # 是否开启脚本检查 检查脚本是否存在 默认false</span></span><br><span class=\"line\"><span class=\"meta\">flyway.clean-on-validation-error</span>=<span class=\"string\">false # 验证错误时 是否自动清除数据库 高危操作！！！</span></span><br><span class=\"line\"><span class=\"meta\">flyway.enabled</span>=<span class=\"string\">true # 是否启用 flyway.</span></span><br><span class=\"line\"><span class=\"meta\">flyway.encoding</span>=<span class=\"string\">UTF-8 # 脚本编码.</span></span><br><span class=\"line\"><span class=\"meta\">flyway.ignore-failed-future-migration</span>=<span class=\"string\">true # 在读元数据表时，是否忽略失败的后续迁移.</span></span><br><span class=\"line\"><span class=\"meta\">flyway.init-sqls</span>= <span class=\"string\"># S获取连接后立即执行初始化的SQL语句</span></span><br><span class=\"line\"><span class=\"meta\">flyway.locations</span>=<span class=\"string\">classpath:db/migration # 脚本位置， 默认为classpath: db/migration.</span></span><br><span class=\"line\"><span class=\"meta\">flyway.out-of-order</span>=<span class=\"string\">false # 是否允许乱序（out of order）迁移</span></span><br><span class=\"line\"><span class=\"meta\">flyway.placeholder-prefix</span>= <span class=\"string\"># 设置每个占位符的前缀。 默认值： $&#123; 。 </span></span><br><span class=\"line\"><span class=\"meta\">flyway.placeholder-replacement</span>=<span class=\"string\">true # 是否要替换占位符。 默认值： true 。 </span></span><br><span class=\"line\"><span class=\"meta\">flyway.placeholder-suffix</span>=<span class=\"string\">&#125; # 设置占位符的后缀。 默认值： &#125; 。 </span></span><br><span class=\"line\"><span class=\"meta\">flyway.placeholders.*</span>= <span class=\"string\"># 设置占位符的值。</span></span><br><span class=\"line\"><span class=\"meta\">flyway.schemas</span>= <span class=\"string\"># Flyway管理的Schema列表，区分大小写。默认连接对应的默认Schema。</span></span><br><span class=\"line\"><span class=\"meta\">flyway.sql-migration-prefix</span>=<span class=\"string\">V # 迁移脚本的文件名前缀。 默认值： V 。 </span></span><br><span class=\"line\"><span class=\"meta\">flyway.sql-migration-separator</span>=<span class=\"string\">__ # 迁移脚本的分割符 默认双下划线</span></span><br><span class=\"line\"><span class=\"meta\">flyway.sql-migration-suffix</span>=<span class=\"string\">.sql # 迁移脚本的后缀 默认 .sql</span></span><br><span class=\"line\"><span class=\"meta\">flyway.table</span>=<span class=\"string\">schema_version # Flyway使用的Schema元数据表名称 默认schema_version</span></span><br><span class=\"line\"><span class=\"meta\">flyway.url</span>= <span class=\"string\"># 待迁移的数据库的JDBC URL。如果没有设置，就使用配置的主数据源。</span></span><br><span class=\"line\"><span class=\"meta\">flyway.user</span>= <span class=\"string\"># 待迁移数据库的登录用户。</span></span><br><span class=\"line\"><span class=\"meta\">flyway.password</span>= <span class=\"string\"># 待迁移数据库的登录用户密码。</span></span><br><span class=\"line\"><span class=\"meta\">flyway.validate-on-migrate</span>=<span class=\"string\">true # 在运行迁移时是否要自动验证。 默认值： true 。 </span></span><br></pre></td></tr></table></figure>\n\n\n","categories":["Spring Boot"],"tags":["Java","Gradle","Spring Boot","Spring"]},{"title":"使用P6Spy监控你的Spring boot数据库操作","url":"https://pkaq.org/2018/09/10/p6spy/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　最近换了号称最快的<code>HikariDataSource</code>，由于没有了<code>SQL</code>监控，加之于<code>Mybaits</code>默认输出日志之拙计。遂用此物，与之相仿还有<code>log4jdbc</code>，比较活跃度后选择了<code>P6Spy</code>。</p>\n<a id=\"more\"></a>\n\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>P6Sspy: 3.7</li>\n<li>Gradle: 4.10</li>\n<li>Spring Boot: 2.0.4</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><p>　　具体步骤比较简单，这里说下简单原理。<code>P6Spy</code>通过劫持<code>JDBC</code>驱动，在调用实际<code>JDBC</code>驱动前拦截调用的目标语，达到<code>SQL</code>语句日志记录的目的。</p>\n<p>　　它包括<code>P6Log</code>和<code>P6Outage</code>两个模块。</p>\n<ul>\n<li>P6Log 用来拦截和记录任务应用程序的 JDBC 语句</li>\n<li>P6Outage 专门用来检测和记录超过配置条件里时间的 SQL 语句</li>\n</ul>\n<p>　　应用<code>P6Spy</code>只需要</p>\n<ul>\n<li>1.替换你的<code>JDBC Driver</code>为<code>com.p6spy.engine.spy.P6SpyDriver</code></li>\n<li>2.修改<code>JDBC Url</code>为<code>jdbc:p6spy:xxxx</code></li>\n<li>3.配置<code>spy.properties</code></li>\n</ul>\n<p>1.修改<code>application.yml</code>文件,替换<code>jdbc driver</code>和<code>url</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 数据源</span><br><span class=\"line\"><span class=\"selector-tag\">spring</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">datasource</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">type</span>: <span class=\"selector-tag\">com</span><span class=\"selector-class\">.zaxxer</span><span class=\"selector-class\">.hikari</span><span class=\"selector-class\">.HikariDataSource</span></span><br><span class=\"line\">    <span class=\"selector-tag\">url</span>: <span class=\"selector-tag\">jdbc</span><span class=\"selector-pseudo\">:p6spy</span><span class=\"selector-pseudo\">:mysql</span>://...</span><br><span class=\"line\">    <span class=\"selector-tag\">username</span>: ...</span><br><span class=\"line\">    <span class=\"selector-tag\">password</span>: ...</span><br><span class=\"line\">    <span class=\"selector-tag\">driver-class-name</span>: <span class=\"selector-tag\">com</span><span class=\"selector-class\">.p6spy</span><span class=\"selector-class\">.engine</span><span class=\"selector-class\">.spy</span><span class=\"selector-class\">.P6SpyDriver</span></span><br></pre></td></tr></table></figure>\n\n\n<p>2.配置<code>spy.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">module.log</span>=<span class=\"string\">com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义日志打印</span></span><br><span class=\"line\"><span class=\"attr\">logMessageFormat</span>=<span class=\"string\">org.pkaq.core.log.P6SpyLogger</span></span><br><span class=\"line\"><span class=\"comment\"># 使用日志系统记录sql</span></span><br><span class=\"line\"><span class=\"attr\">appender</span>=<span class=\"string\">com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class=\"line\"><span class=\"comment\">## 配置记录Log例外</span></span><br><span class=\"line\"><span class=\"attr\">excludecategories</span>=<span class=\"string\">info,debug,result,batc,resultset</span></span><br><span class=\"line\"><span class=\"comment\"># 设置使用p6spy driver来做代理</span></span><br><span class=\"line\"><span class=\"attr\">deregisterdrivers</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 日期格式</span></span><br><span class=\"line\"><span class=\"attr\">dateformat</span>=<span class=\"string\">yyyy-MM-dd HH:mm:ss</span></span><br><span class=\"line\"><span class=\"comment\"># 实际驱动 </span></span><br><span class=\"line\"><span class=\"attr\">driverlist</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启慢SQL记录</span></span><br><span class=\"line\"><span class=\"attr\">outagedetection</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 慢SQL记录标准 秒</span></span><br><span class=\"line\"><span class=\"attr\">outagedetectioninterval</span>=<span class=\"string\">2</span></span><br></pre></td></tr></table></figure>\n<p>3.自定义日志打印 , 实现<code>MessageFormattingStrategy</code>接口即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">P6SpyLogger</span> <span class=\"keyword\">implements</span> <span class=\"title\">MessageFormattingStrategy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">formatMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> connectionId, String now, <span class=\"keyword\">long</span> elapsed, String category, String prepared, String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"string\">&quot;&quot;</span>.equals(sql.trim()) ? <span class=\"string\">&quot;[ &quot;</span> + LocalDateTime.now() + <span class=\"string\">&quot; ] --- | took &quot;</span></span><br><span class=\"line\">                + elapsed + <span class=\"string\">&quot;ms | &quot;</span> + category + <span class=\"string\">&quot; | connection &quot;</span> + connectionId + <span class=\"string\">&quot;\\n &quot;</span></span><br><span class=\"line\">                + sql + <span class=\"string\">&quot;;&quot;</span> : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>附录: <code>spy.properties</code>详细说明</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定应用的日志拦截模块,默认为com.p6spy.engine.spy.P6SpyFactory </span></span><br><span class=\"line\"><span class=\"comment\">#modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 真实JDBC driver , 多个以 逗号 分割 默认为空</span></span><br><span class=\"line\"><span class=\"comment\">#driverlist=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否自动刷新 默认 flase</span></span><br><span class=\"line\"><span class=\"comment\">#autoflush=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置SimpleDateFormat日期格式 默认为空</span></span><br><span class=\"line\"><span class=\"comment\">#dateformat=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印堆栈跟踪信息 默认flase</span></span><br><span class=\"line\"><span class=\"comment\">#stacktrace=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果 stacktrace=true，则可以指定具体的类名来进行过滤。</span></span><br><span class=\"line\"><span class=\"comment\">#stacktraceclass=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监测属性配置文件是否进行重新加载</span></span><br><span class=\"line\"><span class=\"comment\">#reloadproperties=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 属性配置文件重新加载的时间间隔，单位:秒 默认60s</span></span><br><span class=\"line\"><span class=\"comment\">#reloadpropertiesinterval=60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 Log 的 appender，取值：</span></span><br><span class=\"line\"><span class=\"comment\">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class=\"line\"><span class=\"comment\">#appender=com.p6spy.engine.spy.appender.StdoutLogger</span></span><br><span class=\"line\"><span class=\"comment\">#appender=com.p6spy.engine.spy.appender.FileLogger</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 Log 的文件名 默认 spy.log</span></span><br><span class=\"line\"><span class=\"comment\">#logfile=spy.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定是否每次是增加 Log，设置为 false 则每次都会先进行清空 默认true</span></span><br><span class=\"line\"><span class=\"comment\">#append=true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志输出样式  默认为com.p6spy.engine.spy.appender.SingleLineFormat , 单行输出 不格式化语句</span></span><br><span class=\"line\"><span class=\"comment\">#logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以采用  com.p6spy.engine.spy.appender.CustomLineFormat 来自定义输出样式, 默认值是%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)</span></span><br><span class=\"line\"><span class=\"comment\"># 可用的变量为:</span></span><br><span class=\"line\"><span class=\"comment\">#   %(connectionId)            connection id</span></span><br><span class=\"line\"><span class=\"comment\">#   %(currentTime)             当前时间</span></span><br><span class=\"line\"><span class=\"comment\">#   %(executionTime)           执行耗时</span></span><br><span class=\"line\"><span class=\"comment\">#   %(category)                执行分组</span></span><br><span class=\"line\"><span class=\"comment\">#   %(effectiveSql)            提交的SQL 换行</span></span><br><span class=\"line\"><span class=\"comment\">#   %(effectiveSqlSingleLine)  提交的SQL 不换行显示</span></span><br><span class=\"line\"><span class=\"comment\">#   %(sql)                     执行的真实SQL语句，已替换占位</span></span><br><span class=\"line\"><span class=\"comment\">#   %(sqlSingleLine)           执行的真实SQL语句，已替换占位 不换行显示</span></span><br><span class=\"line\"><span class=\"comment\">#customLogMessageFormat=%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># date类型字段记录日志时使用的日期格式 默认dd-MMM-yy</span></span><br><span class=\"line\"><span class=\"comment\">#databaseDialectDateFormat=dd-MMM-yy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># boolean类型字段记录日志时使用的日期格式 默认boolean 可选值numeric</span></span><br><span class=\"line\"><span class=\"comment\">#databaseDialectBooleanFormat=boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否通过jmx暴露属性 默认true</span></span><br><span class=\"line\"><span class=\"comment\">#jmx=true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果jmx设置为true 指定通过jmx暴露属性时的前缀 默认为空</span></span><br><span class=\"line\"><span class=\"comment\"># com.p6spy(.&lt;jmxPrefix&gt;)?:name=&lt;optionsClassName&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#jmxPrefix=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否显示纳秒 默认false</span></span><br><span class=\"line\"><span class=\"comment\">#useNanoTime=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际数据源 JNDI</span></span><br><span class=\"line\"><span class=\"comment\">#realdatasource=/RealMySqlDS</span></span><br><span class=\"line\"><span class=\"comment\"># 实际数据源 datasource class</span></span><br><span class=\"line\"><span class=\"comment\">#realdatasourceclass=com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际数据源所携带的配置参数 以 k=v 方式指定 以 分号 分割</span></span><br><span class=\"line\"><span class=\"comment\">#realdatasourceproperties=port;3306,serverName;myhost,databaseName;jbossdb,foo;bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># jndi数据源配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 设置 JNDI 数据源的 NamingContextFactory。 </span></span><br><span class=\"line\"><span class=\"comment\">#jndicontextfactory=org.jnp.interfaces.NamingContextFactory</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 JNDI 数据源的提供者的 URL。 </span></span><br><span class=\"line\"><span class=\"comment\">#jndicontextproviderurl=localhost:1099</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 JNDI 数据源的一些定制信息，以分号分隔。 </span></span><br><span class=\"line\"><span class=\"comment\">#jndicontextcustom=java.naming.factory.url.pkgs;org.jboss.naming:org.jnp.interfaces</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否开启日志过滤 默认false， 这项配置是否生效前提是配置了 include/exclude/sqlexpression</span></span><br><span class=\"line\"><span class=\"comment\">#filter=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤 Log 时所包含的表名列表，以逗号分隔 默认为空</span></span><br><span class=\"line\"><span class=\"comment\">#include=</span></span><br><span class=\"line\"><span class=\"comment\"># 过滤 Log 时所排除的表名列表，以逗号分隔 默认为空</span></span><br><span class=\"line\"><span class=\"comment\">#exclude=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤 Log 时的 SQL 正则表达式名称  默认为空</span></span><br><span class=\"line\"><span class=\"comment\">#sqlexpression=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#显示指定过滤 Log 时排队的分类列表，取值: error, info, batch, debug, statement,</span></span><br><span class=\"line\"><span class=\"comment\">#commit, rollback, result and resultset are valid values</span></span><br><span class=\"line\"><span class=\"comment\"># (默认 info,debug,result,resultset,batch)</span></span><br><span class=\"line\"><span class=\"comment\">#excludecategories=info,debug,result,resultset,batch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否过滤二进制字段</span></span><br><span class=\"line\"><span class=\"comment\"># (default is false)</span></span><br><span class=\"line\"><span class=\"comment\">#excludebinary=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># P6Log 模块执行时间设置，整数值 (以毫秒为单位)，只有当超过这个时间才进行记录 Log。 默认为0</span></span><br><span class=\"line\"><span class=\"comment\">#executionThreshold=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># P6Outage 模块是否记录较长时间运行的语句 默认false</span></span><br><span class=\"line\"><span class=\"comment\"># outagedetection=true|false</span></span><br><span class=\"line\"><span class=\"comment\"># P6Outage 模块执行时间设置，整数值 （以秒为单位)），只有当超过这个时间才进行记录 Log。 默认30s</span></span><br><span class=\"line\"><span class=\"comment\"># outagedetectioninterval=integer time (seconds)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":["Spring Boot"],"tags":["Java","Gradle","Spring Boot","Spring"]},{"title":"使用Jasypt加密你的Spring Boot配置文件","url":"https://pkaq.org/2018/09/06/jasypt/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　<a href=\"http://jasypt.org/\">Jasypt</a> 是一个Java库，允许开发人员以很简单的方式添加基本加密功能，而无需深入研究加密原理。利用它可以实现高安全性的，基于标准的加密技术，无论是单向和双向加密。加密密码，文本，数字，二进制文件。并且可集成到Spring应用程序中，与Spring Security集成，加密的应用程序（即数据源）的配置等信息。</p>\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>jasypt-spring-boot-starter ： 2.1.0</li>\n<li>Spring Boot : 2.0.4</li>\n<li>JDK 1.9</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><p>　　借助<code>jasypt-spring-boot-starter</code>给<code>Spring boot</code>应用配置加密非常简单。   </p>\n<ol>\n<li>引入依赖<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;com.github.ulisesbocchio:jasypt-spring-boot-starter:$&#123;jasypt&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>配置密码<br>　　在<code>application.yml</code>中配置加密需要使用的密钥。<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">\t<span class=\"attr\">encryptor:</span></span><br><span class=\"line\">  \t<span class=\"attr\">password:</span> <span class=\"string\">eva</span></span><br></pre></td></tr></table></figure></li>\n<li>加密内容<br>　　编写一个单元测试加密你需要加密的内容。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">StringEncryptor stringEncryptor;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;PWD: &quot;</span> + stringEncryptor.encrypt(<span class=\"string\">&quot;yourpassword&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改配置文件,使用<code>ENC</code>包裹加密得到的密文即可。<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/jxc?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">ENC(dghf0DZZJA+vQ95xgHz5iA==)</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">ENC(TNbKfi0lHjpfPcdepEnR5oKHikoDfVr+/amPonxytqK5u+B8Pid7k4hmlGUOhv+6QxEuB3gjJPPn7L8ishuFYym/Gr59qRO6Uf5/XiyT+3FUTujtyybxUjTyo4CO1wKe+zubp27QVYM=)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<blockquote>\n<p>参考: <a href=\"https://github.com/ulisesbocchio/jasypt-spring-boot\">https://github.com/ulisesbocchio/jasypt-spring-boot</a></p>\n</blockquote>\n","categories":["Spring Boot"],"tags":["Java","Gradle","Spring Boot","Spring"]},{"title":"Gradle中的任务","url":"https://pkaq.org/2018/08/12/gradletask/","content":"<p><code>Project</code>和<code>Task</code>是<code>Gradle</code>中最核心的两个元素，当创建了一个<code>build.gradle</code>脚本那么<code>Gradle</code>便会依据脚本的配置创建一个<code>Project</code>,而脚本中的<code>Task</code>也会创建与之相对应<code>DeafultTask</code>实现。</p>\n<p>　　<code>Gradle</code>通过一个个<code>Task</code>来完成具体的构建任务 ,可以说<code>Task</code>乃是<code>Gradle</code>的核心。根据执行阶段的不同，可以将<code>Gradle</code>中<code>Task</code>分为<code>配置型Task</code>以及<code>动作型Task</code>。</p>\n<h2><span id=\"yi-task-de-ji-ben-zu-cheng\">一、Task的基本组成</span><a href=\"#yi-task-de-ji-ben-zu-cheng\" class=\"header-anchor\">#</a></h2><p>　　查看<code>Task DSL</code>说明我们可以发现，通常一个<code>Task</code>包括: 依赖、动作、属性、输入、输出、终结器等构成。</p>\n<p>当然这些并不是每一个都是必须的。创建任务的时候需要根据自己的具体需要进行选择性配置。</p>\n<a id=\"more\"></a>\n\n<h2><span id=\"er-ding-yi-task\">二、定义Task</span><a href=\"#er-ding-yi-task\" class=\"header-anchor\">#</a></h2><p>　　<code>Gralde</code>中定义一个任务的方式十分灵活，下面都是定义一个任务的方式。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task myTask</span><br><span class=\"line\">task myTask &#123; configure closure &#125;</span><br><span class=\"line\">task myTask(<span class=\"attr\">type:</span> SomeType)</span><br><span class=\"line\">task myTask(<span class=\"attr\">type:</span> SomeType) &#123; configure closure &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"pei-zhi-xing-task\">配置型Task</span><a href=\"#pei-zhi-xing-task\" class=\"header-anchor\">#</a></h3><p>　　定义一个<code>Task</code>十分简单，只需要使用<code>task name&#123;&#125;</code>即可定义一个简单的任务。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task helloTask &#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　执行<code>gradle hT</code>，可以观察到执行结果。这里你可能会注意到<code>Hello world</code>并非在执行阶段开始执行的,而是在配置阶段就已经打印了。没错，这就是一个<code>配置型Task</code>，因为Gradle在任务执行前，总会去遍历所有任务去生成一张<code>DAG(有向无环图)</code>来确定任务之间的关系。</p>\n<h3><span id=\"dong-zuo-xing-task\">动作型Task</span><a href=\"#dong-zuo-xing-task\" class=\"header-anchor\">#</a></h3><p>　　如果不想让任务在配置阶段执行，那么可以参照如下方式，通过给任务添加action的方式使其在执行阶段运行。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task helloTask &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用的action有两个，<code>doFirst</code>和<code>doLast</code>，通过这两个见名知意的<code>action</code>可以用来定置化你的任务行为。</p>\n<ul>\n<li>一个Task包含若干<code>Action</code>。所以，Task有<code>doFirst</code>和<code>doLast</code>两个函数，用于添加需要最先执行的<code>Action</code>和需要和需要最后执行的<code>Action</code>。<code>Action</code>就是一个闭包。</li>\n<li> Task创建的时候可以指定Type，通过<em>type:名字</em>表达。这是什么意思呢？其实就是告诉<code>Gradle</code>，这个新建的Task对象会从哪个基类Task派生。比如，Gradle本身提供了一些通用的Task，最常见的有Copy 任务。Copy是Gradle中的一个类。当我们：<code>*task myTask(type:Copy)*</code>的时候，创建的Task就是一个Copy Task。</li>\n<li>当我们使用 <code>task myTask&#123; xxx&#125;</code>的时候。花括号是一个<code>closure</code>。这会导致gradle在创建这个Task之后，返回给用户之前，会先执行closure的内容。</li>\n</ul>\n<p>当用户执行test任务时，执行以下步骤：  </p>\n<ol>\n<li>执行build.gradle，初始化任务，初始化步骤为2-7; </li>\n<li>注册test任务，任务体都是默认好的，不可更改，为打印冒号加任务名，所以test的任务体为<code>println &#39;:test&#39;</code>；  </li>\n<li>每个任务都有一个队列一个栈，一个是依赖队列，一个是first栈，一个是last队列；  </li>\n<li>遇到doFirst函数，该函数接受一个闭包作为参数，doFirst函数会把闭包参数放入first栈； </li>\n<li>遇到doLast函数，同理doFirst函数，闭包参数会被放入last队列；  </li>\n<li>然后遇到<code>println &#39;hello.&#39;</code>，执行该指令//1；  </li>\n<li>至此初始化过程完成。 </li>\n<li>开始执行test任务前，先检查是否任务依赖，如果有，先把依赖的任务都执行完。 </li>\n<li>然后开始执行test任务；  </li>\n<li>执行时，首先执行test任务的任务体，即<code>println &#39;:test&#39;</code>；  </li>\n<li>然后执行test任务的first栈//2和last队列//3；  </li>\n<li>任务执行结束。 </li>\n</ol>\n<h2><span id=\"san-task-zhong-shu-xing-de-ying-yong\">三、Task中属性的应用</span><a href=\"#san-task-zhong-shu-xing-de-ying-yong\" class=\"header-anchor\">#</a></h2><h3><span id=\"fen-zu\">分组</span><a href=\"#fen-zu\" class=\"header-anchor\">#</a></h3><p>　 <code>DeafultTask</code>提供了很多方便的属性，灵活运用这些属性可以让你更加灵活的配置自己的<code>Task</code>。如：在<code>IDEA</code>等编辑器中我们查看<code>Gradle</code>任务时，任务都是放在各个任务组下面的，这便是借助任务属性中的<code>group</code>属性实现的。如果在创建任务时没指定这个属性，那么任务会默认分配到<code>other tasks</code>分组。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task mytask&#123;</span><br><span class=\"line\">    <span class=\"symbol\">group:</span> <span class=\"string\">&#x27;build&#x27;</span></span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"yi-lai\">依赖</span><a href=\"#yi-lai\" class=\"header-anchor\">#</a></h3><p>　 由于<code>Gradle</code>中任务的执行顺序是不确定的，当你需要按顺序执行某些任务时，可以通过<code>dependsOn</code>、<code>mustRunAfter</code>、<code>finalizedBy</code>等定义任务之间的依赖关系来达到让任务按顺序执行的目的。看下面的例子。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task one&#123;</span><br><span class=\"line\">\tgroup <span class=\"string\">&#x27;timo&#x27;</span></span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello frist&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task two(<span class=\"attr\">dependsOn:</span> one)&#123;</span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello two&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task three&#123;</span><br><span class=\"line\">\tdependsOn two</span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello three&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task four&#123;</span><br><span class=\"line\">\t mustRunAfter three</span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello four&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TASK THREE执行完后必然执行four</span></span><br><span class=\"line\">three.finalizedBy four</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"tiao-guo\">跳过</span><a href=\"#tiao-guo\" class=\"header-anchor\">#</a></h3><p>　 有时为了节约构建时间我们需要跳过某些任务的执行，此时可以通过指定<code>enabled</code>属性的方式来跳过某些任务的执行。</p>\n<p>　 当然，在执行时候通过命令行参数<code>-x taskname</code>也可以达到相同的效果。</p>\n<p>　 为了提高构建的速度，Gradle在执行任务时都会检查任务的输入与输出，如果输入输出相对上次构建没有变化那么会将此任务标记为<code>UP-TO-DATE</code>来跳过任务的执行。当然你也可以通过<code>inputs</code>和<code>outputs</code>的<code>upToDateWhen&#123;&#125;</code>来控制这种行为。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task one&#123;</span><br><span class=\"line\">\tenabled <span class=\"literal\">false</span></span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">         println <span class=\"string\">&quot;Hello frist&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task two(<span class=\"attr\">dependsOn:</span>one)&#123;</span><br><span class=\"line\">    doLast&#123;  </span><br><span class=\"line\">         println <span class=\"string\">&quot;Hello two&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task three&#123;</span><br><span class=\"line\">    dependsOn two</span><br><span class=\"line\">     doLast &#123;</span><br><span class=\"line\">        println <span class=\"string\">&quot;Hello three&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"dong-tai-ren-wu\">动态任务</span><a href=\"#dong-tai-ren-wu\" class=\"header-anchor\">#</a></h3><p>　 得益于<code>Gradle</code>基于<code>groovy</code>的<code>dsl</code>可以方便的定义一个动态任务。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4.</span>times &#123; counter -&gt;</span><br><span class=\"line\">    task <span class=\"string\">&quot;task$counter&quot;</span> &#123;</span><br><span class=\"line\">        doLast&#123;</span><br><span class=\"line\">       \t println <span class=\"string\">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"lei-xing-ren-wu\">类型任务</span><a href=\"#lei-xing-ren-wu\" class=\"header-anchor\">#</a></h2><p>　<code> Gradle</code>及其各种插件提供了许多内置的任务类型，我们可以直接创建需要的类型任务来实现一些自定义效果。下面的代码创建了一个<code>Copy</code>类型的任务。<code>Copy</code>任务实现了<code>CopySpec</code>接口，通过查阅<code>CopySpec</code>的API说明我们可以自定义该任务的属性和方法的实现。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task copyTask(<span class=\"attr\">type:</span> Copy) &#123;</span><br><span class=\"line\">    from <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    into <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">    include <span class=\"string\">&#x27;in.txt&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"si-zi-ding-yi-ren-wu\">四、自定义任务</span><a href=\"#si-zi-ding-yi-ren-wu\" class=\"header-anchor\">#</a></h2><p>　 在<code>Gradle</code>中自定义一个任务是十分方便的，只需要编写一个继承自<code>DefaultTask  </code>的类即可。你可以直接在你的脚本文件中编写，也可以放到<code>buildSrc</code>中，当然出于可维护性的考虑以及视觉上的感受更推荐后者的方式。</p>\n<p>　 若要在<code>buildSrc</code>下定义，只需要在<code>build.gradle</code>同级目录创建<code>buildSrc</code>并把任务类放在<code>src\\main\\java</code>或<code>src\\main\\groovy</code>下即可。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接在脚本文件中定义自定义任务</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultTask</span> &#123;</span></span><br><span class=\"line\">    String words = <span class=\"string\">&#x27;Inner&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TaskAction</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> action1() &#123; println words + name &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TaskAction</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> action2() &#123; println words + <span class=\"string\">&#x27; InnerTom&#x27;</span>  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用buildSrc下定义的任务</span></span><br><span class=\"line\">task say(<span class=\"attr\">type:</span> Hello) &#123;</span><br><span class=\"line\">    words = <span class=\"string\">&#x27;Aloha &#x27;</span></span><br><span class=\"line\">    doFirst &#123; println <span class=\"string\">&#x27;fisrt blood&#x27;</span> &#125;</span><br><span class=\"line\">    doLast &#123; println <span class=\"string\">&#x27;double kill&#x27;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task sayIn(<span class=\"attr\">type:</span> Inner) &#123;</span><br><span class=\"line\">    words = <span class=\"string\">&#x27;Aloha Inner &#x27;</span></span><br><span class=\"line\">    doFirst &#123; println <span class=\"string\">&#x27;Inner blood&#x27;</span> &#125;</span><br><span class=\"line\">    doLast &#123; println <span class=\"string\">&#x27;Inner kill&#x27;</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["构建"],"tags":["Gradle"]},{"title":"Flutter初体验","url":"https://pkaq.org/2018/08/12/helloflutter/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。 </p>\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><p>　　以下工具均为必要工具：</p>\n<ul>\n<li>Git2.18.0</li>\n<li>Flutter 0.5.1</li>\n<li>Windows 10（64位）</li>\n</ul>\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><h2><span id=\"xia-zai-an-zhuang\">下载安装</span><a href=\"#xia-zai-an-zhuang\" class=\"header-anchor\">#</a></h2><p>　　下载后解压到任意目录即可(注意目录路径中不要有中文\\特殊符号\\空格)   </p>\n<p>1 SDK下载： <a href=\"https://flutter.io/sdk-archive/#windows\">https://flutter.io/sdk-archive/#windows</a></p>\n<p>2 配置环境变量</p>\n<ul>\n<li><pre><code>PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置\nFLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</code></pre>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong> 由于一些<code>flutter</code>命令需要联网获取数据，如果您是在国内访问，由于不可描述的原因，直接访问很可能不会成功。 上面的<code>PUB_HOSTED_URL</code>和<code>FLUTTER_STORAGE_BASE_URL</code>是google为国内开发者搭建的临时镜像。详情请参考 <a href=\"https://github.com/flutter/flutter/wiki/Using-Flutter-in-China\">Using Flutter in China</a> </p>\n</blockquote>\n<h2><span id=\"chuang-jian\">创建</span><a href=\"#chuang-jian\" class=\"header-anchor\">#</a></h2><p>　　在解压目录执行<code>flutter_console.bat</code>会打开一个石青色的控制台界面，根据提示可以运行<code>flutter docter</code>检查环境依赖，然后跳转到你的<code>workspace</code>目录执行<code>flutter create hello</code>就生成了一个简单计数器应用。</p>\n<ul>\n<li><p><code>ios</code>目录包含了ios的全部代码可以直接使用xcode（需要9.0+版本）进行开发。</p>\n</li>\n<li><p> <code>android</code>目录包含了android的全部代码，直接使用android studio开发即可。</p>\n</li>\n<li><p><code>lib</code>目录中包含了两端通用的dart代码，在打包生成应用时，全部的dart代码会被编译为本地代码（如在android端，会被直接编译为so文件）。</p>\n<p>　　此时连接你的安卓手机打开USB调试模式，执行<code>flutter run</code>即可将生成的<code>hello</code>应用安装到你的手机上。</p>\n</li>\n</ul>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><p><a href=\"https://flutterchina.club/\">Flutter中文网</a></p>\n</li>\n<li><p><a href=\"https://flutter.io/\">Flutter官方网站</a></p>\n</li>\n</ul>\n","categories":["App"],"tags":["Flutter","跨平台App"]},{"title":"mybatis plus整合sharding-jdbc在基于spring boot的项目中的单库分表应用","url":"https://pkaq.org/2018/08/10/shardingjdbc/","content":"<h1><span id=\"yin-yan\">引言</span><a href=\"#yin-yan\" class=\"header-anchor\">#</a></h1><p>　　在产品应用中，当某些业务数据量过大时会导致数据库读写性能急剧下降甚至拖慢其它业务的情况。此时便需要对数据库进行不同维度的拆分，例如水平拆分或者垂直拆分。<br>　　<strong>垂直拆分（分库）：</strong>按业务相关度将相关业务的表拆分到不同数据库中，例如订单库、商品库。通过这种拆分相关业务模块仅需请求其业务相关的库即可。<br>　　<strong>水平拆分（分表）：</strong>按数据相关度将单表拆分为多张表，与垂直拆分不同的是水平拆分是针对单表，当系统中某张表数据量太大时可以采用水平拆分的方式根据定义的规则拆分成多张表以提高读写性能。<br>　　具体选择哪种拆分方式还需要结合实际业务情况。在实际应用中，采用两种方式进行联合拆分的情况也是非常常见的，当然，如果在小规模应用的情况下非要做两种拆分，那除了炫技之外同时还会增加开发运维成本，是毫无意义的。<br>　　本文讨论的情况仅限于水平拆分，即对单库大数据量表进行拆分。具体原理也很简单,只要把mybatis plus的数据源换成shardingJdbcDatasource即可。下面的示例是以订单表为例，按表中的month字段按月分表。   </p>\n<h1><span id=\"ban-ben\">版本</span><a href=\"#ban-ben\" class=\"header-anchor\">#</a></h1><ul>\n<li>sharding-jdbc: 3.0.0.M2</li>\n<li>mybatis plus: 2.3</li>\n<li>druid: 1.1.10</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1><span id=\"bu-zou\">步骤</span><a href=\"#bu-zou\" class=\"header-anchor\">#</a></h1><h2><span id=\"gui-ze-ding-yi\">规则定义</span><a href=\"#gui-ze-ding-yi\" class=\"header-anchor\">#</a></h2><p>　　拆分之前首先要确定好拆分规则，并且根据拆分规则在数据库中建立好相关表</p>\n<h2><span id=\"yi-lai-yin-ru\">依赖引入</span><a href=\"#yi-lai-yin-ru\" class=\"header-anchor\">#</a></h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext &#123;</span><br><span class=\"line\">   \tdruid = <span class=\"string\">&quot;1.1.10&quot;</span></span><br><span class=\"line\">    mybatis_plus = <span class=\"string\">&quot;2.3&quot;</span></span><br><span class=\"line\">    mybatis_plus_starter = <span class=\"string\">&quot;1.0.5&quot;</span></span><br><span class=\"line\">    sharding_jdbc = <span class=\"string\">&quot;3.0.0.M2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">compile</span> <span class=\"string\">&quot;io.shardingsphere:sharding-jdbc:$&#123;sharding_jdbc&#125;&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;com.baomidou:mybatis-plus-core:$&#123;mybatis_plus&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">compile</span>(<span class=\"string\">&quot;com.alibaba:druid-spring-boot-starter:$&#123;druid&#125;&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">exclude</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;com.alibaba&#x27;</span>, module: <span class=\"string\">&#x27;jconsole&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">exclude</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;com.alibaba&#x27;</span>, module: <span class=\"string\">&#x27;tools&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"gui-ze-pei-zhi\">规则配置</span><a href=\"#gui-ze-pei-zhi\" class=\"header-anchor\">#</a></h2><p>　　<br>** 配置类 **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.pkaq.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.ShardingDataSourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.config.ShardingRuleConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.config.TableRuleConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.config.strategy.StandardShardingStrategyConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * shardingjdbc 配置类</span></span><br><span class=\"line\"><span class=\"comment\"> * Datetime: 2016-11-25 11:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> PKAQ</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(DataSource.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShardingJDBCConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource shardingDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShardingJDBCConfiguration</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataSource = dataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shardingDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        ShardingRuleConfiguration shardingRuleConfig = <span class=\"keyword\">new</span> ShardingRuleConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">//分表策略</span></span><br><span class=\"line\">        shardingRuleConfig.getTableRuleConfigs().add(getOrderTableRuleConfiguration());</span><br><span class=\"line\">        <span class=\"comment\">//绑定表规则列表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shardingDataSource = ShardingDataSourceFactory.createDataSource(createDataSourceMap(), shardingRuleConfig,  <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">1</span>), <span class=\"keyword\">new</span> Properties());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分表策略</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> TableRuleConfiguration <span class=\"title\">getOrderTableRuleConfiguration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        TableRuleConfiguration rule = <span class=\"keyword\">new</span> TableRuleConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">//逻辑表名称</span></span><br><span class=\"line\">        rule.setLogicTable(<span class=\"string\">&quot;T_ORDER&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//源名 + 表名</span></span><br><span class=\"line\">        rule.setActualDataNodes(<span class=\"string\">&quot;ds0.T_ORDER_$-&gt;&#123;2018..2019&#125;_$-&gt;&#123;[&#x27;01&#x27;,&#x27;08&#x27;,&#x27;12&#x27;]&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 表分片策略</span></span><br><span class=\"line\">        StandardShardingStrategyConfiguration strategyConfiguration =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> StandardShardingStrategyConfiguration(<span class=\"string\">&quot;month&quot;</span>, <span class=\"keyword\">new</span> MonthTableShardingAlgorithm());</span><br><span class=\"line\">        rule.setTableShardingStrategyConfig(strategyConfiguration);</span><br><span class=\"line\">        <span class=\"comment\">//自增列名称</span></span><br><span class=\"line\">        rule.setKeyGeneratorColumnName(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, DataSource&gt; <span class=\"title\">createDataSourceMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, DataSource&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">        result.put(<span class=\"string\">&quot;ds0&quot;</span>, dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置数据源为sharding jdbc</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MybatisSqlSessionFactoryBean <span class=\"title\">mybatisSqlSessionFactoryBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        MybatisSqlSessionFactoryBean mysqlplus = <span class=\"keyword\">new</span> MybatisSqlSessionFactoryBean();</span><br><span class=\"line\">        mysqlplus.setDataSource(<span class=\"keyword\">this</span>.getShardingDataSource());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysqlplus;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">getShardingDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shardingDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>** 分片规则实现 **<br>　　这里的分片规则理论上是可选配置，只是如果不配置的话默认会进行全表路由，即从所有拆分的表中进行查询。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.pkaq.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.DateUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.algorithm.sharding.PreciseShardingValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.shardingsphere.core.api.algorithm.sharding.standard.PreciseShardingAlgorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 精准分片策略类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: S.PKAQ</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Datetime</span>: 2018/8/10 0:15</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MonthTableShardingAlgorithm</span> <span class=\"keyword\">implements</span> <span class=\"title\">PreciseShardingAlgorithm</span>&lt;<span class=\"title\">Date</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 等值查询分表路由策略, 根据传入date返回响应以年月结尾的表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> availableTargetNames 可用表名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> shardingValue 分片条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 符合分片条件的表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSharding</span><span class=\"params\">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;Date&gt; shardingValue)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据配置的分表规则生成目标表的后缀</span></span><br><span class=\"line\">        String tableExt = DateUtil.format(shardingValue.getValue(), <span class=\"string\">&quot;yyyy_MM&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String availableTableName : availableTargetNames) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (availableTableName.endsWith(tableExt)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> availableTableName;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["后台开发"],"tags":["spring","分库分表"]},{"title":"基于nginx的简易蓝绿发布","url":"https://pkaq.org/2018/08/02/blueandgreen/","content":"<p>Blue/Green Deployment（蓝绿部署）,又称为<code>蓝绿发布</code>,是一种通过切换蓝绿环境的方式实现新版本的不停机发布手法.通过这种方式可以实现应用的不停机升级,快速回滚等诸多好处.当然弊端是切换的瞬间对于尚未来得及响应的请求会丢失响应.</p>\n<p>  具体的做法是    </p>\n<ul>\n<li><p>1.部署两套生产环境,我们称这两套环境分别为<code>蓝色环境</code>和<code>绿色环境</code>.</p>\n</li>\n<li><p>2.使用负载均衡指向其中一套环境(也可以都指向),当版本升级时 先将版本发布到备用环境中 ,进行有效性测试, 测试通过后,将需要升级的环境(如蓝色环境)流量全部导流到备用环境中,此时备用环境与原来的正式环境完成了一次角色互换.</p>\n</li>\n<li><p>3.重新配置负载均衡.   </p>\n</li>\n<li><p>4.如需回滚将LB流量重新指向旧环境即可.</p>\n<p>当然,这里也可以让蓝绿两套环境同时支持线上, 思路是一样的, 核心的技术点仍然是通过<code>nginx</code>配置热加载完成导流实现.</p>\n<a id=\"more\"></a>   \n\n</li>\n</ul>\n<h1><span id=\"1-huan-jing-zhun-bei\">1.环境准备</span><a href=\"#1-huan-jing-zhun-bei\" class=\"header-anchor\">#</a></h1><ul>\n<li>nginx一份</li>\n<li>tomcat两份(配置好端口并启动验证可访问)</li>\n</ul>\n<h1><span id=\"2-lb-pei-zhi\">2.LB配置</span><a href=\"#2-lb-pei-zhi\" class=\"header-anchor\">#</a></h1><p>  <code>nginx.conf</code>配置如下<br>  <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  # ... 省略</span><br><span class=\"line\">  http &#123;</span><br><span class=\"line\">  \t# ... 前面省略</span><br><span class=\"line\">    upstream nginx_blue_green &#123;</span><br><span class=\"line\">     \t#蓝色环境</span><br><span class=\"line\">        #server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8081</span> down;</span><br><span class=\"line\">        #server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8080</span> weight=<span class=\"number\">100</span>;</span><br><span class=\"line\">        #绿色环境</span><br><span class=\"line\">        server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8080</span> down;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8081</span> weight=<span class=\"number\">100</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     # ... 中间省略</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">\t\t location / &#123;</span><br><span class=\"line\">       \t\t proxy_pass http://nginx_blue_green;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # ... 后面省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1><span id=\"3-fa-bu-qie-huan\">3.发布切换</span><a href=\"#3-fa-bu-qie-huan\" class=\"header-anchor\">#</a></h1><p>  发布时只需要编辑<code>nginx.conf</code>注释解注对应蓝绿环境,然后使用<code>nginx -s reload</code>重新加载配置即可实现蓝绿切换.</p>\n<p>————————————– ** 分割线 ** ————————————–   </p>\n<p>** 以下内容为word手册版 **</p>\n<h1><span id=\"1-lan-lu-bu-shu\">1    蓝绿部署</span><a href=\"#1-lan-lu-bu-shu\" class=\"header-anchor\">#</a></h1><h2><span id=\"1-1-mu-de\">1.1    目的</span><a href=\"#1-1-mu-de\" class=\"header-anchor\">#</a></h2><p>为实现在线服务新版本的不停机更新，可以采用蓝绿部署的方式实现版本的平滑升级。   </p>\n<h2><span id=\"1-2-qian-ti\">1.2    前提</span><a href=\"#1-2-qian-ti\" class=\"header-anchor\">#</a></h2><p>实现蓝绿部署需要同时配置两套<code>tomca</code>作为蓝绿发布环境，同时配置<code>nginx</code>作为负载。   </p>\n<h2><span id=\"1-3-bu-zou\">1.3    步骤</span><a href=\"#1-3-bu-zou\" class=\"header-anchor\">#</a></h2><h3><span id=\"1-3-1-pei-zhi-lan-lu-huan-jing\">1.3.1    配置蓝绿环境</span><a href=\"#1-3-1-pei-zhi-lan-lu-huan-jing\" class=\"header-anchor\">#</a></h3><p>解压附件包中的蓝绿环境<code>tomcat</code>   </p>\n<h3><span id=\"1-3-2-an-zhuang-nginx\">1.3.2    安装nginx</span><a href=\"#1-3-2-an-zhuang-nginx\" class=\"header-anchor\">#</a></h3><p>解压附件中的<code>nginx-1.15.2.tar.gz</code>并执行如下命令   </p>\n<h3><span id=\"1-3-3-pei-zhi-nginx\">1.3.3    配置nginx</span><a href=\"#1-3-3-pei-zhi-nginx\" class=\"header-anchor\">#</a></h3><p>  使用whereis查看nginx安装的路径，通常在<code>/usr/local/nginx</code>下，修改nginx配置并使用如下配置替换原有配置内容    </p>\n<h3><span id=\"1-3-4-bu-shu-fang-shi\">1.3.4    部署方式</span><a href=\"#1-3-4-bu-shu-fang-shi\" class=\"header-anchor\">#</a></h3><p>** 首次部署方式：**<br>只需要按照章节4步骤部署一套应用即可，这里假设部署到<code>tomcat-blue（8081）</code>，然后在<code>nginx</code>目录下使用 <code>./sbin/nginx</code>启动nginx即可。   </p>\n<p>** 版本更新方式：**   </p>\n<ol>\n<li>   将新版本发布到<code>绿色环境(tomcat-green)</code>，启动tomcat-green并验证是否可以访问，以及app是否可以正常使用。</li>\n<li>   确认绿色环境测试通过，修改nginx配置放开绿色环境相关配置的注释，同时注释蓝色环境相关配置的注释</li>\n<li>   使用 <code>nginx -s reload</code> 命令重新加载nginx配置完成蓝色环境到绿色环境的切换</li>\n<li>   关闭蓝色环境tomcat，准备下次部署使用。</li>\n<li>   如升级失败，修改nginx配置将负载重新指向<code>蓝色环境</code>即可。</li>\n</ol>\n","categories":["DevOps"],"tags":["DevOps","nginx","tomcat"]},{"title":"基于注解的控制器：Spring Web/WebFlux 和 测试","url":"https://pkaq.org/2018/05/21/annotated-controllers-spring-webwebflux-and-testin/","content":"<h1><span id></span><a href=\"#\" class=\"header-anchor\">#</a></h1><h3><span id=\"spring-web-he-spring-webflux-liang-ge-ming-zi-kan-shang-qu-hen-xiang-si-na-me-jin-xing-ce-shi-shi-shi-fou-ye-lei-si-ni-xia-mian-jiu-rang-wo-men-liao-jie-yi-xia-ta-men-zai-jin-xing-ce-shi-shi-de-bu-tong\">Spring Web和Spring WebFlux两个名字看上去很相似，那么进行测试时是否也类似呢？下面就让我们了解一下它们在进行测试时的不同。</span><a href=\"#spring-web-he-spring-webflux-liang-ge-ming-zi-kan-shang-qu-hen-xiang-si-na-me-jin-xing-ce-shi-shi-shi-fou-ye-lei-si-ni-xia-mian-jiu-rang-wo-men-liao-jie-yi-xia-ta-men-zai-jin-xing-ce-shi-shi-de-bu-tong\" class=\"header-anchor\">#</a></h3><p>原文链接：<a href=\"https://dzone.com/articles/annotated-controllers-spring-webwebflux-and-testin\">https://dzone.com/articles/annotated-controllers-spring-webwebflux-and-testin</a></p>\n<p>作者：Biju Kunjummen ，2017-12-05  发布于 Java Zone   </p>\n<p>译者：<a href=\"http://pkaq.org/\">PKAQ</a> , 2018-05-20 发布于 Spring4All    </p>\n<p><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux\">Spring WebFlux</a> 和 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\">Spring Web </a> 采用的是两个完全不同的技术栈。不过， Spring Webflux 依旧支持基于注解的编程模型。  </p>\n<p>二者定义<code>endpoint(功能性端点)</code>的方式是类似的，但是对<code>endpoint(功能性端点)</code>进行单元测试时有着明显的不同。你必须明确所选用的技术栈来编写不同的单元测试方法。  </p>\n<h2><span id=\"endpoint-shi-li\">Endpoint示例</span><a href=\"#endpoint-shi-li\" class=\"header-anchor\">#</a></h2><p>一个基于注解的<code>endpoint</code>示例:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">data class <span class=\"title\">Greeting</span><span class=\"params\">(val message: String)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span></span><br><span class=\"line\"><span class=\"function\">@RestController</span></span><br><span class=\"line\"><span class=\"function\">@<span class=\"title\">RequestMapping</span><span class=\"params\">(<span class=\"string\">&quot;/web&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">class GreetingController </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/greet&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">handleGreeting</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> greeting: Greeting)</span>: Greeting </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Greeting(<span class=\"string\">&quot;Thanks: $&#123;greeting.message&#125;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"spring-web-de-dan-yuan-ce-shi\">Spring Web的单元测试</span><a href=\"#spring-web-de-dan-yuan-ce-shi\" class=\"header-anchor\">#</a></h2><p>如果采用基于<code>Spring Web</code>的starter创建应用，那么可以按如下方式在<code>Gradle</code>配置文件中引入依赖。   </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>接下来采用 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#spring-mvc-test-framework\">Mock MVC </a>来对上面的<code>endpoint(功能性端点)</code>执行一个模拟的web测试。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner::class)</span></span><br><span class=\"line\"><span class=\"meta\">@WebMvcTest(GreetingController::class)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingControllerMockMvcTest</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    lateinit <span class=\"keyword\">var</span> mockMvc: MockMvc</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">testHandleGreetings</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mockMvc</span><br><span class=\"line\">                .perform(</span><br><span class=\"line\">                        post(<span class=\"string\">&quot;/web/greet&quot;</span>)</span><br><span class=\"line\">                                .content(<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; </span></span><br><span class=\"line\"><span class=\"string\">                                |&#123;</span></span><br><span class=\"line\"><span class=\"string\">                                |&quot;</span>message<span class=\"string\">&quot;: &quot;</span>Hello Web<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                                |&#125;</span></span><br><span class=\"line\"><span class=\"string\">                            &quot;</span><span class=\"string\">&quot;&quot;</span>.trimMargin())</span><br><span class=\"line\">                ).andExpect(content().json(<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    |&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    |&quot;</span>message<span class=\"string\">&quot;: &quot;</span>Thanks: Hello Web<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    |&#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;</span><span class=\"string\">&quot;&quot;</span>.trimMargin()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"spring-webflux-de-dan-yuan-ce-shi\">Spring WebFlux的单元测试</span><a href=\"#spring-webflux-de-dan-yuan-ce-shi\" class=\"header-anchor\">#</a></h2><p>首先，像上面一样，采用如下方式引入<code>Spring-WebFlux</code>相关依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-webflux&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后，可以使用 <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#webtestclient\">WebTestClient</a> 类对上面的<code>endpoint</code>编写单元测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.reactive.server.WebTestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.reactive.function.BodyInserters</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner::class)</span></span><br><span class=\"line\"><span class=\"meta\">@WebFluxTest(GreetingController::class)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingControllerTest</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    lateinit <span class=\"keyword\">var</span> webTestClient: WebTestClient</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">testHandleGreetings</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        webTestClient.post()</span><br><span class=\"line\">                .uri(<span class=\"string\">&quot;/web/greet&quot;</span>)</span><br><span class=\"line\">                .header(HttpHeaders.CONTENT_TYPE, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">                .body(BodyInserters</span><br><span class=\"line\">                        .fromObject(<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; </span></span><br><span class=\"line\"><span class=\"string\">                                |&#123;</span></span><br><span class=\"line\"><span class=\"string\">                                |   &quot;</span>message<span class=\"string\">&quot;: &quot;</span>Hello Web<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                                |&#125;</span></span><br><span class=\"line\"><span class=\"string\">                            &quot;</span><span class=\"string\">&quot;&quot;</span>.trimMargin()))</span><br><span class=\"line\">                 <span class=\"comment\">//使用exchange（）方法来检索响应           </span></span><br><span class=\"line\">                .exchange()</span><br><span class=\"line\">                .expectStatus().isOk</span><br><span class=\"line\">                .expectBody()</span><br><span class=\"line\">                .json(<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    |&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    |   &quot;</span>message<span class=\"string\">&quot;: &quot;</span>Thanks: Hello Web<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    |&#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;</span><span class=\"string\">&quot;&quot;</span>.trimMargin())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"jie-lun\">结论</span><a href=\"#jie-lun\" class=\"header-anchor\">#</a></h2><p>显而易见，<code>Spring Web</code>和<code>Spring WebFlux</code>两者的编码方式十分相似，并且<code>Spirng WebFlux</code>也延续了<code>Spring  Web</code>的测试方式。但是，作为一名开发者，应该注意到它们之间潜在的不同并根据实际情况编写测试代码。希望你通过这篇文章能了解到来如何编写不同的用例代码。</p>\n","categories":["Spring"],"tags":["Spring Boot","Spring cloud","Spring"]},{"title":"使用Electron快速将B/S应用构建为桌面应用","url":"https://pkaq.org/2018/02/09/electronbs/","content":"<p>借助<code>Electron</code>可以用来非常轻易的构建跨平台桌面应用，因为你只需要熟悉<code>html</code>、<code>css</code>、<code>javascript</code>这些基本技能就可以快速构建一个简单应用。<br>这意味着我们可以借助<code>Electron</code>来打包我们的<code>B/S</code>应用伪装成一个本地应用,这不仅可以提高传统用户的亲和度还可以免去<code>不要用ie装谷歌; 怎么装谷歌,360可以吗?</code>的烦恼\\扩大可视区域(免去地址栏 菜单栏等)\\快速打开应用(无需打开浏览器翻收藏夹)等一系列好处。<br>  那么下面的内容就是告诉你如何快速打包一个伪桌面应用</p>\n<p>前提:   </p>\n<ul>\n<li>nodejs   </li>\n<li>yarn   </li>\n</ul>\n<h2><span id=\"1-an-zhuang\">1.安装</span><a href=\"#1-an-zhuang\" class=\"header-anchor\">#</a></h2><p>可以执行如下命令,更多详细内容可以查看<a href=\"https://electronjs.org/docs/tutorial/installation\">官网安装文档</a>    </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add electron</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-chuang-jian-ru-kou-pei-zhi-main-js\">2.创建入口配置 main.js</span><a href=\"#2-chuang-jian-ru-kou-pei-zhi-main-js\" class=\"header-anchor\">#</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> electron = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 控制应用生命周期的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;app&#125; = electron;</span><br><span class=\"line\"><span class=\"comment\">// 创建本地浏览器窗口的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;BrowserWindow&#125; = electron;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指向窗口对象的一个全局引用，如果没有这个引用，那么当该javascript对象被垃圾回收的</span></span><br><span class=\"line\"><span class=\"comment\">// 时候该窗口将会自动关闭</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> win;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWindow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的浏览器窗口</span></span><br><span class=\"line\">    win = <span class=\"keyword\">new</span> BrowserWindow();</span><br><span class=\"line\">    <span class=\"comment\">// 打开后最大化窗口</span></span><br><span class=\"line\">    win.maximize();</span><br><span class=\"line\">    <span class=\"comment\">// 并且装载应用的index.html页面</span></span><br><span class=\"line\">    win.loadURL(<span class=\"string\">`http://localhost:8000/#/user/login`</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果是前后端分离得项目可以按如下方式书写</span></span><br><span class=\"line\">    win.loadURL(<span class=\"string\">`file://<span class=\"subst\">$&#123;__dirname&#125;</span>/index.html`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 打开开发工具页面</span></span><br><span class=\"line\">    <span class=\"comment\">//win.webContents.openDevTools();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当窗口关闭时调用的方法</span></span><br><span class=\"line\">    win.on(<span class=\"string\">&#x27;closed&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解除窗口对象的引用，通常而言如果应用支持多个窗口的话，你会在一个数组里</span></span><br><span class=\"line\">        <span class=\"comment\">// 存放窗口对象，在窗口关闭的时候应当删除相应的元素。</span></span><br><span class=\"line\">        win = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当Electron完成初始化并且已经创建了浏览器窗口，则该方法将会被调用。</span></span><br><span class=\"line\"><span class=\"comment\">// 有些API只能在该事件发生后才能被使用。</span></span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;ready&#x27;</span>, createWindow);</span><br><span class=\"line\"><span class=\"comment\">/* var mainWindow = new BrowserWindow(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  webPreferences: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    nodeIntegration: false</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;); */</span></span><br><span class=\"line\"><span class=\"comment\">// 当所有的窗口被关闭后退出应用</span></span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;window-all-closed&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于OS X系统，应用和相应的菜单栏会一直激活直到用户通过Cmd + Q显式退出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.platform !== <span class=\"string\">&#x27;darwin&#x27;</span>) &#123;</span><br><span class=\"line\">        app.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于OS X系统，当dock图标被点击后会重新创建一个app窗口，并且不会有其他</span></span><br><span class=\"line\">    <span class=\"comment\">// 窗口打开</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        createWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这个文件后面你可以直接包含你应用特定的由主进程运行的代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以把这些代码放在另一个文件中然后在这里导入。</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"3-chuang-jian-da-bao-pei-zhi-package-json\">3.创建打包配置 package.json</span><a href=\"#3-chuang-jian-da-bao-pei-zhi-package-json\" class=\"header-anchor\">#</a></h2><p>可以通过 <code>yarn init</code>或新建文件得方式创建此文件   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Evatron&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Eva desktop&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;PKAQ&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span>: <span class=\"string\">&quot;MIT&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"4-da-bao\">4.打包</span><a href=\"#4-da-bao\" class=\"header-anchor\">#</a></h2><p>安装打包管理器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add electron-packager</span><br><span class=\"line\">```   </span><br><span class=\"line\">执行打包   </span><br><span class=\"line\">```bash</span><br><span class=\"line\">electron-packager . Evatron </span><br><span class=\"line\">\t--win --out=release </span><br><span class=\"line\">    --arch=x64 </span><br><span class=\"line\">    --version=1.0.0 </span><br><span class=\"line\">    --electron-version=2.0.0 </span><br><span class=\"line\">    --overwrite </span><br><span class=\"line\">    --icon=./favicon.ico</span><br></pre></td></tr></table></figure>\n<p>命令解释   </p>\n<ul>\n<li><code>.</code> ：打包入口   </li>\n<li><code>Evatron</code> ： 打包文件名   </li>\n<li><code>--win --out=release --arch=x64</code> ： 生成win64类型文件   </li>\n<li><code>--version=1.0.0</code> ：生成的文件版本   </li>\n<li><code>--electron-version=2.0.0</code> ：electron版本,可以通过<code>electron --version</code>查看   </li>\n<li><code>--overwrite</code> ：是否覆盖之前的打包文件   </li>\n<li><code>--icon=./favicon.ico</code> ：favicon   </li>\n</ul>\n<p>打包后会在命令目录生成一个release文件夹 点击里面生成的exe可以查看我们的桌面程序   </p>\n<blockquote>\n<p>p.s:如果你的react项目index页面死活出不来，可能是你使用了react-router的BroswerHistory，换成HashHistory就可以了。  </p>\n</blockquote>\n<p>参考：<a href=\"https://segmentfault.com/a/1190000014030465\">https://segmentfault.com/a/1190000014030465</a></p>\n","categories":["前端"],"tags":["Electron"]},{"title":"一分钱让自己科学上网","url":"https://pkaq.org/2018/02/09/gfw/","content":"<h1><span id=\"huo-qu-yun-fu-wu-qi\">获取云服务器</span><a href=\"#huo-qu-yun-fu-wu-qi\" class=\"header-anchor\">#</a></h1><h3><span id=\"1-zhu-ce-vultr\">1.注册vultr</span><a href=\"#1-zhu-ce-vultr\" class=\"header-anchor\">#</a></h3><p> 点击 <a href=\"https://www.vultr.com/?ref=7353037\">|&gt;注册传送门&lt;|</a> 注册<code>vultr</code>   </p>\n<h3><span id=\"2-xuan-ze-pei-zhi\">2.选择配置</span><a href=\"#2-xuan-ze-pei-zhi\" class=\"header-anchor\">#</a></h3><a id=\"more\"></a>\n<p>  点击<code>servers</code>菜单页面的<code>加号</code>创建服务器。这里建议选择欧洲服务器,根据经验欧洲服务器是稳定性和速度最好的。这里选择最便宜的配置就够用了，当然2.5的基本常年处于缺货状态。<br>  选择完成后，点击部署，等待创建完成。<br><img src=\".%5C0.jpg\" alt=\"0.jpg\"></p>\n<h3><span id=\"fu-wu-qi-cao-zuo\">服务器操作</span><a href=\"#fu-wu-qi-cao-zuo\" class=\"header-anchor\">#</a></h3><p>在服务器控制台可以看到刚才创建的服务器，点击右侧的三个原点可以可用操作；<br><img src=\".%5C1.jpg\" alt=\"1.jpg\"><br>点击标题可以查看配置详情。到这里你就可以通过<code>online console</code>或者<code>xshell</code>等各种方式来登录操作你的服务器了:)<br><img src=\".%5C2.jpg\" alt=\"2.jpg\"></p>\n<h1><span id=\"da-jian-ti-zi\">搭建梯子</span><a href=\"#da-jian-ti-zi\" class=\"header-anchor\">#</a></h1><p>搭建梯子非常简单,登录服务器后使用一键脚本即可<br><strong>via curl</strong>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/pkaq/1kss/master/1kss.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>via wget</strong>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.githubusercontent.com/pkaq/1kss/master/1kss.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"shi-yong-ti-zi\">使用梯子</span><a href=\"#shi-yong-ti-zi\" class=\"header-anchor\">#</a></h1><p>使用梯子的方式也十分简单,只需要去 <code>https://shadowsocks.com/client.html</code>下载一个<code>ShadowSocks</code>客户端,填入相应的配置即可。</p>\n<p>p.s:本贴仅用以技术交流探讨 - 2018.06.14更新一键脚本</p>\n","categories":["杂文"],"tags":["GFW"]},{"title":"使用插件检查Gradle依赖更新","url":"https://pkaq.org/2018/02/07/gradleCDU/","content":"<p>​    如今各大小有名无名厂商发布的各种依赖包版本滚动越来越频繁，也总有那么一波同学希望项目中的依赖尽可能保持新的版本，且看如下几种方式：</p>\n<h2><span id=\"shou-dong-jian-cha\">手动检查</span><a href=\"#shou-dong-jian-cha\" class=\"header-anchor\">#</a></h2><p>​    最原始费时的方式莫过于手动检查了 ：}，喜欢这种方式自虐的同学可以点击传送门<br><a href=\"http://mvnrepository.com/\">Maven中央仓库</a></p>\n<h2><span id=\"bao-chi-zui-xin\">保持最新</span><a href=\"#bao-chi-zui-xin\" class=\"header-anchor\">#</a></h2><p>​    使用<code>+</code>可以使依赖保持最新，不过这样带来的副作用即是每次构建总会去检查每个依赖是否存在最新版本，这必然会拖慢构建的速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot:spring-boot-starter-web:+</span><br></pre></td></tr></table></figure>\n<h2><span id=\"shi-yong-cha-jian\">使用插件</span><a href=\"#shi-yong-cha-jian\" class=\"header-anchor\">#</a></h2><p>​    使用三方插件进行检查，可以使依赖固定在一个相对新的版本，这里需要注意的是，plugins需要放置在脚本的顶部，更多关于<code>plugins</code>的内容可以查看<a href=\"https://docs.gradle.org/4.5/userguide/plugins.html#sec:plugins_block\">官方文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">   id &quot;name.remal.check-dependency-updates&quot; version &quot;1.0.6&quot; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    应用此插件后,可以执行<code>gradle checkDependencyUpdates</code> 或 <code>gradle cDU</code> 检查依赖最新版本 : }</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> Task :web:checkDependencyUpdates</span></span><br><span class=\"line\">New dependency version: com.alibaba:druid: 1.0.29 -&gt; 1.1.7</span><br></pre></td></tr></table></figure>","categories":["Build Tools"],"tags":["Gradle"]},{"title":"在Gradle中使用阿里巴巴Java开发规约进行代码检查","url":"https://pkaq.org/2017/10/19/gradlewithp3c/","content":"<h1><span id></span><a href=\"#\" class=\"header-anchor\">#</a></h1><h2><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h2><p>　　最近阿里发布了<a href=\"https://yq.aliyun.com/articles/69327?spm=5176.100239.blogcont69327.158.xUUgiz&p=2#comments\">《阿里巴巴Java开发手册》</a>,一时间无数阿里拥趸如获武穆遗书,就在近日阿里又顺便发布了<a href=\"https://github.com/alibaba/p3c\">&lt;阿里巴巴java开发规约插件&gt;</a>,可以轻松的在码字阶段获得相应的编码提示,那么,在Gradle中如何应用<code>阿里开发规约</code>进行代码检查呢.且看下文.</p>\n<p>　　阿里的开发规约插件是基于PMD进行的代码检测,所以在Gradle应用<code>阿里开发规约</code>检查只需要使用<code>gradle</code>提供的<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html\"><code>pmd</code>插件</a>即可达成目的.<br>  目前阿里开发规约提供了如下一些规则配置,要应用这些配置只需要将他们配置到<code>pmd</code>的检查规则中即可.</p>\n<ul>\n<li>ali-comment.xml    </li>\n<li>ali-concurrent.xml</li>\n<li>ali-constant.xml    </li>\n<li>ali-exception.xml    </li>\n<li>ali-flowcontrol.xml    </li>\n<li>ali-naming.xml    </li>\n<li>ali-oop.xml    </li>\n<li>ali-orm.xml    </li>\n<li>ali-other.xml    </li>\n<li>ali-set.xml</li>\n</ul>\n<blockquote>\n<p><strong>PMD介绍</strong><br>　　PMD(Project Manager Design)是一种开源分析Java代码错误的工具。与其他分析工具不同的是，PMD通过静态分析获知代码错误。也就是说，在不运行Java程序的情况下报告错误。PMD附带了许多可以直接使用的规则，利用这些规则可以找出Java源程序的许多问题。此外，用户还可以自己定义规则，检查Java代码是否符合某些特定的编码规范。<br>　　PMD的核心是JavaCC解析器生成器。PMD结合运用JavaCC和EBNF（扩展巴科斯-诺尔范式，Extended Backus-Naur Formal）语法，再加上JJTree，把Java源代码解析成抽象语法树（AST，Abstract Syntax Tree）。</p>\n</blockquote>\n<blockquote>\n<p>以上内容引自百度百科-PMD条目</p>\n</blockquote>\n<h2><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\">#</a></h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;pmd&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">\tp3c = <span class=\"string\">&quot;1.3.0&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pmd &#123;</span><br><span class=\"line\">\tconsoleOutput = <span class=\"literal\">true</span></span><br><span class=\"line\">    reportsDir = file(<span class=\"string\">&quot;build/reports/pmd&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\truleSets = [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;java-ali-comment&quot;</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">   jcenter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tpmd <span class=\"string\">&quot;com.alibaba.p3c:p3c-pmd:$&#123;p3c&#125;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有几个需要注意的点</p>\n<ul>\n<li>gradle的pmd插件为<code>rule</code>都添加了默认的<code>java-</code>前缀,一定不要丢掉</li>\n<li>dependencies中依赖的范围是<code>pmd</code>,这样依赖才会加到<code>pmdClasspath</code>中为<code>pmd</code>所用</li>\n<li>关于本插件的一些其它配置可以查看 <a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html\"><code>pmd插件dsl手册</code></a></li>\n</ul>\n<h2><span id=\"yun-xing-jian-cha\">运行检查</span><a href=\"#yun-xing-jian-cha\" class=\"header-anchor\">#</a></h2><p>该插件提供了如下几个任务</p>\n<table>\n<thead>\n<tr>\n<th>任务名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pmdMain</td>\n<td>检查src/main/java下的代码</td>\n</tr>\n<tr>\n<td>pmdTest</td>\n<td>检查src/main/test下的代码</td>\n</tr>\n<tr>\n<td>pmdSourceSet</td>\n<td>检查给定范围的代码</td>\n</tr>\n<tr>\n<td>check</td>\n<td>检查源码和单元测试代码</td>\n</tr>\n</tbody></table>\n<p>可以按照需求运行对应任务进行代码检查。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用短写方式运行pmdMain任务</span></span><br><span class=\"line\">gradle pM</span><br></pre></td></tr></table></figure>\n<p>输出的检测报告在我们定义的目录里可以找到<code>build/reports/pmd</code></p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"Spring Cloud 之服务治理 - Eureka服务发现-消费者(Feign)","url":"https://pkaq.org/2017/09/12/sc-routingfeign/","content":"<p>Feign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用Feign, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求。<br>Feign使得 Java HTTP 客户端编写更方便。Feign 灵感来源于Retrofit、JAXRS-2.0和WebSocket。Feign最初是为了降低统一绑定Denominator到HTTP API的复杂度，不区分是否支持Restful。Feign旨在通过最少的资源和代码来实现和HTTP API的连接。通过可定制的解码器和错误处理，可以编写任意的HTTP API。</p>\n<p>** 主要特点 **</p>\n<ul>\n<li>定制化</li>\n<li>提供多个接口</li>\n<li>支持JSON格式的编码和解码</li>\n<li>支持XML格式的编码和解码</li>\n</ul>\n<p>由于Feign是基于Ribbon的,所以这里使用了Feign就已经具备了Ribbon的负载均衡功能</p>\n<a id=\"more\"></a>\n<p>1.引入依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;org.springframework.cloud:spring-cloud-starter-feign:$&#123;cloud_config&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.稍作配置</p>\n<p>在<code>bootstrap.yaml</code>中加入<code>Eureka server</code>相关配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">                <span class=\"attr\">profile:</span> <span class=\"string\">rabbit</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">appliaction</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">pkaq</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">pkaqx</span></span><br></pre></td></tr></table></figure>\n\n<p>Feign在默认情况下使用的是JDK原生的URLConnection发送HTTP请求，没有连接池，但是对每个地址会保持一个长连接，即利用HTTP的persistence connection 。我们可以用Apache的HTTP Client替换Feign原始的http client, 从而获取连接池、超时时间等与性能息息相关的控制能力。Spring Cloud从Brixtion.SR5版本开始支持这种替换，首先在项目中声明Apache HTTP Client和feign-httpclient依赖：\\</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;com.netflix.feign:feign-httpclient:$&#123;feign_httpclient&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">    <span class=\"attr\">httpclient:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>3.添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>4.来点代码</p>\n<p>启动类代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\">open class RibbonClientBooter: CommandLineRunner&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Throws(Exception::class)</span></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">run</span><span class=\"params\">(vararg args: String)</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;  --- --- --- [ Ribbon client started ] --- --- ---  &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class=\"line\">    org.springframework.boot.SpringApplication.run(org.pkaq.RibbonClientBooter::class.java, *args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Feign接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.springframework.cloud.netflix.feign.FeignClient(<span class=\"string\">&quot;tiger&quot;</span>)</span><br><span class=\"line\">internal <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所请求的服务接口</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/say&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">say</span><span class=\"params\">()</span>: String</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Controller代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> feignClient: FeignClient? = <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/Feign&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">say</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> feignClient!!.say()+<span class=\"string\">&quot;--&gt; Feign&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.启动服务,大功告成</p>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"Spring Cloud 之服务治理 - Eureka服务发现-消费者(负载均衡器Ribbon)","url":"https://pkaq.org/2017/09/12/sc-routingribbon/","content":"<p>1.引入依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.cloud:spring-cloud-starter-ribbon:$&#123;cloud_config&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.稍作配置</p>\n<p>在<code>bootstrap.yaml</code>中加入<code>Eureka server</code>相关配置<br>    <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">                <span class=\"attr\">profile:</span> <span class=\"string\">rabbit</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">appliaction</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">pkaq</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">pkaqx</span></span><br></pre></td></tr></table></figure><br>3.添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>4.来点代码</p>\n<p>启动类代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\">open class RibbonClientBooter: CommandLineRunner&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    val builder: RestTemplateBuilder? = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个是新加的注解,表示开启robbin的负载均衡功能。</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"function\">open fun <span class=\"title\">restTemplate</span><span class=\"params\">()</span>: RestTemplate </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder!!.build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Throws(Exception::class)</span></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">run</span><span class=\"params\">(vararg args: String)</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;  --- --- --- [ Ribbon client started ] --- --- ---  &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class=\"line\">    org.springframework.boot.SpringApplication.run(org.pkaq.RibbonClientBooter::class.java, *args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Controller代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RibbonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> restTemplate: RestTemplate? = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/Ribbon&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">say</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        val microServiceNode = <span class=\"string\">&quot;tiger&quot;</span></span><br><span class=\"line\">        val serviceName = <span class=\"string\">&quot;say&quot;</span></span><br><span class=\"line\">        val url = <span class=\"string\">&quot;http://$&#123;microServiceNode&#125;/$&#123;serviceName&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate!!.getForObject(url, String::class.java)+<span class=\"string\">&quot; - &gt; Ribbon&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这里已经不用通过注入<code>LoadBalancerClient</code>获取<code>serviceInstance</code>的方式来拼接请求路径了,这是因为,当一个被@LoadBalanced注解修饰的RestTemplate对象向外发起HTTP请求时，会被LoadBalancerInterceptor类的intercept函数所拦截。由于我们在使用RestTemplate时候采用了服务名作为host，所以直接从HttpRequest的URI对象中通过getHost()就可以拿到服务名，然后调用execute函数去根据服务名来选择实例并发起实际的请求。</p>\n<p>5.启动服务,大功告成</p>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"Spring Cloud 之服务治理 - Eureka服务发现-消费者(RestTemplate)","url":"https://pkaq.org/2017/08/12/sc-resttemplate/","content":"<p>本部分需要依赖之前的<a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-config-server\">配置中心</a>和<a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-eureka-server-simple\">服务注册中心</a>、<a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-config-client\">服务提供者</a>三个示例代码运行</p>\n<p>三种方式</p>\n<ul>\n<li>RestTemplate</li>\n<li>Ribbon</li>\n<li>Feign</li>\n</ul>\n<p>下面描述的是通过<code>RestTemplate</code>的方式进行服务调用</p>\n<a id=\"more\"></a>\n<ul>\n<li>RestTemplate<br>　　RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率<br> 1.引入依赖<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.cloud:spring-cloud-starter-eureka:$&#123;cloud_config&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n 2.稍作配置<br>  在<code>bootstrap.yaml</code>中加入<code>Eureka server</code>相关配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">                <span class=\"attr\">profile:</span> <span class=\"string\">rabbit</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">appliaction</span></span><br><span class=\"line\">                <span class=\"attr\">username:</span> <span class=\"string\">pkaq</span></span><br><span class=\"line\">                <span class=\"attr\">password:</span> <span class=\"string\">pkaqx</span></span><br></pre></td></tr></table></figure>\n 3.添加注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n 4.来点代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\">open class RabbitClientBooter: CommandLineRunner&#123;</span><br><span class=\"line\">   <span class=\"comment\">//spring默认已注入RestTemplateBuilder实例</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    val builder: RestTemplateBuilder? = <span class=\"keyword\">null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例化restTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">open fun <span class=\"title\">restTemplate</span><span class=\"params\">()</span>: RestTemplate </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder!!.build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Throws(Exception::class)</span></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">run</span><span class=\"params\">(vararg args: String)</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;  --- --- --- [ Rabbit client started ] --- --- ---  &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class=\"line\">    org.springframework.boot.SpringApplication.run(org.pkaq.RabbitClientBooter::class.java, *args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nController代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loadBalancerClient: LoadBalancerClient? = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> restTemplate: RestTemplate? = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/jump&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">say</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里配置要调用发的服务提供者的spring.</span></span><br><span class=\"line\">        val microServiceNode = <span class=\"string\">&quot;tiger&quot;</span></span><br><span class=\"line\">        val serviceName = <span class=\"string\">&quot;say&quot;</span></span><br><span class=\"line\">        val serviceInstance  = loadBalancerClient!!.choose(microServiceNode)</span><br><span class=\"line\">        </span><br><span class=\"line\">        val url = <span class=\"string\">&quot;http://&quot;</span>+serviceInstance.host+<span class=\"string\">&quot;:&quot;</span>+serviceInstance.port+<span class=\"string\">&quot;/&quot;</span>+serviceName</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate!!.getForObject(url, String::class.java)+<span class=\"string\">&quot; - &gt; Rabbit&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n可以看到 采用这种方式 比较繁琐,其中拼接url的部分代码会产生大量重复,或许你第一反应会是封装一下,但好在已经有了足够多的现成轮子可以使用<br> 5.启动服务,大功告成</li>\n</ul>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"使用Gradle构建基于Kotlin的Spring Boot项目","url":"https://pkaq.org/2017/08/11/build-gradle-with-kotlin/","content":"<p>Hello Kotlin~</p>\n<p><code>Kotlin</code>正式发布之后吸引了不少目光,就连<code>Gradle</code>在3.5版本的时候都推出了基于<code>Gradle</code>的dsl.<br>上有亲爹<code>jetbrains</code>,下有干爹<code>google</code>,真是想没人关注都难.</p>\n<p>下面展示了如何用<code>Gradle</code>来构建一个基于<code>Kotlin</code>的<code>Srping Boot</code>项目.</p>\n<blockquote>\n<p>p.s 好吧,我承认加spring boot纯粹是为了博眼球蹭热度的</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>1.项目结构<br>src<br>    |-main<br>        |-kotlin</p>\n<p>这里放在<code>src/main/java</code>下也是可以的</p>\n<p>2.构建脚本</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 应用kotlin插件</span></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&quot;org.jetbrains.kotlin.jvm&quot;</span> version <span class=\"string\">&quot;1.1.3-2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义版本号</span></span><br><span class=\"line\">ext&#123;</span><br><span class=\"line\">    kotlin_version = <span class=\"string\">&#x27;1.1.2-4&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义仓库</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    maven &#123; url<span class=\"string\">&quot;https://repo.spring.io/libs-release&quot;</span> &#125;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// kotlin标准库支持</span></span><br><span class=\"line\">    compile <span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 编译成java8规范字节码</span></span><br><span class=\"line\">    compile <span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...其它依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.献上代码<br><a href=\"https://github.com/GradleCN/GradleSide/tree/master/14-kotlin/00-spring_boot\">https://github.com/GradleCN/GradleSide/tree/master/14-kotlin/00-spring_boot</a></p>\n","categories":["Build Tools","Spring"],"tags":["Gradle","Kotlin","Spring boot"]},{"title":"使用Gradle按不同环境打包项目","url":"https://pkaq.org/2017/08/09/envpackage/","content":"<h2><span id=\"0-gai-shu\">0.概述</span><a href=\"#0-gai-shu\" class=\"header-anchor\">#</a></h2><p>在项目开发过程中，开发\\测试\\生产环境都是独立存在的。在上古时代，猿们通过打包时或者开发时手工修改配置文件的方式来区分生产环境和开发环境。显然这种方式是比较低效且lowbee的；到了<code>maven</code>时代，可以通过定义不同的<code>profile</code>来实现对不同环境的打包，这一下把程序猿从关闭/打开不同环境注释的桎梏中解救了出来。<code>Gradle</code>虽然没有<code>maven</code>的<code>profile</code>机制,但仍然可以通过多种方式实现对不同环境的打包。<br>1.通过动态加载不同环境资源文件实现环境包<br>2.通过<code>ConfigSlurper</code>特性实现环境包</p>\n<a id=\"more\"></a>\n\n<h2><span id=\"1-tong-guo-dong-tai-jia-zai-bu-tong-huan-jing-zi-yuan-wen-jian-shi-xian-huan-jing-bao\">1.通过动态加载不同环境资源文件实现环境包</span><a href=\"#1-tong-guo-dong-tai-jia-zai-bu-tong-huan-jing-zi-yuan-wen-jian-shi-xian-huan-jing-bao\" class=\"header-anchor\">#</a></h2><p>根据不同环境的参数建立不同的环境文件，打包时只打包相应的环境文件<br>把环境参数配置到x.properties文件中，打包时从文件中读取相应参数动态修改配置文件<br>下面的姿势是选取的第一种，在src/main/resources按不同环境建立相应的folder,打包时将不需要环境文件排除掉。当然我这里只是一个示例，实际情况可以自行修改代码实现，比如如果不想保留环境目录直接把环境文件打包到src/main/resources，则直接把环境目录追加到srcDir下即可</p>\n<p>执行下面的命令打相关环境的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q -Penv=pro</span><br></pre></td></tr></table></figure>\n<p>可以修改gradle.properties中的env默认值</p>\n<p>gradle.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env</span>=<span class=\"string\">dev   </span></span><br></pre></td></tr></table></figure>\n<p>这种方式是直接将环境包目录下的文件打包到resources根目录下的方式<br>build.gradle   </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;java&#x27;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sourceSets &#123;    </span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        resources &#123;</span><br><span class=\"line\">            srcDir <span class=\"string\">&quot;src/main/resources/$&#123;env&#125;&quot;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            sourceSets.main.resources.srcDirs.each   &#123;      </span><br><span class=\"line\">                it.listFiles().each &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(it.isDirectory()) &#123;        </span><br><span class=\"line\">                        exclude <span class=\"string\">&quot;$&#123;it.name&#125;&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;                   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<p>—————— —————— wei suo fen ge xian —————— ——————</p>\n<p>下面这种是保留环境包目录的方式<br>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sourceSets &#123;    </span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        resources &#123;</span><br><span class=\"line\">            sourceSets.main.resources.srcDirs.each   &#123;      </span><br><span class=\"line\">                it.listFiles().each &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(it.isDirectory() &amp;&amp; it.name != <span class=\"string\">&quot;$&#123;env&#125;&quot;</span>) &#123;</span><br><span class=\"line\">                        println <span class=\"string\">&quot;exclude $&#123;it.name&#125;&quot;</span>       </span><br><span class=\"line\">                        exclude <span class=\"string\">&quot;$&#123;it.name&#125;&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;                   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-li-yong-configslurper-jin-xing-bu-tong-huan-jing-gou-jian\">2.利用ConfigSlurper进行不同环境构建</span><a href=\"#2-li-yong-configslurper-jin-xing-bu-tong-huan-jing-gou-jian\" class=\"header-anchor\">#</a></h2><p>　　除了通过传入参数加载不同目录下的properties文件来实现多环境打包之外,还有一种更便捷的方式来实现这种操作.<br>借助Groovy的<a href=\"http://docs.groovy-lang.org/latest/html/gapi/groovy/util/ConfigSlurper.html#method_detail\">ConfigSlurper</a>特性可以简洁而明快的达到多环境打包的目的.打包时候仅需通过<code>-D</code>参数传入目标环境变量即可如:<code>gradle build -Denv=dev</code>,这里可以通过添加<code>gradle.properties</code>文件设置默认的环境变量值.</p>\n<p>比如当前有如下需求:   </p>\n<ul>\n<li>需要根据传入的变量参数进行不同环境打包</li>\n<li>需要根据不同环境参数改变esources目录下属性文件\\xml文件等文件的内容</li>\n</ul>\n<p>1.与<code>build.gradle</code>平级建立<code>config.groovy</code>,这里的命名可以随意.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environments &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">    dev &#123;</span><br><span class=\"line\">        db &#123;</span><br><span class=\"line\">            username = <span class=\"string\">&quot;dev&quot;</span></span><br><span class=\"line\">            password = <span class=\"string\">&#x27;devpwd&#x27;</span></span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 线上环境</span></span><br><span class=\"line\">    production &#123; </span><br><span class=\"line\">        db &#123;</span><br><span class=\"line\">            username = <span class=\"string\">&quot;prod&quot;</span></span><br><span class=\"line\">            password = <span class=\"string\">&#x27;prodpwd&#x27;</span></span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.修改<code>build.gradle</code></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入ReplaceToken</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tools.ant.filters.ReplaceTokens</span><br><span class=\"line\"><span class=\"comment\">//处理资源文件时进行加载替换</span></span><br><span class=\"line\">processResources &#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;==&gt; Load configuration for $env&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> config =  <span class=\"keyword\">new</span> ConfigSlurper(env).parse(file(<span class=\"string\">&quot;config.groovy&quot;</span>).toURI().toURL()).toProperties()</span><br><span class=\"line\">    </span><br><span class=\"line\">    from(sourceSets.main.resources.srcDirs) &#123;</span><br><span class=\"line\">       filesMatching(<span class=\"string\">&#x27;**/*.properties&#x27;</span>) &#123;</span><br><span class=\"line\">        filter(ReplaceTokens, <span class=\"attr\">tokens:</span> config, <span class=\"attr\">beginToken :</span> <span class=\"string\">&#x27;$&#123;&#x27;</span>, <span class=\"attr\">endToken :</span> <span class=\"string\">&#x27;&#125;&#x27;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　默认情况下<code>ReplaceTokens</code>会将<code>@attribute@</code>的值替换成目标值,这里我们修改占位描述符为<code>$&#123;attribute&#125;</code></p>\n<p>　　经过上面的操作,在执行打包命令时,<code>Gradle</code>会加载<code>config.groovy</code>文件中的配置对<code>src/main/resources</code>资源目录下的资源文件进行替换,注意这里替换的是所有资源文件(properties/xml/txt等)中的占位符,如果只想替换<code>properties</code>文件可以添加过滤限制来实现对部分文件内容的替换   </p>\n<p>法1.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from(sourceSets.main.resources.srcDirs) &#123;</span><br><span class=\"line\">     filesMatching(<span class=\"string\">&#x27;**/*.properties&#x27;</span>) &#123;</span><br><span class=\"line\">      filter(ReplaceTokens, <span class=\"attr\">tokens:</span> config, <span class=\"attr\">beginToken :</span> <span class=\"string\">&#x27;$&#123;&#x27;</span>, <span class=\"attr\">endToken :</span> <span class=\"string\">&#x27;&#125;&#x27;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>法2.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from(sourceSets.main.resources.srcDirs) &#123;</span><br><span class=\"line\">      include <span class=\"string\">&#x27;**/*.properties&#x27;</span>       </span><br><span class=\"line\">      filter(ReplaceTokens, <span class=\"attr\">tokens:</span> config, <span class=\"attr\">beginToken :</span> <span class=\"string\">&#x27;$&#123;&#x27;</span>, <span class=\"attr\">endToken :</span> <span class=\"string\">&#x27;&#125;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码在此:<br><a href=\"https://github.com/GradleCN/GradleSide/tree/master/12-env/02-configfile\">https://github.com/GradleCN/GradleSide/tree/master/12-env/02-configfile</a></p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"Spring Cloud 之服务治理 - Eureka服务发现-生产者","url":"https://pkaq.org/2017/08/07/sc-eurekaprovider/","content":"<p>实现服务发现非常容易，只需要如下几步：</p>\n<a id=\"more\"></a>\n<p>1.添加依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.cloud:spring-cloud-starter-eureka:$&#123;cloud_config&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>\n<p>3.稍作配置<br>在应用上下文(一般是application.yaml)中配置<code>Eureka Server</code>地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:9871/eureka</span></span><br><span class=\"line\"><span class=\"string\">```</span>     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">测试代码</span></span><br><span class=\"line\"><span class=\"string\">```kotlin</span></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"attr\">var discoveryClient:</span> <span class=\"string\">DiscoveryClient?</span> <span class=\"string\">=</span> <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(&quot;/say&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">fun</span> <span class=\"string\">say():</span> <span class=\"string\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;Services: &quot;</span> <span class=\"string\">+</span> <span class=\"string\">discoveryClient!!.services</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>4.启动服务，大功告成</p>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"Spring Cloud 之服务治理 - 搭建高可用的Eureka服务注册中心","url":"https://pkaq.org/2017/08/06/sc-eureka/","content":"<h1><span id=\"spring-cloud-zhi-fu-wu-zhi-li-da-jian-gao-ke-yong-de-eureka-fu-wu-zhu-ce-zhong-xin\">Spring Cloud 之服务治理 - 搭建高可用的Eureka服务注册中心</span><a href=\"#spring-cloud-zhi-fu-wu-zhi-li-da-jian-gao-ke-yong-de-eureka-fu-wu-zhu-ce-zhong-xin\" class=\"header-anchor\">#</a></h1><h2><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h2><p>　　著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。</p>\n<p>　　<code>Eureka Server</code>提供服务注册服务，各个节点启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p>\n<p>　　<code>Eureka</code>看明白了这一点，因此在设计时就优先保证可用性。在此<code>Zookeeper</code>保证的是CP, 而<code>Eureka</code>则是AP。<code>Eureka</code>各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。</p>\n<a id=\"more\"></a>\n<p>在应用启动后，将会向<code>Eureka Server</code>发送心跳,默认周期为30秒，如果<code>Eureka Server</code>在多个心跳周期内没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除(默认90秒)。<br>　　其次，<code>Eureka Client</code>对已经获取到的注册信息也做了30s缓存。即服务通过<code>eureka</code>客户端第一次查询到可用服务地址后会将结果缓存，下次再调用时就不会真正向<code>Eureka</code>发起HTTP请求了。<br>　　再次， 负载均衡组件<code>Ribbon</code>也有30s缓存。**<code>Ribbon</code>会从上面提到的<code>Eureka Client</code>获取服务列表，然后将结果缓存<code>30s</code>。<br>　　最后，如果你并不是在<code>Spring Cloud</code>环境下使用这些组件(<code>Eureka</code>, <code>Ribbon</code>)，你的服务启动后并不会马上向<code>Eureka</code>注册，而是需要等到第一次发送心跳请求时才会注册。心跳请求的发送间隔也是30s。（Spring Cloud对此做了修改，服务启动后会马上注册）<br>　　<code>Eureka Server</code>之间通过复制的方式完成数据的同步，<code>Eureka</code>还提供了客户端缓存机制，即使所有的<code>Eureka Server</code>都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API。<br>　　以上这几个30秒正是官方wiki上写服务注册最长需要2分钟的原因。<code>Eureka</code>通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。<br>　　而<code>Eureka</code>的客户端在向某个<code>Eureka</code>注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台<code>Eureka</code>还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。<br>除此之外，<code>Eureka</code>还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么<code>Eureka</code>就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p>\n<ol>\n<li><code>Eureka</code>不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>\n<li><code>Eureka</code>仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)</li>\n<li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li>\n</ol>\n<p>　　因此， <code>Eureka</code>可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像<code>Zookeeper</code>那样使整个注册服务瘫痪。</p>\n<h2><span id=\"chuang-jian-fu-wu\">创建服务</span><a href=\"#chuang-jian-fu-wu\" class=\"header-anchor\">#</a></h2><p>　　创建一个<code>Eureka</code>服务中心十分简单,只需要引入相关依赖,添加注解,稍作配置即可。<br>1.引入依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.cloud:spring-cloud-starter-eureka-server:$&#123;cloud_eureka&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.添加注解</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>\n<p>3.稍作配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">        <span class=\"comment\">#配置主机名</span></span><br><span class=\"line\">        <span class=\"attr\">hostname:</span> <span class=\"string\">eureka.alpha</span></span><br><span class=\"line\">        <span class=\"attr\">appname:</span> <span class=\"string\">reka-alpha</span></span><br><span class=\"line\">    <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"comment\">#  、在默认设置下，Eureka服务注册中心也会将自己作为客户端来尝试注册它自己，</span></span><br><span class=\"line\">        <span class=\"comment\">#    所以我们需要禁用它的客户端注册行为。</span></span><br><span class=\"line\">        <span class=\"comment\">#    因为当注册中心将自己作为客户端注册的时候，发现在server上的端口被自己占据了，然后就挂了</span></span><br><span class=\"line\">        <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">service-url:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka.alpha:9871/eureka</span></span><br></pre></td></tr></table></figure>\n<p>　　这里访问的是<code>http://eureka.alpha</code>,需要修改<code>hosts</code>文件将<code>eureka.alpha</code>指向<code>127.0.0.1</code>,如果不做指向,这里也可以使用<code>localhost</code>访问,当然,为了后面的高可用配置建议这里做指向.<br>4.启动服务,大功告成</p>\n<p><a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-eureka-server-simple\">代码传送门</a></p>\n<h2><span id=\"gao-ke-yong-pei-zhi\">高可用配置</span><a href=\"#gao-ke-yong-pei-zhi\" class=\"header-anchor\">#</a></h2><p>　　主要是利用多个eureka相互注册,下例用采用三台服务器做集群部署,其中每台<code>eureka</code>服务器向另外两台注册自己的实例.<br>这里需要注意如下几点</p>\n<blockquote>\n<p>1.Eureka Server的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步   </p>\n</blockquote>\n<blockquote>\n<p>2.如果Eureka A的peer指向了B, B的peer指向了C，那么当服务向A注册时，B中会有该服务的注册信息，但是C中没有。也就是说，如果你希望只要向一台Eureka注册其它所有实例都能得到注册信息，那么就必须把其它所有节点都配置到当前Eureka的peer属性中。这一逻辑是在PeerAwareInstanceRegistryImpl#replicateToPeers()方法中实现的：</p>\n</blockquote>\n<p><a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-eureka-server\">代码传送门</a></p>\n<p>示例代码中拆分了三个配置,可以根据这三个配置分别打成jar包运行即可,当然,这里建议配合<code>docker-compose</code>进行编排部署.</p>\n<p>1.在Eureka中，一个<code>instance</code>通过一个<code>eureka.instance.instanceId</code> 来唯一标识，如果这个值没有设置，就采用<code>eureka.instance.metadataMap.instanceId</code>来代替。<code>instance</code>之间通过<code>eureka.instance.appName</code> 来彼此访问，在<code>spring cloud</code>中默认值是<code>spring.application.name</code>,如果没有设置则为<code>UNKNOWN</code>。在实际使用中<code>spring.application.name</code>不可或缺,因为相同名字的应用会被Eureka合并成一个群集。<code>eureka.instance.instanceId</code>也可以不设置，直接使用缺省值(<code>client.hostname:application.name:port</code>)<br>,同一个<code>appName</code>下<code>InstanceId</code>不能相同。</p>\n<p>2.如果 <code>eureka.client.registerWithEureka</code>设置成true（默认值true），应用启动时，会利用指定的<code>eureka.client.serviceUrl.defaultZone</code>注册到对应的Eureka server中。之后每隔30s（通过<code>eureka.instance.leaseRenewalIntervalInSeconds</code>来配置）向<code>Eureka server</code>发送一次心跳，如果<code>Eureka server</code>在90s（通过<code>eureka.instance.leaseExpirationDurationInSeconds</code>配置）内没有收到某个<code>instance</code>发来的心跳就会把这个<code>instance</code>从注册中心中移走。发送心跳的操作是一个异步任务，如果发送失败，则以2的指数形式延长重试的时间，直到达到<code>eureka.instance.leaseRenewalIntervalInSeconds * eureka.client.heartbeatExecutorExponentialBackOffBound</code>这个上限,之后一直以这个上限值作为重试间隔，直至重新连接到<code>Eureka server</code>，并且重新尝试连接到<code>Eureka server</code>的次数是不受限制的。</p>\n<p>3.在<code>Eureka server</code>中每一个<code>instance</code>都由一个包含大量这个<code>instance</code>信息的<code>com.netflix.appinfo.InstanceInfo</code>标识，<code>client</code>向<code>Eureka server</code>发送心跳和更新注册信息是不相同的，InstanceInfo也以固定的频率发送到<code>Eureka server</code>，这些信息在<code>Eureka client</code>启动后的40s（通过<code>eureka.client.initialInstanceInfoReplicationIntervalSeconds</code>配置）首次发送，之后每隔30s(通过<code>eureka.client.instanceInfoReplicationIntervalSeconds</code>配置)发送一次。</p>\n<p>4.如果<code>eureka.client.fetchRegistry</code>设置成true（默认值true），<code>Eureka client</code>在启动时会从<code>Eureka server</code>获取注册信息并缓存到本地，之后只会增量获取信息（可以把<code>eureka.client.shouldDisableDelta</code>设置成false来强制每次都全量获取）。获取注册信息的操作也是一个异步任务，每隔30秒执行一次（通过<code>eureka.client.registryFetchIntervalSeconds</code>配置），如果操作失败，也是以2的指数形式延长重试时间，直到达到<code>eureka.client.registryFetchIntervalSeconds * eureka.client.cacheRefreshExecutorExponentialBackOffBound</code> 这个上限，之后一直以这个上限值作为重试间隔，直至重新获取到注册信息，并且重新尝试获取注册信息的次数是不受限制的。<br>这些任务都是在<code>com.netflix.discovery.DiscoveryClient中启动，spring cloud</code>用<code>org.springframework.cloud.netflix.eureka.CloudEurekaClient</code>对这个类进行了扩展。</p>\n<h2><span id=\"chang-jian-wen-ti\">[常见问题]</span><a href=\"#chang-jian-wen-ti\" class=\"header-anchor\">#</a></h2><p>1.自我保护模式    </p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#x27;RE <span class=\"keyword\">NOT</span>. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE <span class=\"keyword\">NOT</span> BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure>\n<p>默认情况下，如果<code>Eureka Server</code>在一定时间内没有接收到某个微服务实例的心跳，<code>Eureka Server</code>将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与<code>Eureka Server</code>之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。</p>\n<p>Eureka通过“自我保护模式”来解决这个问题——当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，<code>Eureka Server</code>就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该<code>Eureka Server</code>节点会自动退出自我保护模式。</p>\n<p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让<code>Eureka</code>集群更加的健壮、稳定。</p>\n<p>在Spring Cloud中，可以使用<code>eureka.server.enable-self-preservation = false</code> 禁用自我保护模式。</p>\n<p>2.<code>unavailable-replicas</code><br>在配置文件中如果不使用域名的方式，而指定localhost或者ip(127.0.0.1/外网ip)，服务能够正常启动，但分片服务总显示在<code>unavailable-replicas</code>中，因此在host中指定了相应的域名做服务区分</p>\n<p>** 参考 **</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/ityouknow/p/6854805.html\">http://www.cnblogs.com/ityouknow/p/6854805.html</a></li>\n<li><a href=\"https://eacdy.gitbooks.io/spring-cloud-book/content/\">https://eacdy.gitbooks.io/spring-cloud-book/content/</a></li>\n<li><a href=\"http://fengyilin.iteye.com/blog/2367265\">http://fengyilin.iteye.com/blog/2367265</a></li>\n</ul>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"Spring Cloud 之创建配置中心服务 - 请求端","url":"https://pkaq.org/2017/07/18/sc-configclient/","content":"<p>Spring Cloud 之创建配置中心服务-客户端<br>　　各个微服务想要使用配置中心服务非常简单,仅需要在<code>bootstrap.yaml</code>(或<code>.properties</code>)文件中稍作配置即可</p>\n<a id=\"more\"></a>\n<h2><span id=\"1-tian-jia-yi-lai\">1.添加依赖</span><a href=\"#1-tian-jia-yi-lai\" class=\"header-anchor\">#</a></h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`org.springframework.<span class=\"attr\">cloud:</span>spring-cloud-starter-<span class=\"attr\">config:</span>$&#123;cloud_config&#125;`</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-pei-zhi-shang-xia-wen\">2.配置上下文</span><a href=\"#2-pei-zhi-shang-xia-wen\" class=\"header-anchor\">#</a></h2><p><code>bootstrap.yaml</code>中添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">application:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">config-client</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置中心地址</span></span><br><span class=\"line\">            <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">            <span class=\"comment\"># 要应用的配置文件</span></span><br><span class=\"line\">            <span class=\"attr\">profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">            <span class=\"comment\"># 要读取的配置文件名</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">bravo</span></span><br><span class=\"line\">            <span class=\"comment\"># 对应服务端security设置的用户名密码</span></span><br><span class=\"line\">            <span class=\"attr\">username:</span> <span class=\"string\">pkaq</span></span><br><span class=\"line\">            <span class=\"attr\">password:</span> <span class=\"string\">pkaqx</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这里是<code>bootstrap.yml</code>而不是<code>appliction.yml</code>,因为<code>bootstrap.yml</code>会在应用启动之前读取, 而<code>spring.cloud.config.uri</code>会影响应用启动,关于上下文可参见如下内容.</p>\n</blockquote>\n<h3><span id=\"2-1-qi-dong-shang-xia-wen\">2.1 启动上下文</span><a href=\"#2-1-qi-dong-shang-xia-wen\" class=\"header-anchor\">#</a></h3><p>　　Spring Cloud会创建一个<code>Bootstrap Context</code>，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。<code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，而不是使用<code>application.yml</code> (或者<code>application.properties</code>)。保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p>\n<p>　　推荐在<code>bootstrap.yml</code> or <code>application.yml</code>里面配置<code>spring.application.name</code>. 你可以通过设置<code>spring.cloud.bootstrap.enabled=false</code>来禁用<code>bootstrap</code>。</p>\n<h3><span id=\"2-2-ying-yong-shang-xia-wen-ceng-ci-jie-gou\">2.2 应用上下文层次结构</span><a href=\"#2-2-ying-yong-shang-xia-wen-ceng-ci-jie-gou\" class=\"header-anchor\">#</a></h3><p>　　如果你通过<code>SpringApplication</code>或者<code>SpringApplicationBuilder</code>创建一个<code>Application Context</code>,那么会为spring应用的<code>Application Context</code>创建父上下文<code>Bootstrap Context</code>。在Spring里有个特性，子上下文会继承父类的<code>property sources</code> and <code>profiles</code> ，所以<code>main application context</code> 相对于没有使用Spring Cloud Config，会新增额外的<code>property sources</code>。额外的<code>property sources</code>有：</p>\n<ul>\n<li>“bootstrap” : 如果在<code>Bootstrap Context</code>扫描到<code>PropertySourceLocator</code>并且有属性，则会添加到<code>CompositePropertySource</code>。<code>Spirng Cloud Config</code>就是通过这种方式来添加的属性的，详细看源码<code>ConfigServicePropertySourceLocator</code>。下面也也有一个例子自定义的例子。</li>\n<li>“applicationConfig: [classpath:bootstrap.yml]” ，（如果有<code>spring.profiles.active=production</code>则例如 <code>applicationConfig: [classpath:/bootstrap.yml]#production）</code>: 如果你使用<code>bootstrap.yml</code>来配置<code>Bootstrap Context</code>，他比<code>application.yml</code>优先级要低。它将添加到子上下文，作为Spring Boot应用程序的一部分。下文有介绍。<br>　　由于优先级规则，<code>Bootstrap Context</code>不包含从<code>bootstrap.yml</code>来的数据，但是可以用它作为默认设置。</li>\n</ul>\n<blockquote>\n<p><code>bootstrap.yml</code>是由<code>spring.cloud.bootstrap.name</code>（默认:”bootstrap”）或者<code>spring.cloud.bootstrap.location</code>（默认空）</p>\n</blockquote>\n<p><strong>覆盖远程属性</strong> </p>\n<p>　　<code>property sources</code>被<code>bootstrap context</code> 添加到应用通常通过远程的方式，比如”Config Server”。默认情况下，本地的配置文件不能覆盖远程配置，但是可以通过启动命令行参数来覆盖远程配置。如果需要本地文件覆盖远程文件，需要在远程配置文件里设置授权<br><code>spring.cloud.config.allowOverride=true</code>（这个配置不能在本地被设置）。一旦设置了这个权限，你可以配置更加细粒度的配置来配置覆盖的方式，</p>\n<p>比如： </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"comment\"># 覆盖任何本地属性 </span></span><br><span class=\"line\">            <span class=\"attr\">overrideNone:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">            <span class=\"comment\"># 仅仅系统属性和环境变量 </span></span><br><span class=\"line\">            <span class=\"attr\">overrideSystemProperties:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>源文件见PropertySourceBootstrapPropertie</p>\n<h2><span id=\"3-qi-dong-fu-wu-da-gong-gao-cheng\">3.启动服务,大功告成.</span><a href=\"#3-qi-dong-fu-wu-da-gong-gao-cheng\" class=\"header-anchor\">#</a></h2><p>端口号采用配置中心相应配置文件的端口<br>启动后访问 <a href=\"http://localhost:port/say\">http://localhost:port/say</a></p>\n<p>** <a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-config-client\">示例代码</a> ** </p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"http://cloud.spring.io/spring-cloud-static/Dalston.SR3/\">http://cloud.spring.io/spring-cloud-static/Dalston.SR3/</a></li>\n</ul>\n","categories":["微服务","Spring"],"tags":["Spring Boot","Spring Cloud"]},{"title":"Spring Cloud 之创建配置中心服务 - 发布端","url":"https://pkaq.org/2017/07/17/sc-configserver/","content":"<p>在开发微服务时,各个服务有一些共同的配置,若是几十个微服务那么便需要将这些配置复制几十份.在开发过程中,对这些配置文件的编辑维护是一件十分麻烦的事情,若是可以对这些公用配置进行统一配置无疑将会极大减轻维护的难度和工作量,借助spring提供的配置中心服务可以对这些公共配置进行统一管理,具体操作如下</p>\n<a id=\"more\"></a>\n\n<h2><span id=\"1-chuang-jian-pei-zhi-zhong-xin-cang-ku\">1 创建配置中心仓库</span><a href=\"#1-chuang-jian-pei-zhi-zhong-xin-cang-ku\" class=\"header-anchor\">#</a></h2><p>　　略</p>\n<h2><span id=\"2-chuang-jian-pei-zhi-zhong-xin-wen-jian\">2 创建配置中心文件</span><a href=\"#2-chuang-jian-pei-zhi-zhong-xin-wen-jian\" class=\"header-anchor\">#</a></h2><p>　　其中<code>spring.cloud.config.server.git.uri</code>支持如下几种方式进行配置</p>\n<h3><span id=\"2-1-ban-ben-kong-zhi-xi-tong-git-svn\">2.1 版本控制系统(git,svn)</span><a href=\"#2-1-ban-ben-kong-zhi-xi-tong-git-svn\" class=\"header-anchor\">#</a></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">   <span class=\"attr\">cloud:</span></span><br><span class=\"line\">     <span class=\"attr\">config:</span>          </span><br><span class=\"line\">       <span class=\"attr\">server:</span></span><br><span class=\"line\">         <span class=\"attr\">git:</span></span><br><span class=\"line\">           <span class=\"attr\">uri:</span> <span class=\"string\">https://git.oschina.net/pkaq/spring-cloud-7simple.git</span></span><br><span class=\"line\">           <span class=\"comment\"># 从该库下的cloud-cconig-repo路径下加载,这里如果需要配置多个可以用`,`分隔开</span></span><br><span class=\"line\">  <span class=\"attr\">search-paths:</span> <span class=\"string\">cloud-config-repo</span></span><br></pre></td></tr></table></figure>\n<p>　　如果采用的<code>svn</code>作为版本控制,只需要将<code>git</code>节点替换为<code>svn</code>即可</p>\n<p>　　伴随着版本控制系统作为后端(<code>git</code> <code>svn</code>，文件都会被<code>check out</code>或<code>clone</code>到本地文件系统中. 默认这些文件会被放置到以<code>config-repo-</code>为前缀的系统临时目录中.在 <code>linux</code> 譬如应该是 <code>/tmp/config-repo-&lt;randomid&gt;</code>录.这会导致不可预知的问题出现.为了避免这个问题,通过设置<code>spring.cloud.config.server.git.basedir</code>参数值为非系统临时目录.</p>\n<h4><span id=\"2-1-1-ren-zheng-pei-zhi\">2.1.1 认证配置</span><a href=\"#2-1-1-ren-zheng-pei-zhi\" class=\"header-anchor\">#</a></h4><ul>\n<li><h5><span id=\"a-http-ren-zheng\">[a].http认证</span><a href=\"#a-http-ren-zheng\" class=\"header-anchor\">#</a></h5>对于需要进行认证的远程配置库,可以使用HTTP的 basic authentication 方法进行认证,只需要添加<code>username</code>,<code>password</code> 属性即可<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/pkaq/springcloud7.git</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">tiger</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">scott</span></span><br></pre></td></tr></table></figure></li>\n<li><h5><span id=\"b-ssh-ren-zheng\">[b].ssh认证</span><a href=\"#b-ssh-ren-zheng\" class=\"header-anchor\">#</a></h5>　　这个比较简单,只要将<code>uri</code>中的地址换成对应的ssh地址,并且保证你本地<code>~/.ssh</code>目录中存储好认证的<code>key</code>即可</li>\n</ul>\n<h3><span id=\"2-1-2-mo-shi-pi-pei-duo-ge-cang-ku\">2.1.2 模式匹配多个仓库</span><a href=\"#2-1-2-mo-shi-pi-pei-duo-ge-cang-ku\" class=\"header-anchor\">#</a></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">        <span class=\"comment\"># 远程仓库地址</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/pkaq/springcloud7.git</span></span><br><span class=\"line\">        <span class=\"comment\"># 子目录</span></span><br><span class=\"line\">          <span class=\"attr\">search-paths:</span> <span class=\"string\">cloud-config-repo</span></span><br><span class=\"line\">        <span class=\"comment\"># 在启动时就下载配置文件</span></span><br><span class=\"line\">          <span class=\"attr\">clone-on-start:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\"># 读取配置超时时间 默认5s</span></span><br><span class=\"line\">          <span class=\"attr\">timeout:</span> <span class=\"number\">15</span></span><br><span class=\"line\">        <span class=\"comment\"># 强制读取远程版本(当本地版本被篡改时仍然保证使用远程副本)</span></span><br><span class=\"line\">          <span class=\"attr\">force-pull:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\"># 禁止调用端覆盖此属性</span></span><br><span class=\"line\">          <span class=\"attr\">overrides:</span></span><br><span class=\"line\">            <span class=\"attr\">foo:</span> <span class=\"string\">bar</span></span><br><span class=\"line\"><span class=\"comment\">#          多仓库配置</span></span><br><span class=\"line\">          <span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"comment\">#            别名,随意</span></span><br><span class=\"line\">            <span class=\"attr\">repo-a:</span></span><br><span class=\"line\"><span class=\"comment\">#               匹配符</span></span><br><span class=\"line\">               <span class=\"attr\">pattern:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;bravo*&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#               仓库地址</span></span><br><span class=\"line\">               <span class=\"attr\">uri:</span> <span class=\"string\">http://git/config-repo.git</span></span><br><span class=\"line\">            <span class=\"attr\">repo-b:</span></span><br><span class=\"line\">               <span class=\"attr\">pattern:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;alpha*&#x27;</span></span><br><span class=\"line\">               <span class=\"attr\">uri:</span> <span class=\"string\">file://D:/git/spring-cloud-7simple</span></span><br></pre></td></tr></table></figure>\n<p>　　客户端可以通过<code>spring.application.name</code>或<code>spring.cloud.config.name</code>来多个库中的<code>application</code>部分描述,通过<code>spring.cloud.config.profile</code>配置<code>profile</code>部分的描述.如果加载不到响应的配置文件则从<code>git.uri</code>下进行加载.</p>\n<blockquote>\n<p>注意:添加多个模式库配置后,直接通过浏览器访问配置中心服务会将默认配置也加载出来</p>\n</blockquote>\n<h3><span id=\"2-1-3-clone-on-start\">2.1.3 clone-on-start</span><a href=\"#2-1-3-clone-on-start\" class=\"header-anchor\">#</a></h3><p>　　默认情况下,配置服务会在配置文件第一次被请求时<code>clone</code>远程的配置库.当然也可以配置为在启动时clone远程的配置库<br>只需要配置<code>spring.cloud.config.server.git.clone-on-start</code>为<code>true</code>即可</p>\n<h3><span id=\"2-2-native-filesystem\">2.2 native filesystem</span><a href=\"#2-2-native-filesystem\" class=\"header-anchor\">#</a></h3><p>　　可以通过采用本地文件系统的方式访问配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span>      </span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">native:</span></span><br><span class=\"line\">          <span class=\"attr\">search-locations:</span> <span class=\"string\">file:///$&#123;path&#125;/config-repo</span></span><br></pre></td></tr></table></figure>\n<p>　　可支持以<code>[classpath:/, classpath:/config,file:./, file:./config]</code>等方式加载</p>\n<blockquote>\n<p>p.s:注意,这里有个坑<code>win</code>下<code>file</code>后需要多加个<code>/</code>即,<code>file:///$&#123;path&#125;/config-repo</code></p>\n</blockquote>\n<h3><span id=\"2-3-vault\">2.3 vault</span><a href=\"#2-3-vault\" class=\"header-anchor\">#</a></h3><p>　　可以通过<code>spring.cloud.config.server.vault</code>节点对<code>vault</code>方式进行配置</p>\n<h2><span id=\"3-shi-yong-enableconfigserver-zhu-jie-fa-bu-pei-zhi-fu-wu\">3 使用<code>@EnableConfigServer</code>注解发布配置服务</span><a href=\"#3-shi-yong-enableconfigserver-zhu-jie-fa-bu-pei-zhi-fu-wu\" class=\"header-anchor\">#</a></h2><p>1.添加 <code>spring-cloud-config-server</code> 相关依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.cloud:spring-cloud-config-server:1.5.6.RELEASE&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2.在你的<code>spring boot</code>启动类上添加<code>@EnableConfigServer</code>注解<br>3.启动服务,大功告成.</p>\n<blockquote>\n<p>p.s:<code>application.properties, application.yml, application-*.properties</code>这类配置文件都会通过服务发布出去.但是,当采用<code>native filesystem</code>方式时,<code>application*</code>此类文件不会被发布.</p>\n</blockquote>\n<h2><span id=\"4-fang-wen-pei-zhi\">4 访问配置</span><a href=\"#4-fang-wen-pei-zhi\" class=\"header-anchor\">#</a></h2><p>　　可以通过如下规则对配置资源进行访问读取<code>profile</code>的优先级,激活的profiles的优先级高于defaults,有多个profiles,最后一个起作用。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span></span><br><span class=\"line\"><span class=\"string\">/&#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class=\"line\"><span class=\"string\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class=\"line\"><span class=\"string\">/&#123;application&#125;-&#123;profile&#125;.properties</span></span><br><span class=\"line\"><span class=\"string\">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span></span><br></pre></td></tr></table></figure>\n<p><img src=\".%5Csc-configserver%5Cconfigserver.png\" alt=\"配置资源规则\"></p>\n<blockquote>\n</blockquote>\n<ul>\n<li><code>application</code>:<code>client</code>可以通过<code>spring.config.name</code>进行配置,默认为<code>application</code>;</li>\n<li><code>profile</code>:为配置名称,对应<code>sprng.profiles.active</code>配置;</li>\n<li><code>label</code>:可选项 ，git分支名称或者tag名称,默认为<code>master</code>;如果git分支或tag的名称包含一个斜杠 (“/“),此时HTTP URL中的label需要使用特殊字符串”(_)”来替代(为了避免与其他URL路径相互混淆)</li>\n</ul>\n<h2><span id=\"5-jian-kang-jian-cha\">5 健康检查</span><a href=\"#5-jian-kang-jian-cha\" class=\"header-anchor\">#</a></h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">health:</span></span><br><span class=\"line\">          <span class=\"attr\">repositories:</span></span><br><span class=\"line\">            <span class=\"attr\">myservice:</span></span><br><span class=\"line\">              <span class=\"attr\">label:</span> <span class=\"string\">mylabel</span></span><br><span class=\"line\">            <span class=\"attr\">myservice-dev:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myservice</span></span><br><span class=\"line\">              <span class=\"attr\">profiles:</span> <span class=\"string\">development</span></span><br><span class=\"line\"><span class=\"string\">```</span>              </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">可以通过设置`spring.cloud.config.server.health.enabled=false`</span> <span class=\"string\">来禁用运行状况指示器。</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 6 安全配置   </span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"string\">为了保证配置中心配置项的安全性,通常需要对访问进行限制,可以借助spring-ssecurity,对配置中心服务添加身份认证.</span></span><br><span class=\"line\">　　<span class=\"number\">1</span><span class=\"string\">.需要添加`spring-boot-starter-security`依赖包</span></span><br><span class=\"line\">　　<span class=\"number\">2</span><span class=\"string\">.进行安全认证配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```yml</span></span><br><span class=\"line\"><span class=\"comment\"># 访问认证</span></span><br><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">  <span class=\"attr\">basic:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pkaq</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">pkaqx</span></span><br></pre></td></tr></table></figure>\n<p>** <a href=\"https://github.com/pkaq/springcloud7/tree/master/cloud-config-server\">示例代码</a> ** </p>\n<p>** 参考 **</p>\n<ul>\n<li><a href=\"http://cloud.spring.io/spring-cloud-static/Dalston.SR3/\">http://cloud.spring.io/spring-cloud-static/Dalston.SR3/</a></li>\n</ul>\n","categories":["微服务","Spring"],"tags":["Spring Cloud","微服务"]},{"title":"使用yarn替代npm","url":"https://pkaq.org/2017/01/20/yarn/","content":"<p>强烈安利一波yarn,yarn默认就有锁定文件、更快速地安装依赖以及依赖的更新会自动同步到 package.json 文件中。从npm迁移过来根本不需要做什么,原有的package.json直接可用</p>\n<p>注意 以下内容摘自 : <a href=\"https://segmentfault.com/a/1190000007189426\">https://segmentfault.com/a/1190000007189426</a></p>\n<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\">#</a></h2><p>1.如果原先有npm工具的话，安装yarn很简单，只需要一行命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yarn</span><br></pre></td></tr></table></figure>\n<p>2.如果没有npm工具，安装yarn可参照 -&gt; <a href=\"https://yarnpkg.com/en/docs/install\">各平台下yarn工具安装方式</a></p>\n<a id=\"more\"></a>\n<h2><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\">#</a></h2><p>安装yarn之后默认的包安装源是 <a href=\"https://registry.yarnpkg.com,可用查看命令/\">https://registry.yarnpkg.com，可用查看命令</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config get registry</span><br></pre></td></tr></table></figure>\n<p>若想提高yarn安装的速度，可将包安装源修改为cnpm的安装源，执行以下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry <span class=\"string\">&#x27;https://registry.npm.taobao.org&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\">#</a></h2><p>1.初始化某个项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br><span class=\"line\">yarn init</span><br></pre></td></tr></table></figure>\n<p>2.默认的安装依赖操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install/link</span><br><span class=\"line\">yarn install/link</span><br></pre></td></tr></table></figure>\n<p>3.安装某个依赖，并且默认保存到package</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install xxx —save</span><br><span class=\"line\">yarn add xxx</span><br></pre></td></tr></table></figure>\n<p>4.移除某个依赖项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall xxx —save</span><br><span class=\"line\">yarn remove xxx</span><br></pre></td></tr></table></figure>\n<p>5.安装某个开发时依赖项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev xxx </span><br><span class=\"line\">yarn add xxx —dev</span><br></pre></td></tr></table></figure>\n<p>6.更新某个依赖项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update --save xxx</span><br><span class=\"line\">yarn upgrade xxx</span><br></pre></td></tr></table></figure>\n<p>7.安装某个全局依赖项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g xxx </span><br><span class=\"line\">yarn global add xxx</span><br></pre></td></tr></table></figure>\n<p>8.发布/登录/登出，一系列NPM Registry操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish/login/<span class=\"built_in\">logout</span></span><br><span class=\"line\">yarn publish/login/<span class=\"built_in\">logout</span></span><br></pre></td></tr></table></figure>\n<p>9.运行某个命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run/<span class=\"built_in\">test</span></span><br><span class=\"line\">yarn run/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n","categories":["Build Tools","前端"],"tags":["yarn"]},{"title":"采用Gradle快速构建基于Spring boot的MVC应用","url":"https://pkaq.org/2016/12/13/springboot-gradle/","content":"<p><code>Spring boot</code>是用以简化<code>Spring</code>配置开发的一枚框架，采用<code>Spring boot</code>可以抛弃繁琐的XML配置，采用<code>JavaConfigure</code>的方式进行快速配置。同时该框架提供了包含预配置的众多的<code>starter</code>可以极大的简化配置工作量。下面的代码便是采用<code>web-starter</code>和<code>Gradle</code>进行快速创建一个mvc应用的示例。</p>\n<a id=\"more\"></a>\n<h4><span id=\"mu-lu-jie-gou\">目录结构</span><a href=\"#mu-lu-jie-gou\" class=\"header-anchor\">#</a></h4><p><img src=\"structure.jpg\"></p>\n<h4><span id=\"yin-ru-yi-lai\">引入依赖</span><a href=\"#yin-ru-yi-lai\" class=\"header-anchor\">#</a></h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&quot;war&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 版本号</span></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    bootVersion = <span class=\"string\">&quot;1.4.2.RELEASE&quot;</span></span><br><span class=\"line\">    tomcat_embed = <span class=\"string\">&quot;8.5.4&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 仓库配置</span></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123; url<span class=\"string\">&quot;https://repo.spring.io/libs-release&quot;</span> &#125;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 依赖配置</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web:$&#123;bootVersion&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;org.apache.tomcat.embed:tomcat-embed-jasper:$&#123;tomcat_embed&#125;&quot;</span>            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"ge-xing-hua-pei-zhi\">个性化配置</span><a href=\"#ge-xing-hua-pei-zhi\" class=\"header-anchor\">#</a></h4><p>　　如果你采用的是标准目录结构，那么可以通过在<code>src/main/resources</code>下创建<code>application.yaml</code>文件对预配置项进行修改，无论是在<code>IDEA</code>还是在<code>STS</code>中，编辑此文件输入<code>spring.</code>都会有相应的代码提示，相关配置项的名字基本也是见名知意，大家可以自己去体会一下。当然你也可以<code>ctrl+click</code>查看下源码做深入了解。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">date-format:</span> <span class=\"string\">yyyy-MM-dd</span></span><br><span class=\"line\">    <span class=\"attr\">view:</span></span><br><span class=\"line\">       <span class=\"attr\">prefix:</span> <span class=\"string\">/WEB-INF/web/</span></span><br><span class=\"line\">       <span class=\"attr\">suffix:</span> <span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"qi-dong-lei-pei-zhi\">启动类配置</span><a href=\"#qi-dong-lei-pei-zhi\" class=\"header-anchor\">#</a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Booter</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 入口函数.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Booter.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;  --- --- --- [ web started ] --- --- ---  &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"yi-ge-shi-li-controller\">一个示例controller</span><a href=\"#yi-ge-shi-li-controller\" class=\"header-anchor\">#</a></h4><p>　　这里需要注意，如果没有配置 <code>ComponentScan</code> 指定扫描的包，<code>controller</code> 应该放在启动类的同级或者子包下，否则无法扫描到相应的Bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/tiger&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">tiger</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;Tiger&quot;</span>,<span class=\"string\">&quot;tigerName&quot;</span>,<span class=\"string\">&quot;Scott&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"view-ye-mian\">view页面</span><a href=\"#view-ye-mian\" class=\"header-anchor\">#</a></h4><p>　　无他，JSP尔。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello Spring MVC&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">Tiger<span class=\"string\">&#x27;s name is : $&#123;tigerName&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>","categories":["Build Tools","Spring"],"tags":["Gradle","Spring Boot"]},{"title":"使用Gradle进行多模块项目构建","url":"https://pkaq.org/2016/12/13/gradle-multi/","content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#gai-shu\">概述</a></li>\n<li><a href=\"#xiang-mu-jie-gou\">项目结构</a></li>\n<li><a href=\"#settings-wen-jian\">settings文件</a></li>\n<li><a href=\"#build-wen-jian\">build文件</a></li>\n<li><a href=\"#fen-chi-pei-zhi\">分离配置</a></li>\n<li><a href=\"#shui-ping-bu-ju-he-fen-ceng-bu-ju\">水平布局和分层布局</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"gai-shu\">概述</span><a href=\"#gai-shu\" class=\"header-anchor\">#</a></h3><p>　　随着项目规模的扩展和功能的增加，任何一个简单的项目基本都会进行模块的拆分独立，然后通过项目之间的依赖进行重新整合。</p>\n<p>　　项目拆分带来的好处也显而易见。拆分可以是项目结构更加清晰，职责划分更加明确，相关模块的负责人只需专注于自己负责的子模块而无需对整个项目进行一次构建。　　</p>\n<p>　　如果不采用构建工具或许最原始的方式无非于将一些相对独立的和公共的模块代码拆分成独立项目，通过手工打jar包替换的方式进行多项目之间的依赖管理，这无疑是低效、繁琐且没有价值的工作。</p>\n<a id=\"more\"></a>\n\n<p>　　Gradle对多模块项目有着优秀的支持，现在借助于Gradle可以把你从一些低价值的劳动中解放出来。你可以肆意的采用水平或者分层的方式组织你的项目模块，肆意的进行模块之间的依赖，甚至是模块之间深层次的依赖。举个栗子，如果有个web工程依赖于一个<code>util</code>工程和一个<code>common-service</code>工程，那么当<code>util</code>和<code>common-service</code>进行了任何修改，在web工程进行打包的时候会自动编译打包依赖的<code>util</code>和<code>common-service</code>工程，如果你采用了合理的<code>依赖声明</code>那么在发布war的时候这两个工程的会被自动打成<code>jar</code>包打进最终的<code>war</code>中。<br>  这一章节你将会了解到如下内容</p>\n<ul>\n<li>多模块项目结构</li>\n<li>多模块项目脚本</li>\n<li>构建分层布局的多模块项目</li>\n<li>构建集中化配置的多模块项目</li>\n</ul>\n<h3><span id=\"xiang-mu-jie-gou\">项目结构</span><a href=\"#xiang-mu-jie-gou\" class=\"header-anchor\">#</a></h3><p>　　在进行介绍之前，这里有必要先解释一下项目（project）和模块（module）的概念。Gradle中默认是不存在模块概念的，这里指的多模块项目构建对应到Gradle中即是<code>多项目构建</code>，为了便于理解，所以本文中一律按多模块进行描述。</p>\n<blockquote>\n<p>关于多项目和多模块的分歧无法溯源，或许是由于<code>eclipse</code>和<code>idea</code>不同定义而起吧。在<code>eclipse</code>中不存在模块概念，走的是<code>workspace - working set - project</code>路线，而在<code>idea</code>中，则是按<code>project - module</code>进行组织项目。自从转为<code>idea</code>党之后，私以为<code>idea</code>的路子更科学，所以这里按<code>idea</code>的套路进行描述。   </p>\n</blockquote>\n<p>下面展示了分层布局和水平布局的两种多模块项目结构<br><img src=\"structure.jpg\" alt=\"多模块项目结构\">　　　　<br><img src=\"structure-flat.jpg\" alt=\"多模块项目结构\">　　</p>\n<p>　　为了更加直观，这里项目结构采用了分层布局的方式。这也是Gradle默认的布局方式。这里根项目是必不可少的，尽管在分层布局中它看上去更像是一个顶级的<code>working set</code>。其中根项目下的<code>build.gradle</code>文件可以对一些公共属性、插件、依赖等进行统一配置，<code>setting.gradle</code>则是描述项目关系的文件。<br>　　或许你已经注意到，在水平布局的示例图中子项目下没有<code>build.gradle</code>脚本文件,这是由于在构建多模块项目时 Gradle 允许你自由的选用集中化配置和分开式配置。在水平布局的结构图中，所画的即是采用集中化配置的结构。</p>\n<h3><span id=\"settings-wen-jian\">settings文件</span><a href=\"#settings-wen-jian\" class=\"header-anchor\">#</a></h3><p>　　我们了解到一个典型的多模块项目需要有一个根模块项目以及模块描述文件(默认为<code>settings.gradle</code>)，下面我们将通过一个 <a href=\"https://github.com/GradleCN/GradleSide/tree/master/17-multi-project-central\">多项目示例</a> 来对多模块项目的结构以及脚本进行更深入的了解。</p>\n<p>如果要让 <code>Gradle</code> 支持多<br>构建，只需为你的项目确定一个 根模块项目 并且在根模块项目下添加 <code>settings.gradle</code> 文件用以描述模块（项目）关系</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include <span class=\"string\">&#x27;base&#x27;</span>,<span class=\"string\">&#x27;main&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>　　这里将模块（项目）名称路径的字符串以数组的形式传递给了<code>include</code>函数，Gradle 会以相对于当前目录按照 include 给定的模块（项目）路径查找对应的子模块，如果要声明的模块（项目）有多个层次可以用<code>:</code>进行描述，假设<code>main</code>下面又分了<code>Alpha</code>,<code>Bravo</code> 那么声明方式则按如下方式书写</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include <span class=\"string\">&#x27;base&#x27;</span>,<span class=\"string\">&#x27;main:Alpha&#x27;</span>,<span class=\"string\">&#x27;main:Bravo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>　　这里的 <code>settings</code> 文件实际上是对应的 <code>Settings</code> 接口，<code>Setitings</code> 接口中提供的函数在本脚本中都是可用的，具体细节请查阅 <a href=\"https://docs.gradle.org/current/dsl/\">&gt;Settins接口DSL&lt;</a> 文档进行了解。</p>\n<p>　　在构建的 <strong>初始化阶段</strong>，Gradle 会读取这个文件，并创建一个 Settings 类型的实例。Gradle 会依据此文件进行多模块项目构建，默认情况下 Gradle 会从同级的 master 目录下寻找此文件，如果未找到则会去父级目录寻找。如果搜寻不到 <code>settings</code> 文件，那么 Gradle 会把模块当做单独构建的项目去执行单独构建。这里 Gradle 提供了一个命令行参数 <code>-u</code> 或 <code>--no-search-upward</code> 来控制 Gradle 不去父目录搜寻 <code>settings</code> 文件。</p>\n<p>　　默认情况下，Gradle 会采用<code>settings.gradle</code>作为文件名去查找，但如果处于某种不可描述的原因要采用其它名称的话也是可以的，调用命令时可以通过<code>-c</code>或者<code>--settings-file</code>参数来指定<code>settings</code>文件的位置以及名称。</p>\n<blockquote>\n<p>tip: 通常情况下，不存在孤立的子模块，所以构建的执行顺序往往是由依赖顺序所决定的。但如果无法通过依赖顺序决定，那么 Gradle 会简单的按照首字母顺序决定构建顺序。</p>\n</blockquote>\n<h3><span id=\"build-wen-jian\">build文件</span><a href=\"#build-wen-jian\" class=\"header-anchor\">#</a></h3><p>　　在根项目下，除了 <code>settings.gradle</code> 文件之外，通常还需要提供一个 <code>build.gradle</code> 文件，该文件用以定义子模块行为以及描述项目的一些公共插件、属性、依赖等。</p>\n<p>　　下面的示例中，定义了所有模块共享的group、版本号，所有子模块共享的插件，以及针对<code>main</code>项目的定制化配置。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有模块都采用统一的版本号以及groupName</span></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    group = <span class=\"string\">&#x27;org.pkaq.gradle.multi&#x27;</span></span><br><span class=\"line\">    version = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为所有子模块都应用java插件</span></span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">   apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为main模块定义特定行为,采用war插件并且依赖base模块</span></span><br><span class=\"line\">project(<span class=\"string\">&#x27;:main&#x27;</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tapply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;war&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">    \tcompile  project(<span class=\"string\">&#x27;:base&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　如果您阅读了上一小节，<code>settings</code>文件是对<code>Settings</code>接口的脚本化编程实现，那么此处同理，借由 <code>Project</code> API，可对模块的行为进行定制。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>allprojects</td>\n<td>配置当前模块以及所有子模块行为</td>\n</tr>\n<tr>\n<td>subprojects</td>\n<td>配置所有子模块行为</td>\n</tr>\n<tr>\n<td>project</td>\n<td>配置指定子模块行为</td>\n</tr>\n</tbody></table>\n<p>　　可以查阅　<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.Project.html\">&gt; Project DSL &lt;</a> 了解 Project 接口的更多操作。</p>\n<p>　　此时可以通过执行  <code> gradle build </code> 来进行构建，这会按照依赖的顺序构建所有子模块，如果要单独构建某个子模块那么可以参照 <code>gradle :main:build</code> 的方式进行单独构建，正如你所见用<code>:</code>分隔项目和<code>task</code>即可。</p>\n<h3><span id=\"fen-chi-pei-zhi\">分离配置</span><a href=\"#fen-chi-pei-zhi\" class=\"header-anchor\">#</a></h3><p>　　当项目足够复杂的时候，采用集中化配置显然不是一个好计谋，尤其是如果你有几十个模块的的时候，当你打开一个几百行的脚本无疑会感到一种不由自主的恶心在背后拍拍你的肩膀说:”兄弟 吐吧”….<br>　　此时，将不同项目的定制行为分离到各自的脚本里无疑会显著的减轻你的饱腹感。这不仅可以是项目结构看起来更加清晰，脚本更加易读，分离化的配置还可以让你更好的关注子模块的特定行为。<br>　　要分离模块配置只需要很简单的两步：</p>\n<ol>\n<li>在子模块建立 <code>build.gradle</code> 文件</li>\n<li>将原来的 <code>project(&#39;:xxx&#39;)&#123;&#125;</code> 内的脚本移动到上面建立的文件中去</li>\n</ol>\n<p>　　下面的图展示了一个稍微复杂一点的<code>分层布局的</code>、<code>多模块的</code>、<code>分离配置的</code> 的多模块项目示例，其中所有的二级模块都依赖<code>base</code>，最终的<code>weball</code>又依赖于所有的二级模块。<br> 具体代码可以查看 <a href=\"https://github.com/GradleCN/GradleSide/tree/master/01-multi-project\">&gt; 就是这里 &lt;</a><br><img src=\"multi.jpg\"></p>\n<h3><span id=\"shui-ping-bu-ju-he-fen-ceng-bu-ju\">水平布局和分层布局</span><a href=\"#shui-ping-bu-ju-he-fen-ceng-bu-ju\" class=\"header-anchor\">#</a></h3><p>　　如果你阅读了前面的内容，那么你已经掌握了分层布局。没错，Gradle 默认即是采用的分层布局。只需要正确的配置 <code>settings</code> 文件即可。<br>　　某些情况下，若是出于一些不可描述的原因需要进行水平布局，那么 Gradle 也提供了良好的支持。如果你之前曾经翻阅过 <code>Settings</code> 接口的手册，那么或许你已经发现<code>Settintgs</code>接口提供了一个<code>includeFlat</code>方法，借助此方法即可实现水平布局的多模块项目。<br>  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">includeFlat  <span class=\"string\">&#x27;base&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>由于此处<code>main</code>即是根项目，所以无需再包含<code>main</code></p>\n<p>完整示例 -&gt;　<a href=\"https://github.com/GradleCN/GradleSide/tree/master/16-multi-project-flat\"> &gt; 水平布局的多模块项目示例 &lt; </a></p>\n<p>心法在于两点:</p>\n<p> 1.根项目与被依赖的项目(在水平意义上的子项目,视觉上根项目的兄弟项目)保持平级。<br> 2.配置根项目的  setting.gradle  ， 采用  includeFlat  来描述子项目路径(由于采用的是水平布局,默认根路径就是当前根项目的上级路径,所以无需用../上跳)</p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"多模块项目之 -  spring boot + gradle + 构建公共jsp页面的多模块项目","url":"https://pkaq.org/2016/12/02/sb-gradle-commonjsp/","content":"<p>标题党!!!!</p>\n<h4><span id=\"peng-zhi-yuan-li\">烹制原理</span><a href=\"#peng-zhi-yuan-li\" class=\"header-anchor\">#</a></h4><p>Servlet 3.1 规范里 jar包中<code>META-INF/resources/</code>下的文件会被视为根目录文件进行正常访问 , 这也就意味着我们可以将某些 静态页面/图片/样式/js 等打到jar包里当做依赖jar包引用 , 像<code>webjars</code>基本就是这么搞的.当然 如果你在搞前后端分离、gulp、webpack什么的这种方式基本也不用考虑了。   </p>\n<p>Servlet 3.1 中文译本 张开涛 翻译版下载 <a href=\"http://jinnianshilongnian.iteye.com/blog/1912455\">&gt; 点传送门 &lt;</a></p>\n<a id=\"more\"></a> \n\n<ul>\n<li><p>引用.1</p>\n<blockquote>\n<p>除了 静态资源和 WEB-INF/lib 目录下打包在 JAR 文件中 META-INF/resources 目录下的 JSP 文件之外，WEB-INF 目录下包含的其他任何文件都不能由容器直接提供给客户端访问。<br>serverlet 3.1 规范 - 10.5   </p>\n</blockquote>\n</li>\n<li><p>引用.2</p>\n<blockquote>\n<ol start=\"4\">\n<li>添加了从 JAR 文件中加载静态资源和 JSP 的支持，其包含在绑定在 WEB-INF/lib 目录中的 JAR 文件的 META-INF/resources 目录中<br>变更历史 A.3   </li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h4><span id=\"peng-zhi-fang-fa\">烹制方法</span><a href=\"#peng-zhi-fang-fa\" class=\"header-anchor\">#</a></h4><ol>\n<li>添加spring boot 依赖,如果不想用变量定义版本号可以直接撸版本号<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web:$&#123;bootVersion&#125;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;org.apache.tomcat.embed:tomcat-embed-jasper:$&#123;tomcat_embed&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>编写controller<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerCtrl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">tiger</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;Soft kitty,warm kitty Little ball of fur .&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;tiger&quot;</span>,<span class=\"string\">&quot;words&quot;</span>,<span class=\"string\">&quot;Roar ~ Roar ~ &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写页面<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;j2ee&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;static/duke.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;190&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;253&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    String words = String.valueOf(request.getAttribute(&quot;words&quot;));</span><br><span class=\"line\">    out.println(&quot;Tiger said : &quot; + words);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>添加公共jsp页面模块依赖<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile    project(<span class=\"string\">&quot;:webpage&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"wan-zheng-dai-ma\">完整代码</span><a href=\"#wan-zheng-dai-ma\" class=\"header-anchor\">#</a></h4></li>\n</ol>\n<p><a href=\"https://github.com/pkaq/GradleSide/tree/master/15-multi-project-springboot\"> &gt; 点击这里看完整代码 &lt; </a></p>\n","categories":["Build Tools","Spring"],"tags":["Gradle","Spring Boot"]},{"title":"RN（react native）入坑指南-10,组件的生命周期","url":"https://pkaq.org/2016/04/24/rn-lifecycle-10/","content":"<p><img src=\"rn-lifecycle-10/lifecycle.jpg\" alt=\"RN组件的声明周期\"></p>\n<a id=\"more\"></a>\n\n<p><strong>创建阶段</strong><br>getDefaultProps : 在创建类的时候调用,处理props的默认值,getDefaultProps仅会被调用一次，这里的意思是无论你会创建多少个ReactElement，这个函数都只执行一次，之后的默认props都会直接使用改函数的返回值。</p>\n<p><strong>实例化阶段</strong></p>\n<ul>\n<li><p>constructor(getInitialState):初始化组件state的值,返回值会赋值给this.state属性,这是ES6版本的写法,ES5中使用的是getInitialState.在ES6的版本中有些不太一样，相对与getDefaultProps，ES6将默认属性对象作为了构造函数的一个属性，而getInitialState则变成了在其构造器函数中给this.state赋值.</p>\n</li>\n<li><p>componentWillMount:render之前调用</p>\n</li>\n<li><p>render:渲染并返回一个虚拟dom</p>\n</li>\n<li><p>componentDidMount:render之后调用,在组件渲染完成后调用一次.</p>\n</li>\n<li><p>p.s:state属性,主要用来存储组件自身需要的数据,每次数据的更新都是通过修改state属性的值,rn内部会监听state属性,一旦变化即会触发render方法更新dom</p>\n</li>\n</ul>\n<p><strong>运行阶段</strong></p>\n<ul>\n<li>componentWillReceiveProps:用户操作后或父组件更新后,根据用户的操作行为对页面进行调整</li>\n<li>shouldComponentUpdate:拦截新的props或state</li>\n<li>componentWillUpdate:shouldComponentUpdate返回true的情况下执行</li>\n<li>componentDidUpdate:组件更新后执行</li>\n</ul>\n<p><strong>销毁阶段</strong></p>\n<ul>\n<li><ul>\n<li>componentWillUnmount:销毁时调用,通常做一些取消绑定</li>\n</ul>\n</li>\n</ul>\n<p><strong>p.s</strong>：绝对不要在componentWillUpdate和componentDidUpdate中调用this.setState方法，否则将导致无限循环调用。</p>\n","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-12,打正式签名包和发布","url":"https://pkaq.org/2016/04/24/rn-pkq-12/","content":"<p><strong>0.启动打包服务器</strong><br>首先执行<br>react-native start启动打包服务器,此时可以通过chrome打开<code>http://localhost:8081/index.android.bundle?platform=android</code>请求获取打包后的js文件,该文件是通过分析rn代码动态生成的,包含了应用中的全部逻辑.</p>\n<a id=\"more\"></a>\n<p><strong>1.生成签名秘钥</strong><br>用JDK自带的keytool工具生成证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore app-key.keystore -alias app-alias -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<blockquote>\n<p>Keytool 是一个Java 数据证书的管理工具 ,Keytool 将密钥（key）和证书（certificates）存在一个称为keystore的文件中。<br>在keystore里，包含两种数据：<br>(1)密钥实体（Key entity）——密钥（secret key）又或者是私钥和配对公钥（采用非对称加密）<br>(2)可信任的证书实体（trusted certificate entries）——只包含公钥</p>\n<p>|-v           |显示密钥库中的证书详细信息|<br>|-alias       |产生别名,每个keystore都关联这一个独一无二的alias，这个alias通常不区分大小写|<br>|-keystore    |指定密钥库的名称(产生的各类信息将不在.keystore文件中)|<br>|-keyalg      |指定密钥的算法 (如 RSA  DSA（如果不指定默认采用DSA）)|<br>|-validity    |指定创建的证书有效期多少天|<br>|-keysize     |指定密钥长度|</p>\n</blockquote>\n<p>此时在你执行命令的所在目录会生成一个<code>app-key.keystore</code>的秘钥文件</p>\n<p><strong>2.转移bundle文件</strong><br>查看<code>android/app/src/main</code>是否有assets文件夹,若不存在创建之,然后执行如下命令,将bundle文件下载并存储到assets文件夹内</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k &quot;http://localhost:8081/index.android.bundle&quot; &gt; android/app/src/main/assets/index.android.bundle</span><br></pre></td></tr></table></figure>\n<p>p.s:由于win下不存在crul命令,建议直接用安装git后自带的git bash执行</p>\n<p><strong>3.配置gradle脚本</strong><br>将如下脚本放置到<code>android/build.gradle</code>中的defaultConfig下面.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs&#123;</span><br><span class=\"line\">     release &#123;</span><br><span class=\"line\">         storeFile file(<span class=\"string\">&quot;/app-key.keystore&quot;</span>)</span><br><span class=\"line\">         storePassword <span class=\"string\">&quot;密码&quot;</span></span><br><span class=\"line\">         keyAlias <span class=\"string\">&quot;keyAlias的名字&quot;</span></span><br><span class=\"line\">         keyPassword <span class=\"string\">&quot;密码&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>然后在buildTypes里添加</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用签名配置</span></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure>\n<p><strong>4.代码混淆</strong><br>修改<code>android/app/build.gradle</code>开启混淆,如果需要额外的混淆配置可以修改<code>proguard-rules.pro</code>文件.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> enableProguardInReleaseBuilds = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>5.开始打包<br>此时,切换到<code>android/app</code>目录下,执行<code>gradlew aR</code>,经过一段与你的机器性能相关的时间等待后,你可以在<code>android/pp/build/outputs/apk</code>下找到两个apk文件,此时你就可以把apk文件交给其他人进行安装了</p>\n<p><strong>p.s:</strong></p>\n<ul>\n<li><p>aR即assembleRelease的短简写形式,在gradle中,可以采用驼峰任务的首字母调用任务,前提是不要存在相同的.</p>\n</li>\n<li><p>另外如果你本地安装了gradle也可以采用你本地的gradle,但需要注意的是<a href=\"http://tools.android.com/tech-docs/new-build-system/version-compatibility\">android插件版本和gradle之间的对应关系</a>,具体可以点击链接进行了解.插件版本可以通过修改<code>android/build.gradle</code>中的<code> dependencies &#123;        classpath &#39;com.android.tools.build:gradle:1.3.1&#39;    &#125;</code><br>进行修改</p>\n</li>\n<li><p>关于gradle环境的配置可以参考,<a href=\"http://gradlecn.coding.io/download/\">gradle下载和安装</a></p>\n</li>\n</ul>\n<p><strong>热更新</strong><br>如果要实现热部署,在代码中添加代码检查远程服务器,更新asset中的bundle文件即可实现热更新</p>\n","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-08,如何加载远程数据","url":"https://pkaq.org/2016/04/20/rn-fetch-08/","content":"<h4><span id=\"qian-yan\">前言</span><a href=\"#qian-yan\" class=\"header-anchor\">#</a></h4><p>　　通过前面的一系列联系现在页面布局技巧已经掌握,页面跳转已经搞定,页面之间的参数传递也已经搞定,我们的代码也进行了分层组织,但我们的应用到现在为止都是死的.如何让应用活起来读取远程数据呢.此篇我们便是用fetch来拉去远程数据<br>　　当然如果你想了解更多方式和内容欢迎<a href=\"http://reactnative.cn/docs/0.23/network.html#content\">阅读官方文档</a></p>\n<h4><span id=\"kai-shi\">开始</span><a href=\"#kai-shi\" class=\"header-anchor\">#</a></h4><a id=\"more\"></a>\n<p>fetch可以接受两个参数,<code>fetch(string,object)</code>,第一个参数是请求的远程地址;第二个参数是一个可选对象可以设定header,method,body等</p>\n<p>现在在我们的代码中添加如下代码</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">_onRegister</span>()&#123;    </span><br><span class=\"line\">   <span class=\"selector-tag\">fetch</span>(<span class=\"string\">&#x27;http://192.168.191.1:8080/home/register&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">//请求类型 </span></span><br><span class=\"line\">      <span class=\"attribute\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,      </span><br><span class=\"line\">      <span class=\"comment\">//请求header</span></span><br><span class=\"line\">      <span class=\"attribute\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 发送请求参数</span></span><br><span class=\"line\">      <span class=\"attribute\">body</span>: JSON.stringify(&#123;</span><br><span class=\"line\">        <span class=\"attribute\">name</span>: <span class=\"string\">&#x27;tom&#x27;</span>        </span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)<span class=\"selector-class\">.then</span>((response) =&gt; response.json())</span><br><span class=\"line\">      <span class=\"selector-class\">.then</span>((jsonData) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 回写数据</span></span><br><span class=\"line\">        <span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;</span><br><span class=\"line\">          <span class=\"attribute\">text </span>: jsonData.text</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"selector-class\">.catch</span>((error) =&gt; &#123;</span><br><span class=\"line\">         <span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;</span><br><span class=\"line\">          <span class=\"attribute\">text </span>: <span class=\"string\">&#x27;获取服务器数据错误&#x27;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>放置一个区域来显示数据文本并且在注册按钮上添加一个点击事件,这样点击的时候就可以看到数据变化了</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=</span></span><span class=\"template-variable\">&#123;styles.welcome&#125;</span><span class=\"xml\"><span class=\"tag\">&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  </span><span class=\"template-variable\">&#123;this.state.text&#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span>  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">&lt;TouchableHighlight</span></span><br><span class=\"line\"><span class=\"xml\">    style=</span><span class=\"template-variable\">&#123;styles.th&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    underlayColor=&quot;rgb(210, 230, 255)&quot;</span></span><br><span class=\"line\"><span class=\"xml\">    onPress=</span><span class=\"template-variable\">&#123;this._onRegister.bind(this)&#125;</span><span class=\"xml\">&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span>               </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">TouchableHighlight</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-07,使用navigator实现页面跳转","url":"https://pkaq.org/2016/04/18/rn-navigator-07/","content":"<h4><span id=\"qian-yan\">前言</span><a href=\"#qian-yan\" class=\"header-anchor\">#</a></h4><p>　　此文完全参考React-Native中文社区的博客<a href=\"http://reactnative.cn/post/20\">新手理解navigator的教程</a>而来,建议直接跳转链接进行详细学习,为防止链接失效或不可抗力因素无法访问,个人整理简单记录如下.</p>\n<h4><span id=\"kai-shi\">开始</span><a href=\"#kai-shi\" class=\"header-anchor\">#</a></h4><p>由于前一篇文章将代码进行了分层整理,所以我们的<code>index.android.js</code>已经变得相对简洁</p>\n<a id=\"more\"></a>\n\n<p><code>index.android.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;Navigator,AppRegistry&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/**引入Login组件 */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/login/Login.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaraRn</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/** 默认组件名称以及默认组件 */</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> defaultName = <span class=\"string\">&quot;Login&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> defaultComponent = Login;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">     &lt;Navigator          </span><br><span class=\"line\">          <span class=\"comment\">//初始化组件</span></span><br><span class=\"line\">          initialRoute=&#123;&#123; <span class=\"attr\">name</span>: defaultName, <span class=\"attr\">component</span>: defaultComponent &#125;&#125;    </span><br><span class=\"line\">          <span class=\"comment\">//页面切换效果 </span></span><br><span class=\"line\">          configureScene=&#123;<span class=\"function\">(<span class=\"params\">route</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Navigator.SceneConfigs.VerticalDownSwipeJump;</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">          renderScene=&#123;<span class=\"function\">(<span class=\"params\">route, navigator</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> Component = route.component;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...route.params</span>&#125; <span class=\"attr\">navigator</span>=<span class=\"string\">&#123;navigator&#125;</span> /&gt;</span></span></span><br><span class=\"line\">          &#125;&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">AppRegistry.registerComponent(<span class=\"string\">&#x27;TaraRn&#x27;</span>, <span class=\"function\">() =&gt;</span> TaraRn);</span><br></pre></td></tr></table></figure>\n<p>这里来解释一下代码:</p>\n<p>第三行: 一个初始首页的component名字，比如我写了一个component叫HomeComponent，那么这个name就是这个组件的名字【HomeComponent】了。</p>\n<p>第四行: 这个组件的Class，用来一会儿实例化成 <code>&lt;Component /&gt;</code>标签</p>\n<p>第七行:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initialRoute=&#123;&#123; <span class=\"attr\">name</span>: defaultName, <span class=\"attr\">component</span>: defaultComponent &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个指定了默认的页面，也就是启动app之后会看到界面的第一屏。 需要填写两个参数: name 跟 component。</p>\n<p>第八，九，十行: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configureScene=&#123;<span class=\"function\">() =&gt;</span> &#123;<span class=\"keyword\">return</span> Navigator.SceneConfigs.VerticalDownSwipeJump;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是页面之间跳转时候的动画，具体有哪些？</p>\n<ul>\n<li>Navigator.SceneConfigs.PushFromRight (默认)</li>\n<li>Navigator.SceneConfigs.FloatFromRight</li>\n<li>Navigator.SceneConfigs.FloatFromLeft</li>\n<li>Navigator.SceneConfigs.FloatFromBottom</li>\n<li>Navigator.SceneConfigs.FloatFromBottomAndroid</li>\n<li>Navigator.SceneConfigs.FadeAndroid</li>\n<li>Navigator.SceneConfigs.HorizontalSwipeJump</li>\n<li>Navigator.SceneConfigs.HorizontalSwipeJumpFromRight</li>\n<li>Navigator.SceneConfigs.VerticalUpSwipeJump</li>\n<li>Navigator.SceneConfigs.VerticalDownSwipeJump</li>\n</ul>\n<p>最后的几行: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderScene=&#123;<span class=\"function\">(<span class=\"params\">route, navigator</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> Component = route.component;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> &#123;<span class=\"attr\">...route.params</span>&#125; <span class=\"attr\">navigator</span>=<span class=\"string\">&#123;navigator&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    &#125;&#125; /&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这里是每个人最疑惑的，我们先看到回调里的两个参数:route, navigator。通过打印我们发现route里其实就是我们传递的name,component这两个货，navigator是一个Navigator的对象，为什么呢，因为它有push pop jump…等方法，这是我们等下用来跳转页面用的那个navigator对象。<br><code>return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</code><br>这里有一个判断，也就是如果传递进来的component存在，那我们就是返回一个这个component，结合前面 initialRoute 的参数，我们就是知道，这是一个会被render出来给用户看到的component，然后navigator作为props传递给了这个component。</p>\n<ul>\n<li>getCurrentRoutes() - 获取当前栈里的路由，也就是push进来，没有pop掉的那些。</li>\n<li>jumpBack() - 跳回之前的路由，当然前提是保留现在的，还可以再跳回来，会给你保留原样。</li>\n<li>jumpForward() - 上一个方法不是调到之前的路由了么，用这个跳回来就好了。</li>\n<li>jumpTo(route) - 跳转到已有的场景并且不卸载。</li>\n<li>push(route) - 跳转到新的场景，并且将场景入栈，你可以稍后跳转过去</li>\n<li>pop() - 跳转回去并且卸载掉当前场景</li>\n<li>replace(route) - 用一个新的路由替换掉当前场景</li>\n<li>replaceAtIndex(route, index) - 替换掉指定序列的路由场景</li>\n<li>replacePrevious(route) - 替换掉之前的场景</li>\n<li>immediatelyResetRouteStack(routeStack) - 用新的路由数组来重置路由栈</li>\n<li>popToRoute(route) - pop到路由指定的场景，其他的场景将会卸载。</li>\n<li>popToTop() - pop到栈中的第一个场景，卸载掉所有的其他场景。</li>\n</ul>\n<p><code>Login.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/**引入样式文件 */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Login.style.js&#x27;</span>;</span><br><span class=\"line\">&#123;<span class=\"comment\">/**引入图标字体 */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Icon <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native-vector-icons/FontAwesome&#x27;</span>;</span><br><span class=\"line\">&#123;<span class=\"comment\">/**引入Homepage */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../home/Home.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;</span><br><span class=\"line\">  Component, </span><br><span class=\"line\">  TouchableHighlight,</span><br><span class=\"line\">  Text,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\">      name : <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">_onLogin</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 进行跳转并传递参数</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">      title : <span class=\"string\">&#x27;homepage&#x27;</span>,</span><br><span class=\"line\">      component:Home,</span><br><span class=\"line\">      params : &#123;</span><br><span class=\"line\">        name : <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;        </span><br><span class=\"line\">        &lt;TouchableHighlight</span><br><span class=\"line\">            style=&#123;styles.th&#125;</span><br><span class=\"line\">            underlayColor=<span class=\"string\">&quot;rgb(210, 230, 255)&quot;</span></span><br><span class=\"line\">            onPress = &#123;<span class=\"built_in\">this</span>._onLogin.bind(<span class=\"built_in\">this</span>)&#125;&gt;</span><br><span class=\"line\">            &lt;View&gt;</span><br><span class=\"line\">              &lt;Text&gt;登录&lt;/Text&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        &lt;/TouchableHighlight&gt;      </span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>Home.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;</span><br><span class=\"line\">    Component,</span><br><span class=\"line\">    TouchableOpacity,</span><br><span class=\"line\">    View,</span><br><span class=\"line\">    Text</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Home.style.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\">          name : <span class=\"string\">&#x27;Frank&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**接收传递过来的参数 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">          name : <span class=\"built_in\">this</span>.props.name</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**返回事件 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">_onBack</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; navigator &#125; = <span class=\"built_in\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(navigator) &#123;</span><br><span class=\"line\">       navigator.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Text&gt;Hello.&#123;<span class=\"built_in\">this</span>.state.name&#125;&lt;/Text&gt;</span><br><span class=\"line\">                &lt;TouchableOpacity style=&#123;styles.th&#125; onPress=&#123;<span class=\"built_in\">this</span>._onBack.bind(<span class=\"built_in\">this</span>)&#125;&gt;</span><br><span class=\"line\">                    &lt;Text&gt;点我返回&lt;/Text&gt;                    </span><br><span class=\"line\">                &lt;/TouchableOpacity&gt; </span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-附录A,常用命令","url":"https://pkaq.org/2016/04/17/rn-command-a/","content":"<p>创建一个叫AwesomeProject的项目</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> init AwesomeProject</span><br></pre></td></tr></table></figure>\n<p>升级react-native项目到最新版本</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> upgrade</span><br></pre></td></tr></table></figure>\n<p>启动打包服务</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> start</span><br></pre></td></tr></table></figure>\n<p>在安卓上运行debug程序</p>\n<a id=\"more\"></a>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native <span class=\"keyword\">run</span><span class=\"bash\">-android</span></span><br></pre></td></tr></table></figure>\n<p>在安卓上运行debug程序</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> android</span><br></pre></td></tr></table></figure>\n<p>在苹果上运行debug程序</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native <span class=\"keyword\">run</span><span class=\"bash\">-ios</span></span><br></pre></td></tr></table></figure>\n<p>打离线包</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> bundle</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> unbundle</span><br></pre></td></tr></table></figure>\n<p>为项目添加三方依赖</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> link</span><br></pre></td></tr></table></figure>\n<p>generates a native library bridge</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-<span class=\"keyword\">native</span> <span class=\"keyword\">new</span>-library</span><br></pre></td></tr></table></figure>","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-06,项目开发结构(代码分层组织)","url":"https://pkaq.org/2016/04/17/rn-structure-06/","content":"<p>随着代码复杂性的提高,对代码进行分层以及抽象是十分必要的.今天我们就对RN的项目结构进行简单的梳理.<br>　　这里主要是对样式文件和组件进行分离.可以以业务模块或者以页面的形式划分层级.具体结构如下</p>\n<ul>\n<li><input disabled type=\"checkbox\"> Project ROOT<ul>\n<li><input disabled type=\"checkbox\"> index.ios.js</li>\n<li><input disabled type=\"checkbox\"> index.android.js</li>\n<li><input disabled type=\"checkbox\"> android</li>\n<li><input disabled type=\"checkbox\"> ios</li>\n<li><input disabled type=\"checkbox\"> resources     – 存放各类静态资源文件</li>\n<li><input disabled type=\"checkbox\"> src    – 源代码目录<ul>\n<li><input disabled type=\"checkbox\"> module –业务模块<ul>\n<li><input disabled type=\"checkbox\"> module.js    – 业务模块组件</li>\n<li><input disabled type=\"checkbox\"> module.style.js – 业务模块样式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>目前关于RN的分层结构没有特定的最佳实践,大家可以根据自己的理解进行组织.<br>这里之所以将样式文件与业务模块同级存放主要是由于在import的时候from语句后面的参数是依据当前文件所在的相对路径进行查找,存放在同级目录可以比较方便的进行引用.<code>Login.js</code>中如果需要引入<code>Login.style.js</code>可如下书写<br><code>Module.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;View,Text&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/**这里styles是引入后的别名,可以在需要的地方以style.xxxx的方式引用样式 */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Login.style.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Text&gt;Hello,Tom&lt;/Text&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体样式类书写的例子<br><code>Module.style.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;StyleSheet&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">    justifyContent: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    alignItems: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">&#x27;#F5FCFF&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = styles;</span><br></pre></td></tr></table></figure>\n<p>如此一来我们的入口文件直接引用Module进行展现即可<br><code>index.android.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;AppRegistry&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"comment\">/**Login */</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/module/Login.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaraRn</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">     \t&lt;Login/&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">AppRegistry.registerComponent(<span class=\"string\">&#x27;TaraRn&#x27;</span>, <span class=\"function\">() =&gt;</span> TaraRn);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-05,使用图标字体Fontawesome","url":"https://pkaq.org/2016/04/16/rn-icon-05/","content":"<h4><span id=\"xian-jue-tiao-jian\">先决条件</span><a href=\"#xian-jue-tiao-jian\" class=\"header-anchor\">#</a></h4><ul>\n<li>rn 0.23</li>\n<li>npm 3.7.3</li>\n<li>node 5.9.1</li>\n<li>system winX</li>\n<li>python 2.7.x</li>\n</ul>\n<h4><span id=\"qian-yan\">前言</span><a href=\"#qian-yan\" class=\"header-anchor\">#</a></h4><p>　　开发过程中各式各样的图标自然少不了,如果能使用fontawesome等图标字体,自然可以带来极大的方便,然而在rn中并无法直接引用,还好已经有人做好了相关组件,react-native-vector-icons便是其中的佼佼者.<br>　　如果你对此组件感兴趣可以去github页面star此项目<br>　　<a href=\"https://github.com/oblador/react-native-vector-icons\">https://github.com/oblador/react-native-vector-icons</a>   </p>\n<a id=\"more\"></a>\n<h4><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\">#</a></h4><p>　　官方README如何使用已经写得很详细,此处需要指出的是几个注意点.<br>　　由于安装时依赖node-gyp,而node-gyp在win下又会有一堆依赖这里以winX为例说一下winX下需要安装的依赖   </p>\n<p>　　1.<a href=\"https://www.python.org/downloads/\">python环境</a>:截止博客发表时仅支持到2.7.X版本,如果是下载的zip包需要将python路径添加到环境变量中   </p>\n<p>　　2.vs c++:为了方便 我直接安装了<a href=\"https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx\">Microsoft Visual Studio Express</a><br>npm install react-native-vector-icons –save   </p>\n<p>　　3.<a href=\"https://github.com/rnpm/rnpm\">rnpm</a>:<code>npm install rnpm -g</code></p>\n<h4><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\">#</a></h4><p>确保以上三点没问题后,可以通过如下命令安装本组件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-vector-icons --save</span><br></pre></td></tr></table></figure>\n<p>由于我是开发android App,所以依据官方文档继续执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rnpm link</span><br></pre></td></tr></table></figure>\n<p>在所需使用图标的地方,这里采用的是es6的写法,es5的写法也是可以的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Icon from &#x27;react-native-vector-icons/FontAwesome&#x27;;</span><br></pre></td></tr></table></figure>\n<p>使用组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Icon name=<span class=\"string\">&quot;qq&quot;</span> size=&#123;<span class=\"number\">30</span>&#125; color=<span class=\"string\">&quot;#52C0FE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"bei-zhu\">备注</span><a href=\"#bei-zhu\" class=\"header-anchor\">#</a></h4><p><strong>参数说明</strong>   </p>\n<p>|参数|类型|默认值|说明|<br>|——————–|<br>|name|String|无|图标名称,这里需要注意的是 如果你使用font-awesome的图标,例如qq仅写qq即可,无需写fa fa-qq|<br>|size|数值|12|图标的大小|<br>|color|<a href=\"http://reactnative.cn/docs/0.23/colors.html#content\">rn支持的颜色格式</a>|自动继承|图标的颜色|</p>\n<p><strong>支持的图标</strong>    </p>\n<ul>\n<li><a href=\"http://entypo.com/\"><code>Entypo</code></a> by Daniel Bruce (<strong>411</strong> icons) </li>\n<li><a href=\"http://evil-icons.io/\"><code>EvilIcons</code></a> by Alexander Madyankin &amp; Roman Shamin (v1.8.0, <strong>71</strong> icons) </li>\n<li><a href=\"http://fortawesome.github.io/Font-Awesome/icons/\"><code>FontAwesome</code></a> by Dave Gandy (v4.5, <strong>605</strong> icons) </li>\n<li><a href=\"http://zurb.com/playground/foundation-icon-fonts-3\"><code>Foundation</code></a> by ZURB, Inc. (v3.0, <strong>283</strong> icons)</li>\n<li><a href=\"http://ionicons.com/\"><code>Ionicons</code></a> by Ben Sperry (v2.0.1, <strong>733</strong> icons)</li>\n<li><a href=\"https://www.google.com/design/icons/\"><code>MaterialIcons</code></a> by Google, Inc. (v2.1.1, <strong>893</strong> icons)</li>\n<li><a href=\"http://octicons.github.com/\"><code>Octicons</code></a> by Github, Inc. (v3.5.0, <strong>196</strong> icons)</li>\n<li><a href=\"http://zocial.smcllns.com/\"><code>Zocial</code></a> by Sam Collins (v1.0, <strong>100</strong> icons)</li>\n</ul>\n<p><strong>错误记录</strong><br>未正确安装python会出现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-gyp ERR! configure error </span><br><span class=\"line\">gyp ERR! stack Error: Can&#x27;t find Python executable &quot;python&quot;, you can set the PYTHON env variable.</span><br><span class=\"line\">gyp ERR! stack  </span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">未正确安装vs c++会出现</span><br><span class=\"line\">```shell</span><br><span class=\"line\">未能加载Visual C++ 组件VCBuild.exe ”，要求安装.NET FramMS Build 、.NET Framework 2.0 SDK 、 Microsoft Visual Studio 2005。</span><br></pre></td></tr></table></figure>","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-04,布局容器","url":"https://pkaq.org/2016/04/12/rn-layout-04/","content":"<p>react native 支持采用flex方式布局。默认情况下如果不设置flex容器的宽度，那么flex容器会100%自适应屏幕宽度。<br>学习flex布局要明白两个概念：主轴和交叉轴。所谓主轴即容器延伸方向，默认是row(横向延伸)，此时与水平垂直的轴即为交叉轴，反之亦然。</p>\n<a id=\"more\"></a>\n<p>伸缩容器有以下七大属性  ：</p>\n<p><strong>1.flexDirection(主轴方向,子元素在父容器中的排列位置)</strong><br>  flexDirection:row | row-reverse | column(默认) | column-reverse   </p>\n<p><strong>2.flexWrap(子元素超出父容器时是否换行)</strong><br>  flexWrap:nowrap | wrap | wrap-reverse   </p>\n<p><strong>3.justifyContent(主轴内容对齐方式)</strong><br>  justifyContent:flex-start(默认值) | flex-end | center | space-between | space-around    </p>\n<p><strong>4.alignItems(交叉轴项目对齐方式)</strong><br>  alignItems:flex-start(默认) | flex-end | center | stretch    </p>\n<p><strong>5.flex(flex-grow,flex-shrink,flex-basis的合体，默认0 1 auto)</strong><br>    a.flex-grow(元素扩展占比,默认0，0不起作用，值越大扩展能力越强，表示在 item 总宽度比容器小的时候，为了让 item 填满容器，每个 item 增加的宽度)<br>    b.flex-shrink(元素的收缩能力，默认1,值越大收缩能力越大，shrink 表示在 item 总宽度比容器大的时候，为了让 item 填满容器，每个 item 减少的宽度)<br>    c.flex-basis(元素伸缩基准值 默认auto)</p>\n<p><strong>6.alignSelf(指定特定元素的对齐方式)</strong></p>\n<p>举个例子，如果有一段文本要设置水平垂直居中，并且超出部分换行可以书写为   </p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justifyContent:<span class=\"built_in\">center</span>;</span><br><span class=\"line\">alignItems：<span class=\"built_in\">center</span>;</span><br></pre></td></tr></table></figure>\n","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-03,运行官方示例UIExplorer","url":"https://pkaq.org/2016/04/09/rn-examples-03/","content":"<p>学习RN，官方示例是必不可少的，研究和学习官方示例会带来许多帮助。<br>在搭建好rn环境之后就可以着手尝试运行官方示例来看下RN的各类组件了。   </p>\n<h4><span id=\"xian-jue-tiao-jian\">先决条件</span><a href=\"#xian-jue-tiao-jian\" class=\"header-anchor\">#</a></h4><ul>\n<li>node</li>\n<li>npm</li>\n<li>RN</li>\n<li>Git</li>\n<li>Gradle</li>\n<li>ADK/SDK</li>\n</ul>\n<h4><span id=\"kai-shi\">开始</span><a href=\"#kai-shi\" class=\"header-anchor\">#</a></h4><p>首先下载RN代码<br>Github: <a href=\"https://github.com/facebook/react-native\">https://github.com/facebook/react-native</a><br>下载成功后 命令行切换到目标目录 执行<code>npm install</code>安装所需依赖   </p>\n<a id=\"more\"></a>\n<h4><span id=\"pei-zhi-dk\">配置*DK</span><a href=\"#pei-zhi-dk\" class=\"header-anchor\">#</a></h4><p>这里有两种方式<br>法1：<br>　　切换到react-native目录, 新建local.properties</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sdk.dir</span>=absolute_path_to_android_sdk</span><br><span class=\"line\"><span class=\"attr\">ndk.dir</span>=absolute_path_to_android_ndk</span><br></pre></td></tr></table></figure>\n<p>法2:<br>　　环境变量添加ANDROID_NDK,ANDROID_SDK分别指向NDK和SDK的目录<br>更多说明请参考   <a href=\"https://facebook.github.io/react-native/docs/android-building-from-source.html\">关于SDK/NDK配置的官方文档</a></p>\n<h4><span id=\"zhen-ji-ce-shi\">真机测试</span><a href=\"#zhen-ji-ce-shi\" class=\"header-anchor\">#</a></h4><p>　　如果是windows小伙伴，下面的命令建议用安装完git后自带的gitbash运行</p>\n<p>1.执行命令</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./<span class=\"selector-tag\">gradlew</span> <span class=\"selector-pseudo\">:ReactAndroid</span><span class=\"selector-pseudo\">:assembleDebug</span></span><br></pre></td></tr></table></figure>\n<p>2.然后执行</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./<span class=\"selector-tag\">gradlew</span> <span class=\"selector-pseudo\">:ReactAndroid</span><span class=\"selector-pseudo\">:installArchives</span></span><br></pre></td></tr></table></figure>\n<p>3.启动服务</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"regexp\">/packager/</span>packager.sh</span><br></pre></td></tr></table></figure>\n<p>4.最后安装到你的手机</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../<span class=\"selector-tag\">gradlew</span> <span class=\"selector-pseudo\">:Examples</span><span class=\"selector-pseudo\">:UIExplorer</span><span class=\"selector-pseudo\">:android</span><span class=\"selector-pseudo\">:app</span><span class=\"selector-pseudo\">:installDebug</span></span><br></pre></td></tr></table></figure>\n<p>这个过程中请不要随意关闭packager运行窗口<br>5.设置ip<br>现在，打开UIExplorer项目，摇一摇你的手机，在弹出的菜单中选择<code>Dev settings</code>-&gt;<code>Debug server host &amp; port for device</code><br>设置一下你的无线IP 比如<code>192.168.1.1:8081</code>,注意：此处的8081一定要有的否则无法加载</p>\n<p>更多内容请参考<a href=\"http://facebook.github.io/react-native/docs/running-on-device-android.html#content\">官方的真机调试文档</a></p>\n","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-09,单元学习小结","url":"https://pkaq.org/2016/04/09/rn-summary-09/","content":"<p>现在我们已经做了一个简单的登录示例,它包含的知识点有页面布局、图标字体的使用、结构化开发、远程数据获取等。<br><a href=\"https://github.com/pkaq/TaraRn\">代码在这里</a></p>\n<p>那么如果想让自己的水平提高一个层次,此时你应该注意到了要玩转RN你应该储备如下技能<br><strong>1.Flex布局</strong>:<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\">Flex 布局教程</a><br><strong>2.ES6语法</strong>:这里有一份  <a href=\"http://reactnative.cn/post/15\">ES5 ES6对照表</a><br>下面是一点补充说明 完整教程可以看阮一峰的<a href=\"http://es6.ruanyifeng.com/\">es6 入门教程</a></p>\n<blockquote>\n<p>es6语法说明 …Obj ,三个点遍历对象所有属性并赋值给xx,举个例子</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Obj = &#123;&#125;;</span><br><span class=\"line\">Obj.<span class=\"attribute\">foo</span>=<span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">Obj.<span class=\"attribute\">bar</span>=<span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;H1 &#123;<span class=\"built_in\">..</span>.Obj&#125; <span class=\"attribute\">foo</span>=<span class=\"string\">&quot;2&quot;</span>&gt;&lt;/H1&gt;</span><br></pre></td></tr></table></figure>\n<p>这里{…Obj}会遍历Obj的所有属性给H1,同时由于后面再次制定了foo=”2” 所以这里会覆盖前面的foo=”1”</p>\n</blockquote>\n<p>箭头函数</p>\n<blockquote>\n<p>(a)=&gt;{alert(“a”)}<br>相当于<br>function(a) {<br>    alert(“a”);<br>}</p>\n</blockquote>\n<p><strong>3.JSX语法</strong> : <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\">深入了解JSX语法</a><br>还是补充说明</p>\n<blockquote>\n<p>JSX组件类和标签首字母都要大写</p>\n</blockquote>\n<p><strong>4.关于样式</strong></p>\n<blockquote>\n<p>样式要采用驼峰规范书写</p>\n</blockquote>\n<p><strong>5.关于事件</strong></p>\n<blockquote>\n<p>事件绑定 比如onClick={_onclickHandler.bind(this,”a”)},这里接受两个参数,第一个设定作用域,第二个接收一个参数,同时onClick必须符合驼峰命名规则</p>\n</blockquote>\n<p>下一步我们就可以开始熟悉组件使用,redux等更多内容了.</p>\n","categories":["React Native"],"tags":["React Native"]},{"title":"grunt -- > gulp,从grunt转向gulp管理前端构建","url":"https://pkaq.org/2016/01/14/gulp/","content":"<h4><span id=\"xie-zai-qian-mian\">写在前面</span><a href=\"#xie-zai-qian-mian\" class=\"header-anchor\">#</a></h4><p>  在JavaScript的世界里，Grunt.js是基于Node.js的自动化任务运行器。2013年02月18日，Grunt v0.4.0 发布。Fractal公司积极参与了数个流行Node.js模块的开发，它去年发布了一个新的构建系统Gulp，希望能够取其精华，并取代Grunt，成为最流行的JavaScript任务运行器。</p>\n<p>  不好意思，上面一段是抄的，原文请看<a href=\"http://segmentfault.com/a/1190000002491282\">前端工程的构建工具对比 Gulp vs Grunt</a>  </p>\n<p>  没错，正是因为这篇文章，无意中发现了gulp，试用之后也大有当年从maven切换到gradle的快感<br>  所以，以后的日子还是让gulp来陪伴吧</p>\n<a id=\"more\"></a>\n\n<h4><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\">#</a></h4><p>  <a href=\"http://www.gulpjs.com.cn/docs/getting-started/\">官方入门指南</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global gulp</span><br></pre></td></tr></table></figure>\n<h4><span id=\"chu-shi-hua\">初始化</span><a href=\"#chu-shi-hua\" class=\"header-anchor\">#</a></h4><p>  同样的安装完在你的项目目录用npm init初始化一个package.json文件，并且创建gulpfile.js文件   </p>\n<h4><span id=\"xun-zhao-cha-jian\">寻找插件</span><a href=\"#xun-zhao-cha-jian\" class=\"header-anchor\">#</a></h4><p> <a href=\"http://gulpjs.com/plugins/\">点我传送</a></p>\n<h4><span id=\"ji-xu\">继续</span><a href=\"#ji-xu\" class=\"header-anchor\">#</a></h4><p>因为实在太简单，所以我打算直接贴脚本并且通过在脚本里加注释的方式来说明剩下的部分<br>因为基本就是引入插件然后配置下插件相关属性就行了，而这一切插件介绍里也说的很明白了<br>关于复制目录结构的事情 下面的复制任务里有  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>),</span><br><span class=\"line\"><span class=\"comment\">//\t图片压缩插件</span></span><br><span class=\"line\">\timagemin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-imagemin&#x27;</span>),</span><br><span class=\"line\"><span class=\"comment\">//\t深度压缩png图片插件</span></span><br><span class=\"line\">\timageminPngquant = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;imagemin-pngquant&#x27;</span>),</span><br><span class=\"line\"><span class=\"comment\">//\t使用”gulp-cache”只压缩修改的图片插件</span></span><br><span class=\"line\">\tcache = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cache&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//图片压缩任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;imagemin&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \tgulp.src(<span class=\"string\">&#x27;image/*.&#123;png,jpg,gif,ico&#125;&#x27;</span>)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            svgoPlugins: [&#123;<span class=\"attr\">removeViewBox</span>: <span class=\"literal\">false</span>&#125;],</span><br><span class=\"line\">            use: [imageminPngquant()] </span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        <span class=\"comment\">//图片压缩质量</span></span><br><span class=\"line\">    \t.pipe(imageminPngquant(&#123;<span class=\"attr\">quality</span>: <span class=\"string\">&#x27;65-80&#x27;</span>, <span class=\"attr\">speed</span>: <span class=\"number\">2</span>&#125;)())</span><br><span class=\"line\">    \t.pipe(gulp.dest(<span class=\"string\">&#x27;dist/img&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//复制任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;copy&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//复制frozenUI相关依赖</span></span><br><span class=\"line\">\tgulp.src(<span class=\"string\">&#x27;bower_components/frozenui/dist/css/*&#x27;</span>)</span><br><span class=\"line\">\t    .pipe(gulp.dest(<span class=\"string\">&#x27;css/fronzenUI/css&#x27;</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//复制font-awesome相关依赖</span></span><br><span class=\"line\">    <span class=\"comment\">//想复制目录结构？没错，在你想复制的目录后面加*这个目录会被一同复制过去</span></span><br><span class=\"line\">\tgulp.src([<span class=\"string\">&#x27;bower_components/font-awesome/css*/*.min.*&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;bower_components/font-awesome/fonts*/*&#x27;</span>])</span><br><span class=\"line\">\t    .pipe(gulp.dest(<span class=\"string\">&#x27;css/font-awesome&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"the-end\">THE END</span><a href=\"#the-end\" class=\"header-anchor\">#</a></h4>","categories":["构建工具","前端"],"tags":["gulp","前端'","构建工具"]},{"title":"RN（react native）入坑指南_02,一个登录示例","url":"https://pkaq.org/2015/12/16/rn-login-02/","content":"<p>Github上发现一只登录示例，拿来尝鲜,这里需要注意的坑有如下两点<br>  1.关于注释，恩…</p>\n<blockquote>\n<p>  // 单行<br>  /*多行 */</p>\n</blockquote>\n<p>这个自然不用说，需要说的是，你得在外面加一层{}给包起来</p>\n<p>2.win下引用静态资源图片会出现引用到显示不出来的Bug，关于这个问题参考链接1,2里给出了不同的解决方案，我这里采用的是Stackoverflow的解决方式。</p>\n<a id=\"more\"></a>\n<p>如果你想引用本地资源辣么有两种方式<br>1.使用xcassets folder<br>2.使用相对路径，这里的坑点在于，当你</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;image!google&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这么写的时候，很可能红屏或者引用到了不显示，所以建议采用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source=&#123;&#123; <span class=\"attr\">uri</span>: <span class=\"string\">&quot;google&quot;</span>, <span class=\"attr\">isStatic</span>: <span class=\"literal\">true</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式去引用，如果你是安德猴的话，把你的图片放到drawable下面就好了。：）</p>\n<p>废话不多说 直接撸代码,为什么没有button呢 因为Touchablexxx的就是button啊</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-native&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//组件注册</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;</span><br><span class=\"line\">    AppRegistry,</span><br><span class=\"line\">    StyleSheet,</span><br><span class=\"line\">    Image,</span><br><span class=\"line\">    TextInput,</span><br><span class=\"line\">    Text,</span><br><span class=\"line\">    ScrollView,</span><br><span class=\"line\">    TouchableOpacity,</span><br><span class=\"line\">    RCTImage,</span><br><span class=\"line\">    View</span><br><span class=\"line\">&#125; = React</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//渲染界面</span></span><br><span class=\"line\">    render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;ScrollView</span><br><span class=\"line\">                contentContainerStyle=&#123;&#123;<span class=\"attr\">flex</span>:<span class=\"number\">1</span>&#125;&#125;</span><br><span class=\"line\">                keyboardDismissMode=<span class=\"string\">&#x27;on-drag&#x27;</span></span><br><span class=\"line\">                keyboardShouldPersistTaps=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">                &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                    &#123;<span class=\"comment\">/*LOGO*/</span>&#125;</span><br><span class=\"line\">                    &lt;Image</span><br><span class=\"line\">                        source=&#123;&#123; <span class=\"attr\">uri</span>: <span class=\"string\">&quot;logo&quot;</span>, <span class=\"attr\">isStatic</span>: <span class=\"literal\">true</span> &#125;&#125;</span><br><span class=\"line\">                        style=&#123;styles.logo&#125;/&gt;</span><br><span class=\"line\">                    &#123;<span class=\"comment\">/*用户名*/</span>&#125;</span><br><span class=\"line\">                    &lt;TextInput</span><br><span class=\"line\">                        ref=&#123;<span class=\"function\">(<span class=\"params\">username</span>) =&gt;</span> <span class=\"built_in\">this</span>.username = username&#125;</span><br><span class=\"line\">                        onFocus=&#123;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.username.focus()&#125;</span><br><span class=\"line\">                        style=&#123;styles.input&#125;</span><br><span class=\"line\">                        placeholder=<span class=\"string\">&#x27;请输入用户名&#x27;</span>/&gt;</span><br><span class=\"line\">                    &#123;<span class=\"comment\">/*密码*/</span>&#125;</span><br><span class=\"line\">                    &lt;TextInput</span><br><span class=\"line\">                        ref=&#123;<span class=\"function\">(<span class=\"params\">password</span>) =&gt;</span> <span class=\"built_in\">this</span>.password = password&#125;</span><br><span class=\"line\">                        onFocus=&#123;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.password.focus()&#125;</span><br><span class=\"line\">                        style=&#123;styles.input&#125;</span><br><span class=\"line\">                        placeholder=<span class=\"string\">&#x27;请输入密码&#x27;</span></span><br><span class=\"line\">                        password=&#123;<span class=\"literal\">true</span>&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &lt;TouchableOpacity</span><br><span class=\"line\">                        style=&#123;styles.btn&#125;</span><br><span class=\"line\">                        onPress=&#123;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;press me&#x27;</span>)&#125;&gt;</span><br><span class=\"line\">                        &#123;<span class=\"comment\">/*登录*/</span>&#125;</span><br><span class=\"line\">                        &lt;Text style=&#123;styles.text&#125;&gt;登录&lt;/Text&gt;</span><br><span class=\"line\">                    &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">                &lt;/View&gt;</span><br><span class=\"line\">            &lt;/ScrollView&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">        flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">        paddingLeft: <span class=\"number\">10</span>,</span><br><span class=\"line\">        paddingRight: <span class=\"number\">10</span>,</span><br><span class=\"line\">        alignItems: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">        backgroundColor: <span class=\"string\">&#x27;#F5FCFF&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    logo: &#123;</span><br><span class=\"line\">        width: <span class=\"number\">160</span>,</span><br><span class=\"line\">        height: <span class=\"number\">160</span>,</span><br><span class=\"line\">        marginTop: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    input: &#123;</span><br><span class=\"line\">        marginTop: <span class=\"number\">10</span>,</span><br><span class=\"line\">        height: <span class=\"number\">40</span>,</span><br><span class=\"line\">        borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">        borderWidth: <span class=\"number\">1</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">&#x27;lightblue&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    text: &#123;</span><br><span class=\"line\">        fontWeight: <span class=\"string\">&#x27;bold&#x27;</span>,</span><br><span class=\"line\">        fontSize: <span class=\"number\">14</span>,</span><br><span class=\"line\">        color: <span class=\"string\">&#x27;#FFF&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    btn: &#123;</span><br><span class=\"line\">        alignSelf: <span class=\"string\">&#x27;stretch&#x27;</span>,</span><br><span class=\"line\">        alignItems: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">        justifyContent: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">        backgroundColor: <span class=\"string\">&#x27;#3333FF&#x27;</span>,</span><br><span class=\"line\">        height: <span class=\"number\">40</span>,</span><br><span class=\"line\">        borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">        marginTop: <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">AppRegistry.registerComponent(<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"function\">() =&gt;</span> react);</span><br></pre></td></tr></table></figure>\n\n\n<p>参考指南:<br>   <a href=\"https://github.com/hufeng/iThink/issues/3\">React Native登录示例</a><br>   <a href=\"http://stackoverflow.com/questions/29308937/trouble-requiring-image-module-in-react-native/33472934#33472934\">Win下RN的图片坑</a><br>   <a href=\"http://bbs.react-native.cn/topic/17/0-14-0-16-%E5%9C%A8windows%E4%B8%8B%E5%BC%80%E5%8F%91-%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%87%BA%E6%9D%A5\">Win下RN的图片坑之改源码解决方案</a></p>\n","categories":["React Native"],"tags":["React Native"]},{"title":"RN（react native）入坑指南-01,Hello RN","url":"https://pkaq.org/2015/12/16/rn-hello-01/","content":"<h4><span id=\"xie-zai-qian-mian\">写在前面</span><a href=\"#xie-zai-qian-mian\" class=\"header-anchor\">#</a></h4><p>  目前最热的框架之一,可以通过更新远端JS，直接更新app, 用 JavaScript 调起 native 组件，将增强与高性能组件交给 native 来处理 ，相比其他hybrid框架而言并非通过webview来调用原生组件,而是直接调用操作系统自带的javascriptCore<br>  React Native only supports Android 4.1 and above</p>\n<p>  由于Facebook基本人手mac+iphone，所以用win+android来搞的同学 如果你在学习使用的过程中出现了各种莫名其妙的意想不到的问题，辣么 这一切都在情理之中，有条件的同学建议宁愿linux也不要win下搞，此处送你前人踩坑宝典两册<br>   <a href=\"https://github.com/pkaq/react-native-android-lession/blob/master/react-android-lession2.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.md/\">点我传送 - 踩坑宝典&lt;上&gt;</a></p>\n<p>   <a href=\"http://bbs.react-native.cn/category/3/blogs\">点我传送 - 踩坑宝典&lt;下&gt;</a></p>\n<p>   – 2018/07/31更新</p>\n<a id=\"more\"></a>\n\n<h4><span id=\"0-huan-jing\">0.环境</span><a href=\"#0-huan-jing\" class=\"header-anchor\">#</a></h4><pre><code>0.rn：0.56\n1.windows : 10\n2.node : 10.0.4\n3.npm : 6.1.0\n4.yarn 1.7</code></pre>\n<h4><span id=\"1-an-zhuang\">1.安装</span><a href=\"#1-an-zhuang\" class=\"header-anchor\">#</a></h4><p>  安装比较简单 基本按照官网说明走就行了,唯一需要注意的就是<br><strong><em>请时刻保持翻墙状态</em></strong><br><strong><em>请时刻保持翻墙状态</em></strong><br><strong><em>请时刻保持翻墙状态</em></strong></p>\n<p>当然最好使用安装git后自带的git bash 不要用cmd了。   </p>\n<p>   <a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\">官网说明传送门</a></p>\n<p>为了方便小语种的同学，这里简单赘述一下<br>1.你需要安装nodejs 10.0 以上的版本</p>\n<p>然后你就可以开始安装RN了,这里需要注意的是win下可能会提示你缺少各种依赖的模块包，耐心安装，并不是没有尽头…</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-native-app</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-hello-world\">2.Hello World</span><a href=\"#2-hello-world\" class=\"header-anchor\">#</a></h4><p>折腾完了现在开始创建你的项目吧，用下面的命令(AwesomeProject(超屌的项目),名字你可以随便起（其实不能随便起，千万不要带有react这个单词，否则会出现莫名其妙的问题），这是官方示例给的一个名字)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-native-app AwesomeProject</span><br></pre></td></tr></table></figure>\n<p>创建完成后跳到项目跟目录让他在你的安卓机上跑起来吧：）<br><a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">官方文档传送门</a></p>\n<p>安装Expo , 并且保证你的机器所用的网络跟pc在同一个局域网段,可以使用 <code>set REACT_NATIVE_PACKAGER_HOSTNAME</code> 来设置使用哪个ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n<p>真机或者用模拟器运行程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn android</span><br></pre></td></tr></table></figure>\n<p>现在 你应该已经看到官方为你准备的Welcome页面了，这个页面在项目根目录下的app.js下</p>\n<p>参考链接:<br>  <a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">点我传送 - 官方文档</a><br>  <a href=\"https://github.com/pkaq/react-native-android-lession/blob/master/react-android-lession2.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.md/\">点我传送 - 踩坑宝典&lt;上&gt;</a><br>  <a href=\"http://bbs.react-native.cn/category/3/blogs\">点我传送 - 踩坑宝典&lt;下&gt;</a></p>\n","categories":["React Native","Hybrid"],"tags":["React Native","Hybrid"]},{"title":"cordova笔记-配置安装以及hello world","url":"https://pkaq.org/2015/11/24/cordova-1/","content":"<p><a href=\"http://segmentfault.com/a/1190000002560220\">&gt;&gt;请点击这里查看原文&lt;&lt;</a></p>\n<a id=\"more\"></a>\n<p>1.安装nodejs </p>\n<p>2.安装coordova模块</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cordova</span><br></pre></td></tr></table></figure>\n<p>这个安装过程需要花费很长的时间，推荐采用 <a href=\"http://segmentfault.com/a/1190000000471219\">淘宝的npm镜像</a></p>\n<p>3.安装android开发环境并且配置环境变量，在Terminal里面输入android看看有没有android的版本管理器出来就说明配置有没有做好，关于如何配置环境变量搜素一下，<a href=\"http://www.micmiu.com/lang/java/set-javahome-on-mac-os-x/\">mac的看这里</a>  </p>\n<p>4.安装ant，cordova采用ant来做的持续集成，需要配置ant环境，搜素一下，<br><a href=\"http://blog.csdn.net/crazybigfish/article/details/18215439\">mac的看这里</a></p>\n<p>5.创建HelloWorld执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova create hello com.example.hello HelloWorld</span><br></pre></td></tr></table></figure>\n<p>这个过程异常的艰难，希望你有个好网络</p>\n<p>6.配置开发平台，进入hello目录，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform add android</span><br></pre></td></tr></table></figure>\n<p>7.编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build</span><br></pre></td></tr></table></figure>\n<p>8.安装，非常不喜欢虚拟机，所以直接插上android运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run android</span><br></pre></td></tr></table></figure>\n<p>如果希望启动虚拟机</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova emulate android</span><br></pre></td></tr></table></figure>\n<p>然后一个很傻的，没有什么功能的应用就装在手机上了</p>\n<p>9.进一步开发，用Android Studio导入工程，在\\hello\\www目录下就是html开发内容，hybrid的开发就在这里做<br>在这个阶段中对环境变量的修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;$PATH:/Users/xxx/android-sdk-macosx/platform-tools&quot;</span><br><span class=\"line\">export PATH=&quot;$PATH:/Users/xxx/android-sdk-macosx/tools&quot;</span><br><span class=\"line\">export PATH=&quot;$PATH:/Users/xxx/android-sdk-macosx&quot;</span><br><span class=\"line\">export PATH=&quot;$PATH:/Users/xxx/apache-ant-1.9.4/bin&quot;</span><br><span class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</span><br></pre></td></tr></table></figure>\n\n\n","categories":[],"tags":["Cordova","Android"]},{"title":"MongoDB 3.x 笔记 - 2：用户创建和鉴权配置","url":"https://pkaq.org/2015/10/26/mongo1/","content":"<p>MongoDB默认安装后是不需要密码的。<br>此时你 show dbs 会看到只有一个local数据库，那个所谓的admin是不存在的。</p>\n<p>mongoDB 没有root，只有能管理用户的用户 userAdminAnyDatabase。</p>\n<a id=\"more\"></a>\n<h4><span id=\"1-she-zhi-jian-quan-mo-shi\">1.设置鉴权模式</span><a href=\"#1-she-zhi-jian-quan-mo-shi\" class=\"header-anchor\">#</a></h4><p>这里由于Mongo3以后默认的鉴权机制更改为SCRAM-SHA-1,而spring-boot直到 1.3.0 rc 仍然不支持Mongo3 的新默认鉴权方式 所以这里指定为旧版本方式MONGODB-CR</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到admin库</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">查询authSchema</span></span><br><span class=\"line\">   var schema = db.system.version.findOne(&#123;“_id” : “authSchema”&#125;) </span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">设置为MONGODB-CR</span></span><br><span class=\"line\">   schema.currentVersion = 3 </span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"><span class=\"comment\">#保存</span></span></span><br><span class=\"line\">   db.system.version.save(schema) </span><br></pre></td></tr></table></figure>\n<p>定义：<br>创建一个数据库新用户用db.createUser()方法，如果用户存在则返回一个用户重复错误。</p>\n<h4><span id=\"2-yong-hu-chuang-jian\">2、用户创建</span><a href=\"#2-yong-hu-chuang-jian\" class=\"header-anchor\">#</a></h4><p>语法：<br>db.createUser(user, writeConcern)<br>    user这个文档创建关于用户的身份认证和访问信息；<br>    writeConcern这个文档描述保证MongoDB提供写操作的成功报告。</p>\n<p>· user文档，定义了用户的以下形式：<br>{ user: “<name>“,<br>  pwd: “<cleartext password>“,<br>  customData: { <any information> },<br>  roles: [<br>    { role: “<role>“, db: “<database>“ } | “<role>“,<br>    …<br>  ]<br>}</role></database></role></any></cleartext></name></p>\n<p>user文档字段介绍：<br>    user字段，为新用户的名字；<br>    pwd字段，用户的密码；<br>    cusomData字段，为任意内容，例如可以为用户全名介绍；<br>    roles字段，指定用户的角色，可以用一个空数组给新用户设定空角色；<br>    在roles字段,可以指定内置角色和用户定义的角色。</p>\n<pre><code>Built-In Roles（内置角色）：\n1. 数据库用户角色：read、readWrite;\n2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n4. 备份恢复角色：backup、restore；\n5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n6. 超级用户角色：root  \n// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n7. 内部角色：__system\nPS：关于每个角色所拥有的操作权限可以点击上面的内置角色链接查看详情。</code></pre>\n<p>· writeConcern文档（官方说明）<br>    w选项：允许的值分别是 1、0、大于1的值、”majority”、<tag set>；<br>    j选项：确保mongod实例写数据到磁盘上的journal（日志），这可以确保mongd以外关闭不会丢失数据。设置true启用。<br>    wtimeout：指定一个时间限制,以毫秒为单位。wtimeout只适用于w值大于1。</tag></p>\n<p>例如：在products数据库创建用户accountAdmin01，并给该用户admin数据库上clusterAdmin和readAnyDatabase的角色，products数据库上readWrite角色。<br>use products<br>db.createUser( { “user” : “accountAdmin01”,<br>                 “pwd”: “cleartext password”,<br>                 “customData” : { employeeId: 12345 },<br>                 “roles” : [ { role: “clusterAdmin”, db: “admin” },<br>                             { role: “readAnyDatabase”, db: “admin” },<br>                             “readWrite”<br>                             ] },<br>               { w: “majority” , wtimeout: 5000 } )</p>\n<h4><span id=\"pei-zhi-an-quan-yan-zheng\">配置安全验证</span><a href=\"#pei-zhi-an-quan-yan-zheng\" class=\"header-anchor\">#</a></h4><p>这里由于Mongo3以后默认的鉴权机制更改为SCRAM-SHA-1,而spring-boot直到 1.3.0 rc 仍然不支持Mongo3 的新默认鉴权方式 所以这里指定为旧版本方式MONGODB-CR</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">authorization:</span> <span class=\"string\">enabled</span></span><br><span class=\"line\"><span class=\"attr\">setParameter:</span></span><br><span class=\"line\">    <span class=\"attr\">authenticationMechanisms:</span> <span class=\"string\">MONGODB-CR,SCRAM-SHA-1</span></span><br><span class=\"line\">    <span class=\"attr\">enableLocalhostAuthBypass:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">logLevel:</span> <span class=\"number\">4</span>      </span><br></pre></td></tr></table></figure>","categories":[],"tags":["MongoDB"]},{"title":"MongoDB 3.x 笔记 - 1：安装","url":"https://pkaq.org/2015/10/24/mongo0/","content":"<p>MongoDB Version : 3.0.x</p>\n<p>  关于mongodb的好处，优点之类的这里就不说了，唯一要讲的一点就是mongodb中有三元素：数据库，集合，文档<br>其中“集合”就是对应关系数据库中的“表”，“文档”对应“行”。</p>\n<p>安装比较简单，比如</p>\n<p>Arch下可通过pacman -Sy mongodb进行安装<br>Windows下可下载msi进行安装</p>\n<p>更多可以参考官网DOC有十分详细的说明，安装完成后把bin目录加入path即可直接在命令行下调用mongo，mongod等命令了</p>\n<a id=\"more\"></a>\n\n<p>启动时可以通过指定yaml格式的参数文件设置一些参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod mongocfg/mongodb.conf</span><br></pre></td></tr></table></figure>\n<p>例如如下配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">    <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/opt/mongoHome/log/mongod.log</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">dbPath:</span> <span class=\"string\">/opt/mongoHome/db</span></span><br></pre></td></tr></table></figure>\n<p>Win下可以用如下命令将mongodb安装为系统服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --config &quot;mongod.cfg&quot; --install</span><br></pre></td></tr></table></figure>\n<p>可以输入services.msc通过服务管理器启动或者使用如下命令启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br></pre></td></tr></table></figure>\n\n<p>启动后可通过输入mongo（如果配置了环境变量），或者进入安装目录\\bin下运行mongo进入mongo控制台</p>\n<p>输入help可以看到基本操作命令：<br>show dbs:显示数据库列表<br>show collections：显示当前数据库中的集合（类似关系数据库中的表）<br>show users：显示用户</p>\n<p>use <db name>：切换当前数据库，这和MS-SQL里面的意思一样<br>db.help()：显示数据库操作命令，里面有很多的命令<br>db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令<br>db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）<br>db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</db></p>\n<p>更多参数配置请参考官方文档(<a href=\"https://docs.mongodb.org/manual/reference/parameters/\">https://docs.mongodb.org/manual/reference/parameters/</a>)</p>\n","categories":[],"tags":["mongoDB"]},{"title":"WebSphere安装","url":"https://pkaq.org/2015/01/27/2015-01-27-websphereinstall/","content":"<h3><span id=\"xia-zai-yu-an-zhuang\">下载与安装</span><a href=\"#xia-zai-yu-an-zhuang\" class=\"header-anchor\">#</a></h3><p>首先需要下载install manager :<br><a href=\"https://jazz.net/downloads/ibm-installation-manager/\">https://jazz.net/downloads/ibm-installation-manager/</a></p>\n<p>然后下载websphere<br><a href=\"http://www.ibm.com/developerworks/cn/downloads/ws/wasdevelopers/\">http://www.ibm.com/developerworks/cn/downloads/ws/wasdevelopers/</a></p>\n<p>安装install manager后,解压WebSphere,通过install manager选择WebSphere解压目录作为安装源,根据向导安装完成即可.</p>\n<a id=\"more\"></a>\n<h3><span id=\"bu-shu\">部署</span><a href=\"#bu-shu\" class=\"header-anchor\">#</a></h3><p>安装完毕后会启动一个toolbox向导,创建一个应用服务器的概要文件即可,启动与停止可以通过webaphere application server控制台窗口进行控制<br>具体部署应用可通过应用程序-&gt;新建应用程序,按照向导提示进行部署<br><img src=\"/images/2015/WebSphere/deploy.png\" alt=\"项目部署\"> </p>\n<h3><span id=\"pei-zhi-ssl\">配置SSL</span><a href=\"#pei-zhi-ssl\" class=\"header-anchor\">#</a></h3><p>我们这里介绍的WAS SSL配置是基于WAS的Application Server基础之上，如果要基于WAS的Http Server请参考其它章节。这里介绍的是在已安装好的WAS Application Server上配置SSL，因为WAS提供了完善的可视化配置界面，所以整个配置过程相比Tomcat要简单和直观很多，具体配置步骤如下。<br>1.首先进入WAS的管理控制台，展开左边菜单当中”安全性一栏”，点击其中的”证书和密钥管理”，如下图所示：<br><img src=\"/images/2015/WebSphere/1.png\" alt=\"项目部署\"><br>点击之后，在右边出现的页面当中点击”管理端点安全配置”，如下图所示：<br><img src=\"/images/2015/WebSphere/2.png\" alt=\"项目部署\"><br>在出现的”管理端点安全配置”出现的配置页面当中，我们首先选择”入站”配置，点击如下图所示的链接：<br><img src=\"/images/2015/WebSphere/3.png\" alt=\"项目部署\"><br>在当前节点配置页面当中，点击”管理证书”按钮，将我们创建的名为server.keystore的证书文件添加到WAS当中。如下图所示：<br><img src=\"/images/2015/WebSphere/4.png\" alt=\"项目部署\"><br>在出现的证书管理窗口当中，通过点击”导入”按钮，将我们创建的名为server.keystore证书文件导入到证书库中。<br><img src=\"/images/2015/WebSphere/5.png\" alt=\"项目部署\"><br>当然，如果您没有这个server.keystore文件，也可以通过这个窗口当中的提供的名为”创建自签署证书”按钮来创建一个新的证书，可以看到，这个创建界面与JDK当中提供的功能相同，只是它是以可视化的方式供我们创建一个证书。<br>选择导入证书后，我们可以看到如下图所示界面：<br><img src=\"/images/2015/WebSphere/6.png\" alt=\"项目部署\"><br>密钥文件名：是指包含完整路径的本地和server.keystore的位置，比如：E:\\cas\\server.keystore等<br>类型:我们的server.keystore加密类型为JKS，所以需要从下拉框中选择JKS即可。<br>密钥文件密码:我们在生成这个server.keystore证书时使用的密码，我们这里是changeit，所以输入changeit即可。<br>一旦这三个属性输入完成，可以点击”密钥文件密码”属性边上的”获取密钥文件别名”按钮，如果我们前三个属性输入正确，就可以在下面的”要导入的证书别名”属性列表中看到server.keystore证书的别名，我们这里为”tomcat”，最后点击确定保存即可，输入好的信息如下图所示：<br><img src=\"/images/2015/WebSphere/7.png\" alt=\"项目部署\"><br>返回到”管理端点安全配置”窗口，点击入站Node节点，进入到该节点的具体配置界面，将其”密钥库中的证书别名”属性值修改为我们之前添加的server.keystore证书，它的别名为tomcat，如下图所示：<br><img src=\"/images/2015/WebSphere/8.png\" alt=\"项目部署\"><br>再次回到”管理端点安全配置”窗口，点击出站Node节点，进入到该节点的具体配置界面,同样将其”密钥库中的证书别名”属性值修改为我们之前添加的server.keystore证书，它的别名为tomcat，这些工作做完之后，我们就将当前WAS Application Server的SSL采用的证书修改成我们自定义的名为server.keystore的证书。<br>WAS Application Server证书配置完成之后，为了验证当前证书配置的正确性，可以点击浏览器的地址栏中的证书信息进行查看，如下图所示：<br><img src=\"/images/2015/WebSphere/9.png\" alt=\"项目部署\"><br>最后可以将我们的CAS Server部署到WAS application Server当中，并配置好相应的应用客户端，测试其运行是否正常。</p>\n","categories":[],"tags":[]},{"title":"Webloigc 12 zip安装","url":"https://pkaq.org/2015/01/26/2015-01-26-installweblogic/","content":"<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\">#</a></h3><p>0.从oracle官网下载webloigc的zip包/jar安装文件  </p>\n<p>a.jar安装方式<br>    此种方式比较简单直接执行java -jar fmw_xxx.jar即可<br>    p.s:默认情况下java命令调用的是jre下面的,需要显示指定jdk/bin目录下的java程序来执行此jar文件才可以,具体安装过程有图形界面基本都是下一步之类的操作,这里不再赘述.  </p>\n<p>b.zip安装方式<br>    1.解压zip包到一个路径下,并指定MW_HOME为该解出目录<br>    2.运行configure.sh,此时会进入安装程序,中间过程会询问是否创建新的domain,可以按照步骤进行创建    </p>\n<p><img src=\"/images/2015/weblogic/1.png\" alt=\"创建domain\">  </p>\n<a id=\"more\"></a>  \n\n<p><img src=\"/images/2015/weblogic/2.png\" alt=\"启动\">  </p>\n<p>3.安装成功后如图,访问<br><a href=\"http://localhost:7001/console\">http://localhost:7001/console</a><br>用中途创建的用户名/密码登陆即可<br> <img src=\"/images/2015/weblogic/3.png\" alt=\"登陆界面\"><br> <img src=\"/images/2015/weblogic/4.png\" alt=\"登陆成功\"> </p>\n<p>p.s: 安装过程中请保证你所有用到的路径中不要有中文或者空格</p>\n<h2><span id=\"qi-dong-yu-ting-zhi\">启动与停止</span><a href=\"#qi-dong-yu-ting-zhi\" class=\"header-anchor\">#</a></h2><p>访问你的domain目录,执行startWeblogic.sh即可;<br>domain目录在 $MW_HOME/user_projects/domain/domain_name</p>\n<h2><span id=\"xiang-mu-fa-bu\">项目发布</span><a href=\"#xiang-mu-fa-bu\" class=\"header-anchor\">#</a></h2><p>可以直接将war包保存到$MW_HOME/user_projects/domain/domain_name/autodeploy下会自动部署<br>或者通过控制面板-&gt;部署-&gt;安装,按照界面提示操作</p>\n<h2><span id=\"ssl-pei-zhi\">SSL配置</span><a href=\"#ssl-pei-zhi\" class=\"header-anchor\">#</a></h2><p>以参考此文章:<br><a href=\"http://www.wosign.com/Docdownload/WeblogicSSL%E8%AF%81%E4%B9%A6%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.pdf\">http://www.wosign.com/Docdownload/WeblogicSSL证书部署指南.pdf</a></p>\n<p>此文档给出的是weblogic 9的中文版配置,为了方便中文不好的同学,下面我复述一下 weblogic 12 英文版的配置</p>\n<h3><span id=\"jin-ru-pei-zhi\">进入配置</span><a href=\"#jin-ru-pei-zhi\" class=\"header-anchor\">#</a></h3><p>0.登陆 Weblogic 成功后，来到此页面点击“environment”中的“servers”<br><img src=\"/images/2015/weblogic/0-ssl1.png\" alt=\"登陆服务器\"> </p>\n<p>1.点击图中红圈位置,进入设备管理器<br><img src=\"/images/2015/weblogic/1-ssl2.png\" alt=\"登陆服务器\"> </p>\n<h3><span id=\"qi-yong-ssl-duan-kou\">启用SSL端口</span><a href=\"#qi-yong-ssl-duan-kou\" class=\"header-anchor\">#</a></h3><p>将已启用 SSL 监听端口打勾启动，然后将默认“ 7002”改为“ 443”；<br>修改完成后，记得要点击“保存”，这样基本的端口设备完成；<br>再点击“密钥库”来进行配置证书路径文件；<br><img src=\"/images/2015/weblogic/enableport.png\" alt=\"启用端口\"> </p>\n<h3><span id=\"pei-zhi-keystore\">配置keystore</span><a href=\"#pei-zhi-keystore\" class=\"header-anchor\">#</a></h3><p>第一： 密钥库：必须选择“自定义标示和 JAVA 标准信任”；<br>第二：指定您的 JKS 证书文件路劲(例如： C:\\SSL.jks)；并且标示密钥库类型： JKS；<br>第三： 输入您的 JKS 密码和再次输入确认您的密码；<br>第四：信任区域中，可以不做任何改动；<br>第五：修改完成后，记得要点击“保存”；<br>注释：（上图长方形圈起的部分，默认密码栏目为空。此处密码可以和自己的 JKS 一样，也可以不做任何改动，此处是不影响证书正常使用。）<br><img src=\"/images/2015/weblogic/keystore.png\" alt=\"配置keystore\">  </p>\n<h3><span id=\"pei-zhi-ssl\">配置SSL</span><a href=\"#pei-zhi-ssl\" class=\"header-anchor\">#</a></h3><p>第一：标识和信任位置：选择密钥库；<br>第二：私钥别名：也就是 JKS 的别名 (WoSign 颁发的 JKS 证书文件中别名默认为： 1)；<br>第三： 私钥密码：输入您申请时候设置的密码，以及再次输入确认密码；<br>第四：修改完成后，记得要点击“保存”；<br><img src=\"/images/2015/weblogic/ssl.png\" alt=\"配置SSL\">  </p>\n<p>重启SSL使配置生效</p>\n<p>点击“environment”中的“servers” ,切换到control标签,选中你的domain 点击restartSSL<br><img src=\"/images/2015/weblogic/restartssl.png\" alt=\"配置SSL\">  </p>\n<p>扩展阅读:<br>weblogic的基本概念</p>\n<h3><span id=\"oracle-weblogic-server-domain\">Oracle Weblogic Server Domain</span><a href=\"#oracle-weblogic-server-domain\" class=\"header-anchor\">#</a></h3><p>Weblogic Server Domain（域）是一个逻辑的管理单元，一个Oracle WebLogic Server域是多个Java组件的逻辑相关组。Domain是weblogic中最大的概念，一个域下面包含着weblogic应用服务器中的所有东西，weblogic应用服务器的启动，停止都是以domain为单位进行管理的。域是由单个管理服务器管理的WebLogic Server实例的集合。<br>一个weblogic domain包含了一个特定weblogic 服务器实例：Administration Server，Administration Server是整个domain的配置以及管理所有资源的中心点。通常情况下，还会在这个domain中通过配置来扩展出其他的weblogic服务器实例，扩展出来的服务器实例叫做Managed Server。可以将java组件，例如EJB应用，Web Service，各种JAVAEE应用部署到Managed Server上，与此同时Administration Server只是用来进行配置以及管理的。在一个domain中，成组的managed server会作为集群。<br>Weblogic domain的目录和weblogic安装目录是区分开的，domain的目录可以放置于任何地方，也可以不在Middleware Home里面。<br>Domain与Oracle instance是同级的，所有的相关配置文件都在 oracle home外面。</p>\n<h3><span id=\"administration-server\">Administration Server</span><a href=\"#administration-server\" class=\"header-anchor\">#</a></h3><p>Administration server是作为整个domain配置的中心控制实体。Admin Server维护着domain的配置文件以及将配置分配到每个managed server中。Admin Server作为整个domain所有资源的监视中心。每个domain都必须存在着一个Admin Server。<br>与Admin Server交互，可以通过三种方式：Admin Server console，Oracle WebLogic Scripting Tool (WLST)，或者创建Java Management Extension (JMX) 客户端。另外，还可以使用fusion middleware的控制console（EM）来进行其中的某些事情。Console与EM都是运行在Admin Server上的。Console是基于Web用来对整个domain的资源进行管理的，包含了Admin Server以及Managed Server。EM也是基于Web的管理控制台，用以管理所有的中间件组件，例如webcenter，soa，http server等。</p>\n<h3><span id=\"managed-servers-he-managed-server-clusters\">Managed Servers和Managed Server Clusters</span><a href=\"#managed-servers-he-managed-server-clusters\" class=\"header-anchor\">#</a></h3><p>Managed Server上包含了商业应用，应用组件，Web Service，其他相关资源等等。为了优化性能，managed server维护着一个只读的domain配置文件。当一个managed server启动的时候，它会连接到Admin Server去同步的配置文件，配置文件是由Admin Server进行维护的。<br>当创建一个domain的时候，你可以去选择特定的模板去进行创建，这个模板会包含了所有你的domain的配置信息。模板可以针对不同的使用进行额外的安装。模板会支持特定的组件或者是支持特定的某组组件，例如Oracle SOA Suit。一般会针对不同的组件去创建肚子的managed server。<br>Oracle中间件的java组件（例如Oracle SOA, Webcenter，UCM等）以及自己开发的应用都是部署到managed server上的。Managed Server是java virtrual machine（JVM）进程。<br>如果你想添加某个组件到domain中，例如webcenter，你可以通过使用相应模板去扩展，创建新的managed server。<br>一般情况下，生产环境为了提高应用的性能，吞吐以及高可用，会去配置两个或者多个managed server作为集群来使用。集群就是多个同时运行，一起工作的weblogic 服务器实例的集合，集群提高了可扩展性以及可靠性。在集群中，大多数资源以及服务会对等的部署到每一个managed server中，启用故障切换以及负载均衡。一个domain可以包含多个集群。做集群和不做集群最主要的差别是故障切换与负载均衡。</p>\n<h3><span id=\"node-manager\">Node Manager</span><a href=\"#node-manager\" class=\"header-anchor\">#</a></h3><p>节点管理器是区分于weblogic服务器的一个独立运行的java工具进程，节点管理器使你能够去对managed server进行通常的操作，而不用去管相关的Admin Server在哪里。一般情况下，需要对应用对高可用配置的时候，就会启用节点管理器。节点管理器可以对managed server执行如下操作：<br>Start<br>Stop<br>Process Monitoring<br>Death Detection<br>Restart<br>如果启动了节点管理器对managed server进行管理，你就可以通过weblogic console或者命令行来针对被管理的managed server进行相应的操作。节点管理器还可以在出现未可预料的错误的时候去自动重启managed server。</p>\n<p> __参考资料<br> *<a href=\"http://www.oracle.com/technetwork/middleware/ias/downloads/wls1033-dev-readme-131493.txt\">WebLogic 12 官方安装指导</a></p>\n","categories":["Web server"],"tags":["webloigc"]},{"title":"CAS单点登陆(SSO)开发指南","url":"https://pkaq.org/2015/01/14/2015-01-14-CAS/","content":"<p>本教程使用的SSO服务器是Yelu大学研发的CAS(Central Authentication Server)，<br>官网：<a href=\"http://www.jasig.org/cas\">http://www.jasig.org/cas</a><br>下载地址:<a href=\"http://downloads.jasig.org/\">http://downloads.jasig.org/</a><br>文档地址:<a href=\"http://jasig.github.io/cas/4.0.x/index.html\">http://jasig.github.io/cas/4.0.x/index.html</a><br>本文修改的cas-server项目代码我已经放到了github上 <a href=\"https://github.com/pkaq/cas-server-3.5.2\">https://github.com/pkaq/cas-server-3.5.2</a></p>\n<h3><span id=\"huan-jing-pei-zhi\">环境配置</span><a href=\"#huan-jing-pei-zhi\" class=\"header-anchor\">#</a></h3><p>JDK:1.7.45<br>CAS版本:4.0.0</p>\n<h2><span id=\"mu-lu\">目录</span><a href=\"#mu-lu\" class=\"header-anchor\">#</a></h2><ol>\n<li> <a href=\"#env\">环境准备</a><br>___A.  <a href=\"#cert\">证书生成</a><br>______1.  <a href=\"#export\">导出证书</a><br>______2.  <a href=\"#import\">导入服务端信任证书</a><br>______3.  <a href=\"#importclient\">颁发给客户机</a><br>___B.  <a href=\"#webserver\">WEB服务器配置</a><br>______1.  <a href=\"#tomcat\">tomcat配置</a><br>______2.  <a href=\"#jboss\">jboss配置</a><br>______3.  <a href=\"#weblogic\">webloigc配置</a><br>______4.  <a href=\"#websphere\">websphere配置</a></li>\n<li> <a href=\"#server\">服务端搭建</a></li>\n<li> <a href=\"#client\">客户端搭建</a><br>___a.  <a href=\"#withjava\">JAVA客户端应用搭建</a></li>\n<li> <a href=\"#adv\">进阶应用</a><br>___a.  <a href=\"#adv_1\">配置自定义校验规则</a><br>___b.  <a href=\"#adv_2\">配置自定义认证返回参数</a><br>___c.  <a href=\"#adv_3\">配置自定义界面</a></li>\n</ol>\n<a id=\"more\"></a>\n\n<h2><span id=\"yi-cas-huan-jing-zhun-bei\"></span><a href=\"#yi-cas-huan-jing-zhun-bei\" class=\"header-anchor\">#</a></h2><h3><span id=\"a-zheng-shu-sheng-cheng\"></span><a href=\"#a-zheng-shu-sheng-cheng\" class=\"header-anchor\">#</a></h3><p>用JDK自带的keytool工具生成证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias wsria -keyalg RSA -keystore /home/mykey</span><br></pre></td></tr></table></figure>\n<p> 参数说明如图:<br> <img src=\"/images/2015/01/use-keytool-create-key.gif\" alt=\"生成秘钥\"> </p>\n<p>p.s:<br>1.也可以申请免费的startssl证书,具体申请过程请移步<br><a href=\"https://www.startssl.com/?app=11&amp;action=regform\">https://www.startssl.com/?app=11&amp;action=regform</a><br>当然国内也有一家wosign可以申请,申请速度比startssl要快一些,而且在线客服态度很好可以提供很好的帮助<br><a href=\"http://www.wosign.com/\">www.wosign.com</a>  </p>\n<p>2.具体的输入项图片中都有说明，有一点我要解释一下；在输入完密码后提示输入域名是我输入的是sso.wsria.com，其实这个域名是不存在的，但是我为了演示所以虚拟了这个域名，技巧在于修改</p>\n<p>C:\\Windows\\System32\\drivers\\etc\\hosts<br>添加内容如下：</p>\n<p>127.0.0.1  sso.wsria.com<br>这样在访问sso.wsria.com的时候其实是访问的127.0.0.1也就是本机</p>\n<h4><span id=\"1-dao-chu-zheng-shu\"></span><a href=\"#1-dao-chu-zheng-shu\" class=\"header-anchor\">#</a></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -export -file /home/my.crt -alias wsria -keystore /home/mykey</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-jia-ru-fu-wu-duan-xin-ren\"></span><a href=\"#2-jia-ru-fu-wu-duan-xin-ren\" class=\"header-anchor\">#</a></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -import -trustcacerts -alias [keyEntry_name] -file mycert.crt -keystore [keystore_name]</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3-ban-fa-zheng-shu-gei-ke-hu-ji-bing-jia-ru-jdk-xin-ren\"></span><a href=\"#3-ban-fa-zheng-shu-gei-ke-hu-ji-bing-jia-ru-jdk-xin-ren\" class=\"header-anchor\">#</a></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -import -file /opt/name.cer -keystore $JAVA_HOME/jre7/lib/security/cacerts -alias server</span><br></pre></td></tr></table></figure>\n<p>这里默认密码是changeit</p>\n<h3><span id=\"b-web-fu-wu-qi-pei-zhi\"></span><a href=\"#b-web-fu-wu-qi-pei-zhi\" class=\"header-anchor\">#</a></h3><h5><span id=\"a-tomcat\"></span><a href=\"#a-tomcat\" class=\"header-anchor\">#</a></h5><p>首先要启用Web服务器(Tomcat)的SSL，也就是HTTPS加密协议;<br>打开tomcat目录的conf/server.xml文件，找到如下行并设置keystoreFile、keystorePass修改结果如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8443&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span> <span class=\"attr\">SSLEnabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">&quot;150&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">scheme</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">secure</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">clientAuth</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sslProtocol</span>=<span class=\"string\">&quot;TLS&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">keystoreFile</span>=<span class=\"string\">&quot;/home/mykey&quot;</span> <span class=\"attr\">keystorePass</span>=<span class=\"string\">&quot;xxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参数说明:<br>keystoreFile：在第一步创建的key存放位置<br>keystorePass：创建证书时的密码</p>\n<p>p.s<br>按同样的方法来配置Tomcat 7却启动不起来，报如下错误：</p>\n<p>严重: Failed to initialize end point associated with ProtocolHandler [“http-apr-8443”]<br>java.lang.Exception: Connector attribute SSLCertificateFile must be defined when using SSL with APR</p>\n<p>仔细看上面的异常信息发现这是APR报的错误。Tomcat 6也有APR包但我从来都没用过。为此查看了Tomcat的ssl-how，在“Edit the Tomcat Configuration File”一节中说到：<br>Tomcat提供了两个SSL实现，一个是JSSE实现，另一个是APR实现。<br>Tomcat将自动选择使用哪个实现，即如果安装了APR则自动选择APR，否则选择JSSE。<br>如果不希望让Tomcat自动选择，而是我们自己指定一个实现则可通过protocol定义，如下：</p>\n<connector protocol=\"...\">\n\n<p>我又查看了6.0的相同说明，里面与7.0的说明一模一样。因此问题只可能是：是否安装了APR包。</p>\n<p>以前只听说过APR但没弄过。APR是什么文件？后来才发现APR文件名为tcnative-1.dll。进一步检查6.0和7.0的安装目录，结果发现6.0里没这个dll文件，而7.0里有。换句话说，6.0默认使用JSSE实现，而7.0默认使用APR实现。</p>\n<p>弄明白缘由就好办了。由于习惯使用6.0的配置方式（即JSEE实现），因此只要把上面conf\\server.xml里的protocol修改一下就行了：</p>\n<pre><code>&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; SSLEnabled=&quot;true&quot;\n           maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;\n           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;\n           keystoreFile=&quot;$&#123;user.home&#125;/.keystore&quot;\n           keystorePass=&quot;changeit&quot; /&gt;</code></pre>\n<p>重新启动，一切正常。</p>\n<h5><span id=\"b-jboss\"></span><a href=\"#b-jboss\" class=\"header-anchor\">#</a></h5><h6><span id=\"1-ssl-pei-zhi\">1.SSL配置</span><a href=\"#1-ssl-pei-zhi\" class=\"header-anchor\">#</a></h6><p>找到standalone-&gt;configuration-&gt;standalone.xml<br>修改<connector name=\"https\" protocol=\"HTTP/1.1\" scheme=\"https\" socket-binding=\"https\">节点为如下内容</connector></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span> <span class=\"attr\">scheme</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">socket-binding</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">secure</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">enabled</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ssl</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">key-alias</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;Masterfrank099&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">certificate-key-file</span>=<span class=\"string\">&quot;D:/key/domainname.jks&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;all&quot;</span> <span class=\"attr\">verify-client</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">connector</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>key-alias：证书别名<br>password：证书密码<br>certificate-key-file：证书放位置</p>\n<p>p.s:JBOSS 4.2以上版本服务启动如果不加任何参数的话,只监听127.0.0.1,就是说只能用127.0.0.1或者localhost访问，用本机的对外地址是访问不了，同一网络内别的机子无法访问。</p>\n<p>解决方案：打开jboss7/standalone/configuration/standalone.xml，找到如下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interface</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;public&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">inet-address</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jboss.bind.address:127.0.0.1&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">interface</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将127.0.0.1改为0.0.0.0即可解决jboss无法使用IP地址访问的问题。</p>\n<h6><span id=\"2-cas-bu-shu\">2.cas部署</span><a href=\"#2-cas-bu-shu\" class=\"header-anchor\">#</a></h6><p>1、将war包放到jboss7/standalone/ deployments目录下，启动jboss，如可正常访问，说明部署成功。<br>2、  若直接将car.war部署到jboss中，在启动时就会报错，引起错误的原因：</p>\n<ol>\n<li> 由于jboss自带有log4j日志，这就会引起jboss的log4j与cas的log4j发生冲突，将cas中引入log4j.xml的代码删除即可。</li>\n<li> 未指定hibernate的方言，打开cas.war\\WEB-INF\\classes\\META-INF\\ persistence.xml,将如下代码</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.dialect&quot;</span><span class=\"attr\">value</span>=<span class=\"string\">&quot;org.hibernate.dialect.HSQLDialect&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">//放到</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence-unit</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;CasPersistence&quot;</span> <span class=\"attr\">transaction-type</span>=<span class=\"string\">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span>下。</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">##### <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;weblogic&quot;</span>&gt;</span>c.WebLogic<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">Weblogic默认端口为7001</span><br><span class=\"line\">请移步:[\\[weblogic 12c安装\\] - ssl配置/cas部署](\\2015\\01\\26\\installweblogic\\index.html)  </span><br><span class=\"line\">p.s:</span><br><span class=\"line\">1.官方提供的zip压缩版经测试无法正常访问ssl,可能少东西</span><br><span class=\"line\">2.打成war包部署会报log4j.xml找不到错误,直接以目录形式部署没问题,出现该问题的原因应该是加载冲突所致,可考虑用serverlet方式加载spring的log4j listener</span><br><span class=\"line\"></span><br><span class=\"line\">#####<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;websphere&quot;</span>&gt;</span>d.WebSphere<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">Weblogic默认端口为9080</span><br><span class=\"line\">请移步:[\\[websphere 8.5.5安装\\] - ssl配置/cas部署](\\2015\\01\\27\\websphereinstall\\index.html)  </span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span>二、CAS服务端搭建<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t1.CAS服务端下载：http://www.jasig.org/cas/download</span><br><span class=\"line\">\t2.解压cas-server-xxx/modules/cas-server-webapp-xxx.war，改名为cas，然后复制cas目录到你的tomcat/webapp目录下</span><br><span class=\"line\">\t3.访问http://localhost:8080/cas即可看到项目首页,输入casuser/Mellon点击登录（这是4.0.x之后版本的用户名密码,3.5.x版本CAS默认的验证规则只要用户名和密码相同就通过）</span><br><span class=\"line\">\t所以如果你看到下面的这张图片你就成功了</span><br><span class=\"line\">![登陆成功](/images/2015/01/cas-login-success.gif)</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;client&quot;</span>&gt;</span>三、CAS客户端<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">### <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;withjava&quot;</span>&gt;</span>A.Java客户端集成<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">1.在客户端添加 &quot;org.jasig.cas.client:cas-client-core:+&quot;,依赖</span><br><span class=\"line\">2.配置客户端web.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 单点登陆配置开始 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 该过滤器用于实现单点登出功能，可选配置。 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 该过滤器负责用户的认证工作，必须启用它 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CASFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 服务器登陆页面url </span></span><br><span class=\"line\"><span class=\"comment\">       casServerUrlPrefix  参数的值是cas 服务的访问地址。cas client 验证ticket 的时候，</span></span><br><span class=\"line\"><span class=\"comment\">      要访问cas 服务的/serviceValidate 接口，使用的url 就是$&#123; casServerUrlPrefix &#125;serviceValidate ，</span></span><br><span class=\"line\"><span class=\"comment\">      因为客户web 应用要验证cas 的证书，所以证书cn 字段的值必须和casServerUrlPrefix 里设置的cas 服务器的域名保持一致，</span></span><br><span class=\"line\"><span class=\"comment\">      并且在web 应用的服务器上配置cas 服务的访问域名。 </span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerLoginUrl<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>https://www.sifenggu.com:8443/cas/login<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--这里的server是服务端的IP--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://localhost:9090<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CASFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 该过滤器负责对Ticket的校验工作，必须启用它 ,如果要从服务器获取用户名之外的更多信息应该采用cas20这个2.0协议的代理--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  casServerUrlPrefix  参数的值是cas 服务的访问地址。</span></span><br><span class=\"line\"><span class=\"comment\">          cas client 验证ticket 的时候，要访问cas 服务的/serviceValidate 接口，</span></span><br><span class=\"line\"><span class=\"comment\">          使用的url 就是$&#123; casServerUrlPrefix &#125;serviceValidate ，因为客户web 应用要验证cas 的证书，</span></span><br><span class=\"line\"><span class=\"comment\">          所以证书cn 字段的值必须和casServerUrlPrefix 里设置的cas 服务器的域名保持一致，并且在web 应用的服务器上配置cas 服务的访问域名。  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerUrlPrefix<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>https://www.sifenggu.com:8443/cas<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--serverName 参数，cas client 会用来生成service 参数，并且cas 服务器在认证通过、ticket 验证通过后，</span></span><br><span class=\"line\"><span class=\"comment\">      会redirect 到web 应用，redirect 的url 就是service 参数的值。serverName 参数可以是IP ，也可以是域名，只要保证浏览器能访问到即可。 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://localhost:9090<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  该过滤器负责实现HttpServletRequest请求的包裹，</span></span><br><span class=\"line\"><span class=\"comment\">  比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.jasig.cas.client.util.HttpServletRequestWrapperFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。</span></span><br><span class=\"line\"><span class=\"comment\">  比如AssertionHolder.getAssertion().getPrincipal().getName()。</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.jasig.cas.client.util.AssertionThreadLocalFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 自动根据单点登录的结果设置本系统的用户信息 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>AutoSetUserAdapterFilter<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AutoSetUserAdapterFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>demo.frank.wu.sso.cas.AutoSetUserAdapterFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AutoSetUserAdapterFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 单点登陆配置结束 --&gt;</span></span><br><span class=\"line\">  ```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;adv&quot;</span>&gt;</span>四、进阶应用<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">### <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;adv_1&quot;</span>&gt;</span>A.配置自定义校验规则<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">打开cas-server-webapp项目,找到src/main/webapp/WEB-INF/deployerConfigContext.xml,将primaryAuthenticationHandler这个bean注释掉,用如下bean替代</span><br><span class=\"line\">```xml  </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 自定义数据库鉴权 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;primaryAuthenticationHandler&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;sql&quot;</span>  <span class=\"attr\">value</span>=<span class=\"string\">&quot;select upper(password) from itsm_user where loginname= ?&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;passwordEncoder&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;MD5PasswordEncoder&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">在其它位置配置数据源以及自定义加密的bean  </span><br><span class=\"line\">```xml   </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- datasource数据源,采用此数据源需要将druid和ojdbc依赖添加到项目中 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xxx&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xxx&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:oracle:thin:@xxx.xxx.xxx.xx:1521:xxx&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minIdle&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxActive&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;120&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- MD5加密 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;MD5PasswordEncoder&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.jasig.cas.util.MD5Encoder&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关于自定义密码加密的MD5Encoder类,只要自己写一个类实现org.jasig.cas.authentication.handler.PasswordEncoder接口中的<br>  public String encode(String password)<br>方法即可,该方法的返回值是加密处理后的密码。 当然如果你用MD5加密可以采用内置的MD5PasswordEncoder;</p>\n<p>修改完成后重新打包cas-server-webapp项目<br>P.S 1:连接数据库需要增加对cas-server-support-jdbc项目和数据源以及数据库驱动的依赖，关于如何向pom添加依赖，请自补；当然最好给根POM配置一下国内的maven库（例如开源中国的），否则不仅会很慢，很多依赖也无法下载。</p>\n<p>2:由于Oracle的原因 maven库中并未提供oracle驱动，而maven又不像gradle那样可以简易友好的加载本地依赖，所以需要你找到oracle驱动并且 注 册 到 本 地 仓 库<br>mvn install:install-file -Dfile={Path/to/your/ojdbc.jar} -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar</p>\n<p>部署到tomcat之后便可以通过数据库中的正式用户进行登陆了.如果页面提示”您提供的凭证有误”多半为数据源配置或密码不匹配所致。建议检查数据源是否配置正确以及encoder加密返回的密码与数据库存储的加密密码（区分大小写）是否一致。</p>\n<p>修改完成后采用mavenpackge命令或者直接再eclipse中执行maven install进行构建即可.</p>\n<h3><span id=\"b-pei-zhi-zi-ding-yi-ren-zheng-fan-hui-can-shu\"></span><a href=\"#b-pei-zhi-zi-ding-yi-ren-zheng-fan-hui-can-shu\" class=\"header-anchor\">#</a></h3><p>默认情况下cas认证完成后只会返回username给客户端,如果需要返回更多信息需要修改deployerConfigContext.xml文件，同时配置attributeRepository如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;attributeRepository&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--指定数据源--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--指定查询sql--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;select  username,loginname from ITSM_USER  where &#123;0&#125;&quot;</span> /&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 组装sql用的查询条件属性 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;queryAttributeMapping&quot;</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t        <span class=\"comment\">&lt;!-- key必须是uername而且是小写否则会导致取不到用户的其它信息，value对应数据库用户名字段,系统会自己匹配 --&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;loginname&quot;</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;resultAttributeMapping&quot;</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t        <span class=\"comment\">&lt;!-- key为对应的数据库字段名称，value为提供给客户端获取的属性名字，系统会自动填充值 --&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;loginname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;loginname&quot;</span>/&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;username&quot;</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;serviceRegistryDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.jasig.cas.services.InMemoryServiceRegistryDaoImpl&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;registeredServices&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.jasig.cas.services.RegexRegisteredService&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;HTTP and IMAP&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Allows HTTP(S) and IMAP(S) protocols&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;serviceId&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;^(https?|imaps?)://.*&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;evaluationOrder&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000001&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 此属性相当关键,必须配置后客户端才能获取信息 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;allowedAttributes&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>username<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>loginname<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>找到casServiceValidationSuccess.jsp。此文件作用是在server验证成功后，这个页面负责生成与客户端交互的xml信息，在默认的casServiceValidationSuccess.jsp中，只包括用户登录名，并不提供其他的属性信息，因此需要对页面进行扩展。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page session=<span class=\"string\">&quot;false&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> prefix=<span class=\"string\">&quot;fn&quot;</span> %&gt;</span><br><span class=\"line\">&lt;cas:serviceResponse xmlns:cas=<span class=\"string\">&#x27;http://www.yale.edu/tp/cas&#x27;</span>&gt;</span><br><span class=\"line\">\t&lt;cas:authenticationSuccess&gt;</span><br><span class=\"line\">\t\t&lt;cas:user&gt;$&#123;fn:escapeXml(assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.id)&#125;&lt;/cas:user&gt;</span><br><span class=\"line\">\t\t&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;not empty pgtIou&#125;&quot;</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;cas:proxyGrantingTicket&gt;$&#123;pgtIou&#125;&lt;/cas:proxyGrantingTicket&gt;</span><br><span class=\"line\">\t\t&lt;/c:if&gt;</span><br><span class=\"line\">\t\t&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;fn:length(assertion.chainedAuthentications) &gt; 1&#125;&quot;</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;cas:proxies&gt;</span><br><span class=\"line\">\t\t\t\t&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;proxy&quot;</span> items=<span class=\"string\">&quot;$&#123;assertion.chainedAuthentications&#125;&quot;</span> varStatus=<span class=\"string\">&quot;loopStatus&quot;</span> begin=<span class=\"string\">&quot;0&quot;</span> end=<span class=\"string\">&quot;$&#123;fn:length(assertion.chainedAuthentications)-2&#125;&quot;</span> step=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;cas:proxy&gt;$&#123;fn:escapeXml(proxy.principal.id)&#125;&lt;/cas:proxy&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/c:forEach&gt;</span><br><span class=\"line\">\t\t\t&lt;/cas:proxies&gt;</span><br><span class=\"line\">\t\t&lt;/c:if&gt;</span><br><span class=\"line\">\t   &lt;!-- 在server验证成功后，这个页面负责生成与客户端交互的xml信息，在默认的casServiceValidationSuccess.jsp中，只包括用户名，并不提供其他的属性信息，因此需要对页面进行扩展 --&gt;  </span><br><span class=\"line\">       &lt;c:<span class=\"keyword\">if</span>  test=<span class=\"string\">&quot;$&#123;fn:length(assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.attributes) &gt; 0&#125;&quot;</span>&gt;</span><br><span class=\"line\">\t        &lt;cas:attributes&gt;</span><br><span class=\"line\">\t            &lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;attr&quot;</span></span><br><span class=\"line\">\t               items=<span class=\"string\">&quot;$&#123;assertion.chainedAuthentications[fn:length(assertion.chainedAuthentications)-1].principal.attributes&#125;&quot;</span>&gt;</span><br><span class=\"line\">\t                &lt;cas:$&#123;fn:escapeXml(attr.key)&#125;&gt;$&#123;fn:escapeXml(attr.value)&#125;&lt;/cas:$&#123;fn:escapeXml(attr.key)&#125;&gt;</span><br><span class=\"line\">\t            &lt;/c:forEach&gt;</span><br><span class=\"line\">\t        &lt;/cas:attributes&gt;</span><br><span class=\"line\">   \t\t&lt;/c:if&gt;</span><br><span class=\"line\">\t&lt;/cas:authenticationSuccess&gt;</span><br><span class=\"line\">&lt;/cas:serviceResponse&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>客户端获取用户信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AttributePrincipal principal = (AttributePrincipal) request.getUserPrincipal();</span><br><span class=\"line\">String loginName = principal.getName();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;loginName:&quot;</span> + loginName);</span><br><span class=\"line\">Map&lt;String, Object&gt; attributes = principal.getAttributes();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;username:&quot;</span> + attributes.get(<span class=\"string\">&quot;username&quot;</span>));</span><br></pre></td></tr></table></figure>\n<h3><span id=\"c-cas-jie-mian-xiu-gai\"></span><a href=\"#c-cas-jie-mian-xiu-gai\" class=\"header-anchor\">#</a></h3><p>1.cas统一认证的登陆页面位于：cas目录/WEB-INF/view/jsp/default 文件夹里，其中ui/casLoginView.jsp为登陆页面</p>\n<p>2.首先复制一份default文件夹 重命名为myview</p>\n<p>3.然后复制classes/default.properties  到 classes/mytheme.properties 打开mytheme.properties 修改登陆页面的路径为我们复制的myview 文件夹。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 修改登陆页面为自定义页面</span></span><br><span class=\"line\"><span class=\"comment\">## mod by wuf 2015/1/16</span></span><br><span class=\"line\"><span class=\"meta\">casLoginView.url</span>=<span class=\"string\">/WEB-INF/view/jsp/myview/ui/casLoginView.jsp</span></span><br></pre></td></tr></table></figure>\n<p>4 修改 cas目录/cas.properties 中 cas.viewResolver.basename =mytheme</p>\n<p>到这一步我们只是将登陆页面拷贝了一份然后指向这份拷贝，接下来我们就可以随意修改我们拷贝的页面，这样做的目的是如果以后想还原回来比较方便，只需要修改引用就行。</p>\n<p>接下来我们修改casLoginView.jsp页面：</p>\n<p>修改的要求是：需要保留登陆form表单（但可以修改样式，虽然表单标签是带前缀的，但和普通html标签一样修改其样式，也可以将所有的信息输出删除 如&lt;spring:message code=”screen.welcome.label.netid.accesskey” var=”userNameAccessKey” /&gt;）但必须保留保单中的用户名、密码输入框，确认按钮，而且最好复制其标签，修改其class属性来修改样式.</p>\n<p>__参考资料<br>*<a href=\"http://www.liferay.com/community/wiki/-/wiki/Main/JBoss+AS7+tips#section-JBoss+AS7+tips-Installing+cas-web\">Jboss as 7 wiki - Installing cas-web</a><br>*<a href=\"http://wiki.bsdn.org/pages/viewpage.action?pageId=2326779\">WebLogic上CAS服务器搭建</a><br>*<a href=\"http://wiki.bsdn.org/pages/viewpage.action?pageId=2326775\">WebSphere上搭建CAS Server</a><br>*<a href=\"http://www.coin163.com/java/cas/cas.html\">CAS实现单点登陆的原理</a><br>*<a href=\"http://blog.csdn.net/frinder/article/details/7969925\">CAS单点登陆(SSO)完整教程</a><br>*<a href=\"http://blog.csdn.net/alonesword/article/details/17692269\">修改cas登陆页面-服务器端</a><br>*<a href=\"http://exceptioneye.iteye.com/blog/1886131\">单点登录 - CAS【四】获取更全面的用户信息</a></p>\n</connector>","categories":["SSO"],"tags":["cas"]},{"title":"installarchwithaui","url":"https://pkaq.org/2014/09/19/2014-09-18-installarchwithaui/","content":"<p>最近在Github上发现一Arch脚本,可以极大简化Arch安装,今日已在实体机亲测,非常好使<br> <a href=\"https://github.com/helmuthdu/aui\">archlinux安装脚本</a>  </p>\n<h2><span id=\"xian-jue-tiao-jian\">先决条件</span><a href=\"#xian-jue-tiao-jian\" class=\"header-anchor\">#</a></h2><p> 1.网络畅通<br> 2.以root用户登陆</p>\n<h2><span id=\"ru-he-huo-qu\">如何获取</span><a href=\"#ru-he-huo-qu\" class=\"header-anchor\">#</a></h2><h3><span id=\"cai-yong-git-fang-shi-huo-qu\">采用Git方式获取</span><a href=\"#cai-yong-git-fang-shi-huo-qu\" class=\"header-anchor\">#</a></h3><p>•安装Git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpacman -Sy git  </span><br><span class=\"line\">```  </span><br><span class=\"line\">•获取脚本</span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tgit clone git://github.com/helmuthdu/aui   </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 采用非Git方式</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\twget --no-check-certificate https://github.com/helmuthdu/aui/tarball/master -O - | tar xz  </span><br><span class=\"line\">```  </span><br><span class=\"line\">或者采用短地址</span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\twget --no-check-certificate http://bit.ly/NoUPC6 -O - | tar xz  </span><br></pre></td></tr></table></figure>\n<p>或者采用更短的:)  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ow.ly/wnFgh -o aui.zip  </span><br></pre></td></tr></table></figure>\n<h2><span id=\"ru-he-shi-yong\">如何使用</span><a href=\"#ru-he-shi-yong\" class=\"header-anchor\">#</a></h2><p>切换到脚本所在目录执行./fifo或者./lilo然后按提示步骤操作即可,关于两个脚本的区别请参阅github介绍.这里不再翻译.~~:},<br>如果采用fifo脚本安装可以再安装完成后自行安装图形界面等,具体可参考<a href=\"/2014/06/19/installarch\">拥抱Arch Linux-安装配置小记</a><br>•FIFO [system base]:  cd <dir> &amp;&amp; ./fifo<br>•LILO [the rest…]:  cd <dir> &amp;&amp; ./lilo</dir></dir></p>\n","categories":["archlinux"],"tags":["Arch"]},{"title":"ArchLinux配置alias","url":"https://pkaq.org/2014/07/18/2014-07-18-aliasonarch/","content":"<p>直接用如下命令可以设置alias,但此种方式重启后会丢失,可通过将如下命令加到profile文件的方式来使其永久生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias ll=&#x27;ls -l&#x27;</span><br><span class=\"line\">alias ..=&#x27;cd ..&#x27;</span><br></pre></td></tr></table></figure>\n<p>编辑<del>/.bashrc,将所需alias添加到此文件中即可.<br>另:有的发行版可以通过添加</del>/.bash_aliases文件来进行指定,在arch中没有进行尝试.不知道是否可行.  </p>\n<pre class=\" language-shell\"><code class=\"language-shell\">    vim ~/.bashrc  </code></pre>\n","categories":["archlinux"],"tags":["Arch"]},{"title":"ArchLinux配置SSH publickey登录","url":"https://pkaq.org/2014/07/18/2014-07-18-sshonarch/","content":"<h3><span id=\"1-an-zhuang-openssh\">1.安装OpenSSH</span><a href=\"#1-an-zhuang-openssh\" class=\"header-anchor\">#</a></h3><pre class=\" language-shell\"><code class=\"language-shell\">    #安装\n    pacman -S openssh\n    #启动\n    systemctl start sshd.service\n    #添加到守护进程\n    systemctl enable sshd.service</code></pre>\n<h3><span id=\"2-pei-zhi\">2.配置</span><a href=\"#2-pei-zhi\" class=\"header-anchor\">#</a></h3><pre class=\" language-shell\"><code class=\"language-shell\">    vim /etc/ssh/sshd_config</code></pre>\n<p>修改如下两个参数为<br>UsePAM no<br>PubkeyAuthentication yes<br>设置完成后重启服务  </p>\n<pre class=\" language-shell\"><code class=\"language-shell\">    systemctl restart sshd.service  </code></pre>\n<h3><span id=\"3-sheng-cheng-key\">3.生成key</span><a href=\"#3-sheng-cheng-key\" class=\"header-anchor\">#</a></h3><pre class=\" language-shell\"><code class=\"language-shell\">    ssh-keygen -t rsa  </code></pre>\n<p>该过程中会提示输入密码,直接回车略过即可忽略密码<br>添加认证</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">    cat ~/.ssh/id_rsa.pub>>authorized_keys  </code></pre>\n<a id=\"more\"></a>\n<p>知识普及:  </p>\n<ol>\n<li><p>PublicKey认证基本原理<br> Public Key（非对称，asymmetric）认证使用一对相关联的Key Pair（一个公钥Public Key，一个私钥Private Key）来代替传统的密码（或我们常说的口令，Password）。顾名思义，PublicKey是用来公开的，可以将其放到SSH服务器自己的帐号中，而PrivateKey只能由自己保管，用来证明自己身份。<br>使用PublicKey加密过的数据只有用与之相对应的PrivateKey才能解密。这样在认证的过程中，PublicKey拥有者便可以通过PublicKey加密一些东西发送给对应的PrivateKey拥有者，如果在通信的双方都拥有对方的PublicKey（自己的PrivateKey只由自己保管），那么就可以通过这对Key Pair来安全地交换信息，从而实现相互认证。在使用中，我们把自己的PublicKey放在通过安全渠道放到服务器上，PrivateKey自己保管（用一个口令把PrivateKey加密后存放），而服务器的PublicKey一般会在第一次登录服务器的时候存放到本地客户端（严格地说来服务器的PublicKey也应该通过安全渠道放到本地客户端，以防止别人用他自己的PublicKey来欺骗登录）。</p>\n</li>\n<li><p>Public Key认证相对于其它SSH认证的优点<br>在众多SSH登录认证中，传统的单口令（Password）认证用得比较多，所以在这里我们主要对比一下SSH认证中的口令（Password）认证和PublicKey认证的区别。<br>a. 基于主机IP（rhost）的认证：对于某个主机（IP）信任并让之登录，这种认证容易受到IP欺骗攻击。 b. Kerberos认证：一个大型的基于域的认证，这种认证安全性高，但是太大、太复杂不方便部署。<br>c. PAM认证：类似于传统的密码认证，是绝大多数Unix/Linux系统自带的一个认证和记帐的模块，它的功能比较复杂，配置起来比较麻烦。而且，容易由于配置失误而引起安全问题。 汗维<br>d. 传统的Unix/Linux口令（或密码Password）认证：在客户端直接输入帐号密码，然后让SSH加密传输到服务器端验证。这种认证方式有着如下明显的缺点：<br>1）为了确保密码安全，密码必须很长很复杂，但是这样的密码很难记忆；<br>2）对于自己所拥有的每个帐号，为了安全，不同的帐号都要设置不同的密码，管理起来很不方便；<br>3） 对于默认帐号，默认密码，例如装机时用的帐号，如果一时疏忽没有改密码，被其它不怀好意的人扫描到帐号和密码，可能会造成安全漏洞；<br>4）如果远程主机已经被攻击，即使使用SSH安全通道进行保护，在网络上发送的密码在到达远程主机时也可能被截获；<br>5）对于每个帐号的修改都要人工登录（为了安全，不能把Password放到脚本里），随着服务器数量增多，这项工作会变得十分烦琐。</p>\n</li>\n<li><p>Public Key配置<br>使用一种被称为”公私钥”认证的方式来进行ssh登录. “公私钥”认证方式简单的解释:首先在客户端上创建一对公私钥 （公钥文件：<del>/.ssh/id_rsa.pub； 私钥文件：</del>/.ssh/id_rsa）<br>然后把公钥放到服务器上（~/.ssh/authorized_keys）, 自己保留好私钥.在使用ssh登录时,ssh程序会发送私钥去和服务器上的公钥做匹配.如果匹配成功就可以登录了</p>\n</li>\n</ol>\n","categories":["archlinux"],"tags":["Arch"]},{"title":"在ArchLinux上安装Oracle12C","url":"https://pkaq.org/2014/07/08/2014-07-08-installoracleforarch/","content":"<p>关于这个问题,按照官方Wiki基本可以走通,但中间会有些许问题.  </p>\n<h3><span id=\"0-an-zhuang-qian-zhun-bei\">0.安装前准备</span><a href=\"#0-an-zhuang-qian-zhun-bei\" class=\"header-anchor\">#</a></h3><p>1.首先你得保证可以ping通自己的主机名,关于这点可以参阅上一篇文章<a href=\"/2014/06/19/installarch\">拥抱Arch Linux-安装配置小记</a><br>2.其次需要有桌面环境,可以参考<a href=\"/2014/06/19/installarch/#installx\">安装X环境</a>和<a href=\"/2014/06/19/installarch/#xfce4\">安装XFCE4</a><br>3.保证网络畅通(netctl使用以及双网卡配置后续补充</p>\n<a id=\"more\"></a>\n\n<h3><span id=\"1-an-zhuang-ruan-jian-bao\">1.安装软件包</span><a href=\"#1-an-zhuang-ruan-jian-bao\" class=\"header-anchor\">#</a></h3><p>安装Oracle数据库必需的软件包</p>\n<p>Arch i686:<br>◾base-devel<br>◾java-runtime (openjdk6 or jre jdk)<br>◾ksh, rpm, gawk, gdb, libaio, libelf, sysstat, unixodbc, libstdc++5<br>◾unzip, sudo </p>\n<p>Arch x86_64:<br>◾base-devel<br>◾java-runtime (openjdk6 or jre jdk)<br>◾ksh, rpm, gawk, gdb, libaio, libelf, sysstat, libstdc++5<br>◾unzip, sudo<br>执行 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t pacman -S unzip sudo java-runtime base-devel</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">Oracle32位数据库需要unixodbc。 </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpacman -S unixodbc</span><br></pre></td></tr></table></figure>\n\n<p>可选的lib32 软件包 x86_64: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S lib32-libstdc++5 </span><br><span class=\"line\">pacman -S lib32-glibc </span><br><span class=\"line\">pacman -S lib32-gcc-libs</span><br></pre></td></tr></table></figure>\n<p>这里可能会找不到lib32的包,是因为没有开启multilib<br>编辑/etc/pacman.d/mirrorlist里把multilib的几行解除注释</p>\n<p>Oracle数据库需要32位的libaio和unixodbc在x86_64上，但在32位上是不必要的。 </p>\n<p>Oracle Universal Installer需要的一些软链接。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/bin/rpm /bin/rpm</span><br><span class=\"line\">ln -s /usr/bin/ksh /bin/ksh</span><br><span class=\"line\">ln -s /bin/awk /usr/bin/awk</span><br><span class=\"line\">ln -s /bin/tr /usr/bin/tr</span><br><span class=\"line\">ln -s /usr/bin/basename /bin/basename</span><br></pre></td></tr></table></figure>\n\n<p>Arch x86_64: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tln -s /usr/lib /usr/lib64</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 2.安装KSH</span></span></span><br><span class=\"line\">由于这个需要通过AUR安装所以你需要一个yaourt,参阅[安装yaourt](/2014/06/19/installarch/#yaourt)安装yaourt</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tyaourt ksh</span><br><span class=\"line\">```  </span><br><span class=\"line\">然后根据界面提示进行无脑操作即可.  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 3.配置</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">为Orcale数据库创建用户和组： </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tgroupadd oinstall</span><br><span class=\"line\">\tgroupadd dba</span><br><span class=\"line\">\tuseradd -m -g oinstall -G dba oracle</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">为用户oracle设置密码： </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpasswd oracle</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">可选: Add oracle to the sshd_config file. </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpacman -S openssh</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">添加如下内容到 /etc/ssh/sshd_config: </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tAllowUsers oracle</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">添加如下内容到 /etc/sudoers.</span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\toracle    ALL=(ALL) ALL</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">在99-sysctl.conf添加如下内容 /etc/sysctl.d/99-sysctl.conf</span><br><span class=\"line\">```shell  </span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> oracle kernel settings</span></span><br><span class=\"line\">\tfs.file-max = 6553600</span><br><span class=\"line\">\tkernel.shmall = 2097152</span><br><span class=\"line\">\tkernel.shmmax = 2147483648</span><br><span class=\"line\">\tkernel.shmmni = 4096</span><br><span class=\"line\">\tkernel.sem = 250 32000 100 128</span><br><span class=\"line\">\tnet.ipv4.ip_local_port_range = 1024 65535</span><br><span class=\"line\">\tnet.core.rmem_default = 4194304</span><br><span class=\"line\">\tnet.core.rmem_max = 4194304</span><br><span class=\"line\">\tnet.core.wmem_default = 262144</span><br><span class=\"line\">\tnet.core.wmem_max = 262144</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在limits.conf 添加如下内容 /etc/security/limits.conf</span><br><span class=\"line\">```shell  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> oracle settings</span></span><br><span class=\"line\">\toracle           soft    nproc   2047</span><br><span class=\"line\">\toracle           hard    nproc   16384</span><br><span class=\"line\">\toracle           soft    nofile  1024</span><br><span class=\"line\">\toracle           hard    nofile  65536</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">可选: 想使变化生效您可以重启电脑。 </span><br><span class=\"line\"></span><br><span class=\"line\">为Ocale数据库创建一些目录。您可以选择目录路径。下面是参考例子。 </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tmkdir -p /oracle</span><br><span class=\"line\">\tmkdir -p /oracle/inventory</span><br><span class=\"line\">\tmkdir -p /oracle/recovery</span><br><span class=\"line\">\tmkdir -p /oracle/product/db</span><br><span class=\"line\">```  </span><br><span class=\"line\">&lt;font color=&quot;red&quot;&gt;注意:根据官方建议这里的路径最好不要改&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">为目录设定权限。 </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tchown -R oracle:dba /oracle</span><br><span class=\"line\">\tchmod 777 /tmp</span><br></pre></td></tr></table></figure>\n\n\n<p>更改.bashrc文件 /home/oracle/.bashrc.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ORACLE_BASE=/oracle</span><br><span class=\"line\">export ORACLE_HOME=/oracle/product/db</span><br><span class=\"line\">export ORACLE_SID=xdb</span><br><span class=\"line\">export ORACLE_INVENTORY=/oracle/inventory</span><br><span class=\"line\">export ORACLE_BASE ORACLE_SID ORACLE_HOME</span><br><span class=\"line\">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH</span><br><span class=\"line\">export EDITOR=VIM</span><br><span class=\"line\">export VISUAL=nano</span><br></pre></td></tr></table></figure>\n<h3><span id=\"4-an-zhuang\">4.安装</span><a href=\"#4-an-zhuang\" class=\"header-anchor\">#</a></h3><p>切换到安装目录执行./runInstaller 即可</p>\n<p>安装过程中可能(基本是必然)出现如下问题</p>\n<p>a.安装过程进行到80%多(所有文件复制完毕,并开始链接后), 报错<br>ins_precomp.mk<br>INFO: /usr/bin/ld: <oracle_home>/lib//libnls12.a(lxhlang.o): undefined reference to symbol ‘__tls_get_addr@@GLIBC_2.3′<br>这是因为oracle安装文件自带的 库文件太老了</oracle_home></p>\n<p>需要删除 {ORACLE_HOME}/lib/stubs 这个目录 (对于我的设置,就是 /opt/oracle/product/12.1.0.1.0/lib/stubs</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">    cd /opt/oracle/product/12.1.0.1.0/lib\n    rm -rf stubs</code></pre>\n<p>2.在图形安装界面 点击Retry继续, 再次报错</p>\n<p>ins_rdbms.mk<br>libclient12.a(kpue.o): undefined reference to symbol ‘ons_subscriber_close’<br>….<br>libons.so: could not read symbols: Invalid operation<br>修改 rdbms/lib/ins_rdbms.mk 的 883行 和 901 行</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$(PLSHPROF) : $(ALWAYS) $(PLSHPROF_DEPS)\n        $(SILENT)$(ECHO)\n        $(SILENT)$(ECHO) \" - Linking hierarchical profiler utility (plshprof)\"\n        $(RMF) $@\n        $(PLSHPROF_LINKLINE) -lons\n\n....\n    897 $(RMAN) : $(ALWAYS) $(RMAN_DEPS)\n    898         $(SILENT)$(ECHO)\n    899         $(SILENT)$(ECHO) \" - Linking recovery manager (rman)\"\n    900         $(RMF) $@\n    901         $(RMAN_LINKLINE) -lons</code></pre>\n<p>3.在图形节目 Retry, 第3次报错</p>\n<p>ins_rdbms.mk<br>houzi.o: undefined reference to symbol ‘ztcsh’<br>libnnz12.so: could not read symbols: Invalid operation<br>修改 ins_rdbms.mk 的 1067行</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">   1063 $(TG4PWD) : $(ALWAYS) $(TG4PWD_DEPS)\n   1064         $(SILENT)$(ECHO)\n   1065         $(SILENT)$(ECHO) \" - Linking $(TG4DG4)pwd utility\"\n   1066         $(RMF) $@\n   1067         $(TG4PWD_LINKLINE) -lnnz12</code></pre>\n<p> 4.安装完成后可能会遇到无法创建数据库、无法启动等诸多奇葩问题，一般重启可解决。。。   </p>\n<p> __参考资料<br> *<a href=\"http://bbs.csdn.net/topics/390743335\">oracle12c archlinux 安装出错</a></p>\n<p> *Arch wiki - oracle 安装<br> <a href=\"https://wiki.archlinux.org/index.php/Oracle_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">https://wiki.archlinux.org/index.php/Oracle_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n<p> *<a href=\"http://tieba.baidu.com/p/2494225213\">lib32包找不到的问题</a></p>\n","categories":[],"tags":["Arch"]},{"title":"拥抱Arch Linux-安装配置小记","url":"https://pkaq.org/2014/06/19/2014-06-19-installarch/","content":"<h2><span id=\"mu-lu\">目录</span><a href=\"#mu-lu\" class=\"header-anchor\">#</a></h2><ol>\n<li><p>   <a href=\"#startvirtualbox\">启动虚拟机</a>   </p>\n</li>\n<li><p>   <a href=\"#disk\">磁盘规划</a>   </p>\n</li>\n<li><p>   <a href=\"#filesystem\">创建磁盘文件系统</a>  </p>\n</li>\n<li><p>   <a href=\"#mount\">挂载磁盘</a>  </p>\n</li>\n<li><p>   <a href=\"#mirrorlist\">选择镜像-设置更新源</a>  </p>\n</li>\n<li><p>   <a href=\"#install\">安装基本系统</a>  </p>\n</li>\n<li><p><a href=\"#basicsetup\">基本系统设置</a><br> a.    <a href=\"#language\">设置语言</a><br> b.    <a href=\"#hostname\">设置主机名</a><br> c.    <a href=\"#timezone\">设置时区</a><br> d.    <a href=\"#ramdisk\">创建ramdisk</a><br> e.    <a href=\"#checksyslinux\">检查syslinux的配置文件是否正确</a><br> f.    <a href=\"#syslinux\">安装syslinux启动管理器,以便实现ArchLinux的顺利启动</a><br> g.    <a href=\"#root\">为root超级用户添加密码</a><br> h.    <a href=\"#exit\">退出当前系统环境</a><br> i.    <a href=\"#adduser\">添加用户</a><br> j.    <a href=\"#network\">配置网络</a><br> k.    <a href=\"#installx\">安装X桌面环境</a><br> l.    <a href=\"#xfce4\">安装XFCE4 桌面套件</a><br> m.    <a href=\"#xfce4auto\">设置xfce4自启动</a>　　<br> n.    <a href=\"#inputmethod\">安装浏览器和输入法</a><br> o.    <a href=\"#yaourt\">安装yaourt</a>       </p>\n</li>\n<li><p>   <a href=\"#vbaddition\">为VBOX安装增强功能</a>   </p>\n</li>\n<li><p><a href=\"#adv\">附录</a><br> a.<a href=\"#slimthemes\">为slim安装主题</a><br> b.<a href=\"#feh\">看图软件</a><br> c.<a href=\"#zsh\">zsh</a><br> d.<a href=\"#ksh\">ksh</a><br> e.<a href=\"#office\">office</a><br> f.<a href=\"#sublime\">文本编辑工具sublime</a><br> j.<a href=\"#wicd\">网络管理工具wicd</a><br>  h.<a href=\"#netctl\">使用netctl</a></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2><span id=\"yi-qi-dong-xu-ni-ji\"></span><a href=\"#yi-qi-dong-xu-ni-ji\" class=\"header-anchor\">#</a></h2><p>启动虚拟机,选择对应的选项,可以在虚拟机里面安装64位系统又有这个欲望的，选第二个进去。<br><img src=\"/images/2014/archinstall/1.png\" alt=\"启动\"></p>\n<h2><span id=\"er-ci-pan-gui-hua\"></span><a href=\"#er-ci-pan-gui-hua\" class=\"header-anchor\">#</a></h2><p>从光驱启动完毕后首先进行磁盘规划<br>键入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tcfdisk</span><br><span class=\"line\">```  </span><br><span class=\"line\">![分区](/images/2014/archinstall/2.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">弹出的界面选 New  </span><br><span class=\"line\">![新建分区](/images/2014/archinstall/3.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">新手可以不用分区，如果需要分多个区，建议一个 / 一个/home，如果内存大，不需要swap分区。使用cfdisk分区比较直观。</span><br><span class=\"line\">·注意【Bootable】，/ 分区一定要Bootable</span><br><span class=\"line\"></span><br><span class=\"line\">因为这里磁盘规划只有三个分区,所以接下来统一用主分区的形式,选Primary,如果磁盘规划超过4个分区的,规划完3个主分区之后自行调整剩下的空间为扩展分区,然后在扩展分区里面再进行剩余磁盘规划操作</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![主分区](/images/2014/archinstall/4.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">boot 规划100M就很够了</span><br><span class=\"line\"></span><br><span class=\"line\">![主分区](/images/2014/archinstall/5.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">选Beginning  </span><br><span class=\"line\"></span><br><span class=\"line\">![主分区](/images/2014/archinstall/6.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">按一下Bootable,激活当前boot所在分区/dev/sda1,之后可以看到sda1的flags标记下面有个boot  </span><br><span class=\"line\"></span><br><span class=\"line\">![主分区](/images/2014/archinstall/7.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">![主分区](/images/2014/archinstall/8.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">光标移动到free space ,选 New 规划swap 交换分区  </span><br><span class=\"line\"></span><br><span class=\"line\">![交换分区](/images/2014/archinstall/9.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">类型主分区,原因上面已经说过,不喜欢的可以选逻辑分区,大小给1G差不多,多了也没什么太大的用处  </span><br><span class=\"line\">\t</span><br><span class=\"line\">![主分区](/images/2014/archinstall/10.png)  </span><br><span class=\"line\">![主分区](/images/2014/archinstall/11.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">选Beginning  </span><br><span class=\"line\"></span><br><span class=\"line\">![Beginning](/images/2014/archinstall/12.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">移动到Type选项回车  </span><br><span class=\"line\"></span><br><span class=\"line\">![Type](/images/2014/archinstall/13.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">磁盘类型选择82  </span><br><span class=\"line\">![磁盘类型](/images/2014/archinstall/14.png)    </span><br><span class=\"line\">![磁盘类型](/images/2014/archinstall/15.png)  </span><br><span class=\"line\">![磁盘类型](/images/2014/archinstall/16.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">光标移动到free space 把剩下的空间全部给根节点  </span><br><span class=\"line\">   </span><br><span class=\"line\">![根分区](/images/2014/archinstall/17.png)     </span><br><span class=\"line\">![根分区](/images/2014/archinstall/18.png)   </span><br><span class=\"line\">![根分区](/images/2014/archinstall/19.png)   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">移动到write选项回车  </span><br><span class=\"line\"></span><br><span class=\"line\">![Write](/images/2014/archinstall/20.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">输入yes保存刚才所做的分区更改  </span><br><span class=\"line\">![Write yes](/images/2014/archinstall/21.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">移动到quit选项完成磁盘分区规划操作  </span><br><span class=\"line\">![Quit](/images/2014/archinstall/22.png)  </span><br><span class=\"line\">![Quit](/images/2014/archinstall/23.png)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;filesystem&quot;&gt;三、创建磁盘文件系统&lt;/a&gt;</span></span></span><br><span class=\"line\">boot 所在的磁盘分区sda1 用ext4文件系统,当然用其他文件系统也可以</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmkfs.ext4 /dev/sda1  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">![创建分区](/images/2014/archinstall/24.png)  </span><br><span class=\"line\">![创建分区](/images/2014/archinstall/25.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">根节点所在分区sda3 用主流的ext4文件系统即可 </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmkfs.ext4 /dev/sda3</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">![创建分区](/images/2014/archinstall/26.png)  </span><br><span class=\"line\">![创建分区](/images/2014/archinstall/27.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">交换分区 </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmkswap /dev/sda2</span><br><span class=\"line\">```   </span><br><span class=\"line\">![创建分区](/images/2014/archinstall/28.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">激活交换分区</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tswapon /dev/sda2</span><br><span class=\"line\">```   </span><br><span class=\"line\">![激活](/images/2014/archinstall/29.png)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;mount&quot;&gt;四、挂载磁盘&lt;/a&gt;</span></span>  </span><br><span class=\"line\">挂载磁盘到AIS Bash安装脚本支持的 mnt 目录:</span><br><span class=\"line\"></span><br><span class=\"line\">先挂载根节点</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmount /dev/sda3 /mnt</span><br><span class=\"line\">```  </span><br><span class=\"line\">![挂载](/images/2014/archinstall/30.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">mnt 目录下面创建boot目录用来挂载 boot所在的分区   </span><br><span class=\"line\">![挂载](/images/2014/archinstall/31.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">挂载boot所在分区到 mnt下面的boot目录</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmount /dev/sda1 /mnt/boot</span><br><span class=\"line\">```  </span><br><span class=\"line\">![挂载](/images/2014/archinstall/32.png)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;mirrorlist&quot;&gt;五、选择镜像-设置更新源&lt;/a&gt;</span></span>  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tnano /etc/pacman.d/mirrorlist</span><br><span class=\"line\">```   </span><br><span class=\"line\">p.s:找带China的，PageDown PageUp 滚屏，Ctrl+V 向下翻页，Ctrl+Y 向上翻页， Alt+6 复制当前行，Ctrl+u 粘贴，Ctrl+x 退出，保存按Y，回车。</span><br><span class=\"line\">163站点在最下面不远处，我复制了2个，放在最上面，如图所示。   </span><br><span class=\"line\">推荐使用   [中国科技大学的源 ](http://mirrors.ustc.edu.cn/archlinux/,&quot;中国科技大学的源&quot;)  ,其余的均可以删除。  </span><br><span class=\"line\"></span><br><span class=\"line\">![设置源](/images/2014/archinstall/33.jpg)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;install&quot;&gt;六、安装基本系统&lt;/a&gt;</span></span>  </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacstrap /mnt base base-devel syslinux vim</span><br><span class=\"line\">```   </span><br><span class=\"line\">p.s:这里需要说明一下,一般来说base就够了,不过后期安装软件基本上会用到base-devel,所以把这个系统软件包组也选上;syslinux是引导程序包(可以根据习惯调整为grub2),双系统情况下,如果物理机器上不想用syslinux覆盖磁盘mbr来引导的,可以通过grub4dos之类的引导linux,具体google一大把;vim是编辑软件,仅仅是为了方便安装完基本系统后编辑配置文件,如果不喜欢的可以用nano 或者安装其他编辑工具</span><br><span class=\"line\"></span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/34.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">回车后会自动查找源,下载软件包,安装  </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/35.png)    </span><br><span class=\"line\"></span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacstrap -i /mnt net-tools</span><br><span class=\"line\">```    </span><br><span class=\"line\">p.s:也许大多数人对ifconfig这种网络配置命令比较习惯,那么请安装net-tools软件包,而且安装可以添加 i 参数实现一定程度上的交互式安装,这样就不会像上面一样自动下载安装,这里可以不执行,不影响系统搭建  </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/36.png)   </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/37.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">用AIS脚本自动生成fstab,也就是当前磁盘挂载情况的文件</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tgenfstab -p /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class=\"line\">```  </span><br><span class=\"line\">\\&gt;&gt; 是Unix Like下面常见的重定向符号  </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/38.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">chroot到刚才安装完毕的基本系统,进行最基础的系统配置</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tarchroot /mnt</span><br><span class=\"line\">```  </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/39.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">进入到新环境以后的情况,可以看到终端前面的提示符已经发生了变化  </span><br><span class=\"line\">![安装基本系统](/images/2014/archinstall/40.png)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;basicsetup&quot;&gt;七、基本系统配置&lt;/a&gt;</span></span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;language&quot;&gt;A.设置语言&lt;/a&gt;</span></span>  </span><br><span class=\"line\">设置系统支持的locale,只需要找到en_US 以及zh_CN开头的,然后把注释符号#去掉即可</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/locale.gen</span><br><span class=\"line\">```  </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/41.png)   </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/42.png)   </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/43.png)    </span><br><span class=\"line\">保存退出  </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/44.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">执行</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tlocale-gen</span><br><span class=\"line\">```  </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/45.png)   </span><br><span class=\"line\"></span><br><span class=\"line\">设置系统默认的locale,这里决定了进入桌面后是英文界面还是中文界面,我习惯了英文界面,所以设置如下图2所示,喜欢中文界面的可以简单设置为LANG=zh_CN.UTF-8</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/locale.conf  </span><br><span class=\"line\">```  </span><br><span class=\"line\">添加适合自己的locale</span><br><span class=\"line\">![语言设置](/images/2014/archinstall/46.png)  </span><br><span class=\"line\">![语言设置](/images/2014/archinstall/47.png)     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;hostname&quot;&gt;B.设置主机名&lt;/a&gt;</span></span>  </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/hostname  </span><br><span class=\"line\">```  </span><br><span class=\"line\">里面添加自己喜欢的名称,这里演示输入zhongguoyidou,请根据自己的喜好更改 </span><br><span class=\"line\">![设置主机名](/images/2014/archinstall/48.png)  </span><br><span class=\"line\">![设置主机名](/images/2014/archinstall/49.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">修改 hosts文件,添加刚才设置的主机名</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/hosts</span><br><span class=\"line\">```  </span><br><span class=\"line\">![设置主机名](/images/2014/archinstall/50.png)  </span><br><span class=\"line\">![设置主机名](/images/2014/archinstall/51.png)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;timezone&quot;&gt;C.设置时区&lt;/a&gt;</span></span></span><br><span class=\"line\">设置时区为亚洲/上海,创建一个软链接即可</span><br><span class=\"line\">键入 </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  </span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/timezone</span><br><span class=\"line\">```  </span><br><span class=\"line\">添加Asia/Shanghai 这一行后保存退出</span><br><span class=\"line\"></span><br><span class=\"line\">多系统的可以设置为本地时间,避免出现系统切换时间8小时之差的情况</span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\thwclock --systohc --localtime</span><br><span class=\"line\">```  </span><br><span class=\"line\">![设置时区](/images/2014/archinstall/52.png)  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;ramdisk&quot;&gt;D.创建ramdisk&lt;/a&gt;</span></span></span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tmkinitcpio -p linux </span><br><span class=\"line\">```  </span><br><span class=\"line\">如果不满意默认配制的自行根据需要修改 /etc/mkinitcpio.conf 再执行此命令创建,一般来说默认即可  </span><br><span class=\"line\">![创建ramdisk](/images/2014/archinstall/53.png)  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##&lt;a name=&quot;checksyslinux&quot;&gt;E.检查syslinux的配置文件是否正确&lt;/a&gt;</span></span>  </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /boot/syslinux/syslinux.cfg  </span><br><span class=\"line\">```  </span><br><span class=\"line\">如果分区规划跟我一样的可以不检查也行,默认的就可以.其他自行检查append root=/dev/sdax 这行的sdax ----- 设置为正确的根节点所在分区即可  </span><br><span class=\"line\"></span><br><span class=\"line\">![检查syslinux的配置文件是否正确](/images/2014/archinstall/54.png)  </span><br><span class=\"line\">![检查syslinux的配置文件是否正确](/images/2014/archinstall/55.png)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;syslinux&quot;&gt;F.安装syslinux启动管理器,以便实现ArchLinux的顺利启动&lt;/a&gt;</span></span></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tsyslinux-install_update -iam</span><br><span class=\"line\">```  </span><br><span class=\"line\">![检查syslinux的配置文件是否正确](/images/2014/archinstall/56.png)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##&lt;a name=&quot;root&quot;&gt;G.为root超级用户添加密码&lt;/a&gt;</span></span></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpasswd  </span><br></pre></td></tr></table></figure>\n<p>输入密码需要两遍以确认是否一致,且密码不会显示在屏幕上<br><img src=\"/images/2014/archinstall/57.png\" alt=\"为root超级用户添加密码\">  </p>\n<h3><span id=\"h-tui-chu-dang-qian-xi-tong-huan-jing\"></span><a href=\"#h-tui-chu-dang-qian-xi-tong-huan-jing\" class=\"header-anchor\">#</a></h3><p>键入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2014/archinstall/58.png\" alt=\"退出当前系统环境\">  </p>\n<p>返回到安装镜像启动所在的系统环境<br>键入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tumount /mnt/boot</span><br><span class=\"line\">\tumount /mnt/</span><br><span class=\"line\">\treboot</span><br><span class=\"line\">```  </span><br><span class=\"line\">关机并且从磁盘引导系统  </span><br><span class=\"line\">![关机并且从磁盘引导系统](/images/2014/archinstall/59.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">重起后的系统初始选择界面   </span><br><span class=\"line\">![重起后的系统初始选择界面](/images/2014/archinstall/60.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">启动系统后要求输入用户名以及密码</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\troot</span><br><span class=\"line\">```  </span><br><span class=\"line\">输入密码  </span><br><span class=\"line\">![登录系统](/images/2014/archinstall/61.png)  </span><br><span class=\"line\"></span><br><span class=\"line\">顺利进入系统  </span><br><span class=\"line\">![登录系统](/images/2014/archinstall/62.png)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;adduser&quot;&gt;I.添加用户&lt;/a&gt;</span></span>  </span><br><span class=\"line\">添加一个普通用户,比如这里的kafan_zhongguoyidou,具体的其他参数自己google</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tuseradd -m -s /bin/bash kafan_zhongguoyidou</span><br><span class=\"line\">```  </span><br><span class=\"line\">![添加一个普通用户](/images/2014/archinstall/63.jpg) </span><br><span class=\"line\">添加完毕为普通用户设定一个密码</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpasswd kafan_zhongguoyidou</span><br><span class=\"line\">```  </span><br><span class=\"line\">为刚才添加的普通用户添加sudo的相关权限,这里只做一点简要设置,其他自己参阅</span><br><span class=\"line\">键入 visudo</span><br><span class=\"line\">找到图示中root那行,添加图示一行  </span><br><span class=\"line\">![添加一个普通用户](/images/2014/archinstall/64.png)  </span><br><span class=\"line\">![添加一个普通用户](/images/2014/archinstall/65.png) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;network&quot;&gt;J.配置网络&lt;/a&gt;</span></span>  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"><span class=\"comment\">#查看可用网卡</span></span></span><br><span class=\"line\">\tifconfig -a</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"><span class=\"comment\">#启动网卡</span></span></span><br><span class=\"line\">\tifconfig eth0 up</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"><span class=\"comment\">#获取ip</span></span></span><br><span class=\"line\">\tdhcpcd  eth0</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;xdestop&quot;&gt;K.安装X桌面环境&lt;/a&gt;</span></span>  </span><br><span class=\"line\">这里以xfce4这个折中的桌面套件来演示,可以根据自己的爱好选择其他桌面套件或者窗口管理器,接下来不配过多的图,主要叙述一下软件包安装相关指令</span><br><span class=\"line\">进入系统后首先更新软件包相关数据,如果提示有更新先更新一下软件</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -Syu</span><br><span class=\"line\">```  </span><br><span class=\"line\">![添加一个普通用户](/images/2014/archinstall/66.png)</span><br><span class=\"line\"></span><br><span class=\"line\">如果你不知道自己是什么显卡，就用下面的命令查看下：  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tlspci | grep VGA</span><br><span class=\"line\">```  </span><br><span class=\"line\">然后执行下面的命令搜索下匹配你显卡的驱动  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -Ss xf86-video | less</span><br><span class=\"line\">```  </span><br><span class=\"line\">我是VirtualBox，所以我就安装一个万能的，你们安装匹配的，比如你是Intel集成的就执行：  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S xf86-video-intel</span><br><span class=\"line\">```  </span><br><span class=\"line\">虚拟机就执行  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S xf86-video-vesa</span><br><span class=\"line\">```  </span><br><span class=\"line\">笔记本还可以装下触摸板驱动  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S xf86-input-synaptics</span><br><span class=\"line\">```  </span><br><span class=\"line\">安装声卡驱动</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S alsa-utils</span><br><span class=\"line\">```  </span><br><span class=\"line\">测试X环境是否安装好了，可以执行下面的命令，其实不用测试。  </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpacman -S xorg-twm xorg-xclock xterm </span><br><span class=\"line\">\tstartx </span><br><span class=\"line\">\texit </span><br><span class=\"line\">\tpkill X</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##&lt;a name=&quot;xfce4&quot;&gt;L.安装XFCE4 桌面套件&lt;/a&gt;</span></span></span><br><span class=\"line\">先安装slim，这是一个图像、登录管理器，可用于xfce4的自启动。  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S slim</span><br></pre></td></tr></table></figure>\n<p>安装完成后需要执行来自启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tsystemctl enable slim.service   </span><br><span class=\"line\">```  </span><br><span class=\"line\">键入</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S xfce4</span><br><span class=\"line\">```  </span><br><span class=\"line\">出现的软件包组选择全部即可</span><br><span class=\"line\"></span><br><span class=\"line\">安装sudo,让普通用户无需切换执行一些root用户指令</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S sudo</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">安装中文字体</span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S wqy-microhei wqy-zenhei wqy-bitmapfont</span><br><span class=\"line\">```  </span><br><span class=\"line\">至于美化，都是通过界面操作的，system-setting可以设置字体，另外terminal的preference可以设置它用的字体。</span><br><span class=\"line\"></span><br><span class=\"line\">现在，大功告成！！启动！！！</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tstartxfce4</span><br><span class=\"line\">```  </span><br><span class=\"line\">![添加一个普通用户](/images/2014/archinstall/67.jpg)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;xfce4auto&quot;&gt;M.设置xfce4自启动&lt;/a&gt;</span></span>　　</span><br><span class=\"line\">要将SLiM配置为加载某个特定的环境，只需编辑~/.xinitrc如下：  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span></span><br><span class=\"line\"><span class=\"bash\">\t<span class=\"comment\"># ~/.xinitrc</span></span></span><br><span class=\"line\"><span class=\"meta\">\t#</span></span><br><span class=\"line\"><span class=\"bash\">\t<span class=\"comment\"># Executed by startx (run your window manager from here)</span></span></span><br><span class=\"line\"><span class=\"meta\">\t#</span></span><br><span class=\"line\"><span class=\"bash\">\t</span></span><br><span class=\"line\">\texec [session-command]</span><br><span class=\"line\">```  </span><br><span class=\"line\">注意：如果你没有~/.xinitrc文件，可以从系统中复制一个：  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t$</span><span class=\"bash\"> cp /etc/skel/.xinitrc ~</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">将[session-command]替换为适当的会话命令。例如：</span><br><span class=\"line\"></span><br><span class=\"line\">要启动Xfce:  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Xfce</span></span><br><span class=\"line\">\texec startxfce4</span><br><span class=\"line\">```  </span><br><span class=\"line\">要启动Openbox：  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Openbox</span></span><br><span class=\"line\">\texec openbox-session</span><br><span class=\"line\">```  </span><br><span class=\"line\">要启动Fluxbox:  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Fluxbox</span></span><br><span class=\"line\">\texec fluxbox</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Either fluxbox or startfluxbox is acceptable</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">要启动GNOME:  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> GNOME</span></span><br><span class=\"line\">\texec gnome-session</span><br><span class=\"line\">```  </span><br><span class=\"line\">要启动KDE:  </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> KDE</span></span><br><span class=\"line\">\texec startkde</span><br><span class=\"line\">```  </span><br><span class=\"line\">如果你的桌面环境不在上述列表中，请参考你的软件文档  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##&lt;a name=&quot;inputmethod&quot;&gt;N.安装浏览器和输入法&lt;/a&gt;</span></span>  </span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S firefox</span><br><span class=\"line\">```  </span><br><span class=\"line\">安装火狐浏览器  </span><br><span class=\"line\"></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S fcitx fcitx-gtk fcitx-gtk2 fcitx-gtk3 fcitx-qt fcitx-configtool  </span><br><span class=\"line\">```  </span><br><span class=\"line\">安装小企鹅输入法  </span><br><span class=\"line\">p.s:这里如果不安装gtk和configtool的话的是没有图形配置界面的  </span><br><span class=\"line\"></span><br><span class=\"line\">然后编辑~/.profile  设置一些参数</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\texport GTK_IM_MODULE=fcitx</span><br><span class=\"line\"> \texport QT_IM_MODULE=fcitx</span><br><span class=\"line\">\texport XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class=\"line\">\tkillall fcitx</span><br><span class=\"line\">\tfcitx &amp;</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;a name=&quot;yaourt&quot;&gt;O.安装yaourt&lt;/a&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Yaourt是archlinux方便使用的关键部件之一，但没有被整合到系统安装中的工具。建议在装完系统重启之后，更新完pacman和基本系统之后，就安装这个工具。   </span><br><span class=\"line\"></span><br><span class=\"line\">安装方法有下面两种：建议使用第一种，如果要体验AUR的操作过程和使用方法，建议使用第二种方法安装。   </span><br><span class=\"line\"></span><br><span class=\"line\">简便的安装  </span><br><span class=\"line\"></span><br><span class=\"line\">最简单安装Yaourt的方式是添加Yaourt源至您的 /etc/pacman.conf:  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\t[archlinuxcn]</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\">The Chinese Arch Linux communities packages.</span></span><br><span class=\"line\">\tSigLevel = Optional TrustAll</span><br><span class=\"line\">\tServer   = http://repo.archlinuxcn.org/$arch</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">或者 </span><br><span class=\"line\">```shell</span><br><span class=\"line\">[archlinuxfr]</span><br><span class=\"line\">Server = http://repo.archlinux.fr/$arch</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">或者 </span><br><span class=\"line\">```shell</span><br><span class=\"line\"> [archlinuxfr]</span><br><span class=\"line\"> Server = http://repo-fr.archlinuxcn.org/$arch</span><br><span class=\"line\">```  </span><br><span class=\"line\">P.S:注意 必须要加上 SigLevel = Optional TrustAll,否则会报package-query: missing required signature错误</span><br><span class=\"line\"></span><br><span class=\"line\">同步并安装： </span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pacman -Syu yaourt</span></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># &lt;a name=&quot;vbaddition&quot;&gt;八、为VBOX安装增强功能&lt;/a&gt;</span></span>  </span><br><span class=\"line\">键入</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S virtualbox-guest-utils</span><br><span class=\"line\">```   </span><br><span class=\"line\">重启即可</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 9.&lt;a name=&quot;adv&quot;&gt;附录&lt;/a&gt;</span></span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## a.&lt;a name=&quot;slimthemes&quot;&gt;为slim安装主题&lt;/a&gt;</span></span></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tcd /usr/share/slim/themes</span><br><span class=\"line\">\tls</span><br><span class=\"line\">```   </span><br><span class=\"line\">可以查看当前所有可用主题   </span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S slim-themes</span><br><span class=\"line\">```  </span><br><span class=\"line\">安装其它主题,选择一个喜欢的然后键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tvim /etc/slim.conf</span><br></pre></td></tr></table></figure>\n<p>找到current theme配置项修改即可  </p>\n<h3><span id=\"b-kan-tu-ruan-jian-feh\">b.</span><a href=\"#b-kan-tu-ruan-jian-feh\" class=\"header-anchor\">#</a></h3><p>键入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpacman -S feh</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## c.&lt;a name=&quot;zsh&quot;&gt;zsh&lt;/a&gt;</span></span></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpacman -S zsh</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## d.&lt;a name=&quot;ksh&quot;&gt;ksh&lt;/a&gt;</span></span></span><br><span class=\"line\">键入  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tyaourt -S ksh</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## e.&lt;a name=&quot;office&quot;&gt;office&lt;/a&gt;</span></span></span><br><span class=\"line\">键入 </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tpacman -S libreoffice</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## f.&lt;a name=&quot;sublime&quot;&gt;文本编辑工具sublime&lt;/a&gt;</span></span></span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tyaourt -S sublime-text-dev</span><br></pre></td></tr></table></figure>\n<h3><span id=\"j-wang-luo-guan-li-gong-ju-wicd\">j.</span><a href=\"#j-wang-luo-guan-li-gong-ju-wicd\" class=\"header-anchor\">#</a></h3><p>键入   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpacman -Sy wicd wicd-gtk</span><br><span class=\"line\">```  </span><br><span class=\"line\">你很可能还要安装DHCP和无线安全管理程序。</span><br><span class=\"line\">键入   </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tpacman -S dhclient wpa_supplicant</span><br></pre></td></tr></table></figure>\n<p>编辑/etc/rc.conf文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvim /etc/rc.conf</span><br><span class=\"line\">\tDAEMONS = (syslog-ng !network wicd dbus alsa)</span><br><span class=\"line\">```  </span><br><span class=\"line\">在network前面加上 ! 并在network后加上 wicd</span><br><span class=\"line\"></span><br><span class=\"line\">为用户添加组权限  </span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tgpasswd -a USERNAME users</span><br><span class=\"line\">\tgpasswd -a USERNAME network</span><br><span class=\"line\">```  </span><br><span class=\"line\">启动服务</span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\tsystemctl start wicd</span><br><span class=\"line\">```  </span><br><span class=\"line\">运行  </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\twicd-client</span><br><span class=\"line\">```   </span><br><span class=\"line\">通知栏按钮  </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\twicd-client --tray</span><br><span class=\"line\">```  </span><br><span class=\"line\">清除通知栏按钮  </span><br><span class=\"line\">```shell  </span><br><span class=\"line\">\twicd-client -n</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## h.&lt;a name=&quot;netctl&quot;&gt;使用netctl&lt;/a&gt;</span></span>  </span><br><span class=\"line\">经过一段时间的使用发现wicd有些不尽如人意的地方,所以已经换成了netctl来管理</span><br><span class=\"line\">具体设置可以完全参考wiki,要注意的是需要把dhcpcd关掉不然会启动失败</span><br><span class=\"line\">```shell</span><br><span class=\"line\">\tsystemctl disable dhcpcd@ethX.service</span><br></pre></td></tr></table></figure>\n<p>由于我是采用双网卡模式,A网卡是自动获取IP,B网卡是采用静态IP<br>所以只需要禁用掉B网卡的dhcpcd即可,并且参考wiki将静态ip的profile文件添加到自启动即可<br>常用命令如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">复制配置文件</span></span><br><span class=\"line\">cp /etc/netctl/examples/wireless-wpa /etc/netctl/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置文件</span></span><br><span class=\"line\">vim profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">手动启动配置文件</span></span><br><span class=\"line\">netctl start profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看配置文件状态</span></span><br><span class=\"line\">netctl status profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置配置文件自启动</span></span><br><span class=\"line\">netctl enable profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">去除配置文件自启动</span></span><br><span class=\"line\">netctl disable profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置文件</span></span><br><span class=\"line\">netctl reenable profile</span><br></pre></td></tr></table></figure>\n<p>p.s:需要注意的是配置文件中<br>IP和Routes节点不可同时放开,否则会因为冲突而导致加载配置文件失败</p>\n<p>__参考资料<br>*<a href=\"http://www.cnblogs.com/mad/p/3280041.html\">Archlinux网络配置</a>  </p>\n<p>*<a href=\"http://blog.csdn.net/helloanyone/article/details/7012487\">如何安装ArchLinux</a>  </p>\n<p>*<a href=\"http://bbs.kafan.cn/thread-1371928-1-1.html\">大道至简,原来你就是这么KISS—ArchLinux基本系统到XFCE4桌面搭建</a>   </p>\n<p>*<a href=\"https://www.archlinux.org/mirrors/status\">Arch镜像列表</a>   </p>\n<p>*Arch wiki - slim安装<br><a href=\"https://wiki.archlinux.org/index.php?title=SLiM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&amp;oldid=212382\">https://wiki.archlinux.org/index.php?title=SLiM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&amp;oldid=212382</a>  </p>\n<p>*Arch wiki - yaourt安装<br><a href=\"https://wiki.archlinux.org/index.php/Yaourt_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">https://wiki.archlinux.org/index.php/Yaourt_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29</a></p>\n<p>*Arch wiki - wicd安装<br><a href=\"https://wiki.archlinux.org/index.php/Wicd\">https://wiki.archlinux.org/index.php/Wicd</a></p>\n<p>*Arch wiki - netctl使用<br><a href=\"https://wiki.archlinux.org/index.php/Netctl_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">https://wiki.archlinux.org/index.php/Netctl_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n","categories":["POSIX"],"tags":["Arch"]},{"title":"Jenkins+Gradle搭建CI环境","url":"https://pkaq.org/2013/12/03/2013-12-03-gradleforjenkins/","content":"<h4><span id=\"ban-ben-shuo-ming\">版本说明</span><a href=\"#ban-ben-shuo-ming\" class=\"header-anchor\">#</a></h4><ul>\n<li>jenkins 1.542</li>\n<li>jdk 1.6u45</li>\n<li>gradle 1.9</li>\n</ul>\n<h4><span id=\"bi-yao-tiao-jian\">必要条件</span><a href=\"#bi-yao-tiao-jian\" class=\"header-anchor\">#</a></h4><ul>\n<li>需要安装JDK并配置配置好JAVA_HOME和JRE_HOME的环境变量</li>\n</ul>\n<ol>\n<li><p>下载jenkins.war<br>去<a href=\"%22http://www.jenkins-ci.org/%22\">Jenkins官方网站</a>下载相应war包即可</p>\n</li>\n<li><p>使用命令行跳转到jenkins所在目录<br>可以有两种方法进行运行 jenkins<br> a)    直接通过命令行<br> 转到hudson.war所在的目录，当前为<br> java -jar jenkins.war –httpPort=8080<br> 说明：httpPort为jenkins运行的端口，默认端口为8080，上述命令其实jenkins运行在Winstone容器中；<br> b)    在Web容器中运行<br> jenkins可以运行在标准的Web服务器中，支持Tomcat、Jboss、WebLogic中，只需要将jenkins.war放置到相应目录，启动服务就可以进行访问；</p>\n</li>\n<li><p>访问jenkins <a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<a id=\"more\"></a></li>\n<li><p>安装gradle插件<br> 点击系统管理-&gt;插件管理<br> 选择”可安装插件”tab页,过滤出gradle plugin然后勾选点击直接安装即可<br> 如果需要自动部署还需要安装deploy plugin</p>\n</li>\n<li><p>配置</p>\n<ul>\n<li>鉴权配置<br>  点击系统管理 选择Configure Global Security 点击”启用安全”<br>  在访问控制下的安全域 勾选 jenkins专有用户数据库<br>  在访问控制下的授权策略里 更改为 “登录用户可以做任何事”<br>  点击保存会跳转到登陆界面,点击创建一个新用户注册一个新用户即可</li>\n<li>系统配置<br>  系统管理-&gt;系统配置-&gt;找到gradle项目,把自动安装前面的勾去掉即可设置本地gradle目录<br>  <img src=\"/images/2013/12/03/6.png\" alt=\"gradle config\"></li>\n</ul>\n</li>\n<li><p>创建任务<br> 6.1. 点击界面的”创建一个构建任务”进行创建;填入job名称 选择构建一个自由风格的项目<br> <img src=\"/images/2013/12/03/1.png\" alt=\"project config\"></p>\n<p> 6.2. 点击下一步,在”源码管理”选项下选择 subversion repository URL输入你的项目svn地址,第一次输入完之后会给出红色提示说鉴权不通过,点击enter authority,然后选择username/password输入鉴权信息即可(如果你是采用username/password方式的话),其余的保持默认即可<br> <img src=\"/images/2013/12/03/2.png\" alt=\"subversion config\"></p>\n<p> 6.3. 如果希望定时构建可以在”构建触发器”选项下 选择build periodically填写cron表达式来控制构建周期 比如每天20:00构建 H 20 * * *<br> <img src=\"/images/2013/12/03/3.png\" alt=\"cron config\"></p>\n<p> 6.4. 在”构建”选项下 点击 增加构建步骤 选择 invoke gradle script 在tasks下填入要执行的任务即可<br> <img src=\"/images/2013/12/03/4.png\" alt=\"gradlescript config\"></p>\n<p> 6.5. 自动部署<br> 在”构建后操作”选项下,点击 增加构建步骤 选择 delply war/ear to a container</p>\n<p> 在war/ear files下填入war包所在位置 如target/libs/CIMS.war<br> context path填写项目名称 如 CIMS<br> container选择容器版本 如tomcat<br> 这里需要更改目标tomcat配置 添加相应用户 然后填入相应内容即可<br> <img src=\"/images/2013/12/03/5.png\" alt=\"deploy config\"></p>\n<p> p.s:此步需要修改目标tomcat的配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi $tomcat/conf/tomcat-usres.xml</span><br><span class=\"line\">&lt;!-- 必须开启这两个权限,不然会出现 如下错误,同时该错误也可能由于内存溢出而导致ERROR: Publisher hudson.plugins.deploy.DeployPublisher aborted due to exception   --&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;\t</span><br><span class=\"line\">&lt;user username=&quot;jenkins&quot; password=&quot;jenkins&quot; roles=&quot;tomcat,manager-script,manager-gui&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击保存,搭建完成</p>\n</li>\n</ol>\n","categories":["Build Tools","DevOps"],"tags":["Gradle","Jenkins"]},{"title":"使用gradle下载jar包","url":"https://pkaq.org/2013/11/26/2013-11-26-gradledownloadjar/","content":"<p>如题 建立build.gradle文件如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"><span class=\"comment\">/**spring版本号**/</span></span><br><span class=\"line\">   <span class=\"keyword\">def</span> springVersion = <span class=\"string\">&quot;3.2.4.RELEASE&quot;</span></span><br><span class=\"line\">   compile  <span class=\"string\">&quot;org.springframework:spring-webmvc:$&#123;springVersion&#125;&quot;</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;org.springframework:spring-jdbc:$&#123;springVersion&#125;&quot;</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;org.springframework:spring-tx:$&#123;springVersion&#125;&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task copyJars(<span class=\"attr\">type:</span> Copy) &#123;</span><br><span class=\"line\">  from configurations.runtime</span><br><span class=\"line\">  into <span class=\"string\">&#x27;lib&#x27;</span> <span class=\"comment\">// 目标位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>然后控制台执行</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q copyJars</span><br></pre></td></tr></table></figure>\n<p>好了去寻找吧 泰罗</p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"Centos 6.4安装oracle 11G","url":"https://pkaq.org/2013/11/07/2013-11-07-installoracle11goncentos/","content":"<h3><span id=\"1-an-zhuang-centos\">1.安装centos</span><a href=\"#1-an-zhuang-centos\" class=\"header-anchor\">#</a></h3><h3><span id=\"2-pei-zhi-sshd\">2.配置sshd</span><a href=\"#2-pei-zhi-sshd\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi etc/ssh/sshd_config </span><br><span class=\"line\">PasswordAuthentication yes</span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-an-zhuang-ftp\">3.安装ftp</span><a href=\"#3-an-zhuang-ftp\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install vsftpd</span><br></pre></td></tr></table></figure>\n<p>允许root登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/vsftpd/ftpusers</span><br><span class=\"line\">vi /etc/vsftpd/userlist</span><br></pre></td></tr></table></figure>\n<p>把里面root前面加#<br>启动ftp</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3><span id=\"4-guan-bi-selinux\">4.关闭SELINUX</span><a href=\"#4-guan-bi-selinux\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/selinux/config   </span><br></pre></td></tr></table></figure>\n<p> 修改SELINUX=disabled，然后:wq保存退出后，输入setenforce 0 使修改生效，或者重启下电脑 </p>\n<h3><span id=\"5-fang-kai-fang-huo-qiang-dui-ftp-he-1521-de-xian-zhi\">5.放开防火墙对ftp和1521的限制</span><a href=\"#5-fang-kai-fang-huo-qiang-dui-ftp-he-1521-de-xian-zhi\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/iptables </span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 1521 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3><span id=\"6-shi-yong-lan-ren-bao\">6.使用懒人包</span><a href=\"#6-shi-yong-lan-ren-bao\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh Oracle11gPreInstaller.sh</span><br></pre></td></tr></table></figure>\n<h3><span id=\"7-an-zhuang-oracle\">7.安装oracle</span><a href=\"#7-an-zhuang-oracle\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./runInstaller</span><br></pre></td></tr></table></figure>\n<h3><span id=\"8-pei-zhi-bash-profile\">8.配置.bash_profile</span><a href=\"#8-pei-zhi-bash-profile\" class=\"header-anchor\">#</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi.bash_profile </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Get the aliases and <span class=\"built_in\">functions</span></span></span><br><span class=\"line\">if [ -f ~/.bashrc ]; then</span><br><span class=\"line\">\t. ~/.bashrc</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:$HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE_BASE=/opt/app/oracle</span><br><span class=\"line\">ORACLE_HOME=/opt/app/oracle/product</span><br><span class=\"line\">ORACLE_SID=mord</span><br><span class=\"line\">TMP=/tmp</span><br><span class=\"line\">TMPDIR=/tmp</span><br><span class=\"line\">NLS_DATE_FORMAT=&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span><br><span class=\"line\">export ORACLE_BASE ORACLE_HOME ORACLE_SID TMP TMPDIR NLS_DATE_FORMAT</span><br><span class=\"line\">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class=\"line\">export ORA_NLS33=$ORACLE_HOME/nls/data</span><br><span class=\"line\">export ORACLE_BASE</span><br><span class=\"line\">export ORACLE_HOME</span><br><span class=\"line\">export ORACLE_SID</span><br><span class=\"line\">export LANG=en_US.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/dbstart </span><br><span class=\"line\">/bin/emctl start dbconsole</span><br></pre></td></tr></table></figure>\n<h3><span id=\"9-dbca-pei-zhi-chuang-jian-shu-ju-ku\">9.dbca配置创建数据库</span><a href=\"#9-dbca-pei-zhi-chuang-jian-shu-ju-ku\" class=\"header-anchor\">#</a></h3><h3><span id=\"10-netca-she-zhi-jian-ting-fu-wu-ming\">10.netca设置监听服务名</span><a href=\"#10-netca-she-zhi-jian-ting-fu-wu-ming\" class=\"header-anchor\">#</a></h3><p><a href=\"/files/Oracle11gPreInstaller.sh\">懒人包下载</a></p>\n","categories":["linux"],"tags":["linux","oracle"]},{"title":"使用Gradle调用CMD","url":"https://pkaq.org/2013/10/18/2013-10-18-graldewithcmd/","content":"<p>关于如何使用gradle调用命令行来执行一些命令可以参考如下脚本进行修改扩展</p>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task javaVersion(<span class=\"attr\">type:</span>Exec) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里在windows下一定要加/c参数 ,否则会报错,/c是 执行字符串指定的命令然后终止</span></span><br><span class=\"line\">  commandLine <span class=\"string\">&#x27;cmd&#x27;</span>, <span class=\"string\">&#x27;/c&#x27;</span>, <span class=\"string\">&#x27;java -version&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//执行结果</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> == execResult)&#123;</span><br><span class=\"line\">\tprintln <span class=\"string\">&#x27;exec failed&#x27;</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tprintln <span class=\"string\">&#x27;exec successed&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//store the output instead of printing to the console:</span></span><br><span class=\"line\">  standardOutput = <span class=\"keyword\">new</span> ByteArrayOutputStream()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//extension method stopTomcat.output() can be used to obtain the output:</span></span><br><span class=\"line\">  ext.output = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> standardOutput.toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>控制台调用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q jV</span><br></pre></td></tr></table></figure>\n<p>具体可以查看官方API<br><a href=\"http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Exec.html\">调用命令行</a></p>\n<p>P.S:感谢gradle群中的 小和尚 提出和发现了此问题的解决方式</p>\n","categories":["Build Tools"],"tags":["Gradle"]},{"title":"借助Libreoffice/Openoffice实现Excel在线预览","url":"https://pkaq.org/2013/10/16/2013-10-16-previewexcelwithsoffice/","content":"<p>有时候你可能需要对客户上传的excel文件提供在线预览的方式,类似很多邮箱直接点击就可以在线查看.但很多第三方工具都是收费的而自己遍历excel重绘界面又比较麻烦;<br>当然如果要求事先将excel另存为html然后上传直接显示是没问题的,但显然这不够科学;那如何才能实现科学预览呢.其实直接借助Libreoffice/Openoffice在点击预览后,后台悄悄把excel另存成html就好了;具体方式如下</p>\n<p>以Centos 6.4为例;</p>\n<h3><span id=\"1-an-zhuang-zhuo-mian-huan-jing-he-office-ru-guo-yi-jing-an-zhuang-de-ke-yi-hu-lue-ci-bu-zou\">1.安装桌面环境和office(如果已经安装的可以忽略此步骤)</span><a href=\"#1-an-zhuang-zhuo-mian-huan-jing-he-office-ru-guo-yi-jing-an-zhuang-de-ke-yi-hu-lue-ci-bu-zou\" class=\"header-anchor\">#</a></h3><p>如果没有安装桌面环境的话需要先执行如下命令安装</p>\n<p><strong>安装x window</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &#x27;X Window System&#x27; -y </span><br></pre></td></tr></table></figure>\n<p><strong>安装桌面</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &#x27;Desktop&#x27; -y </span><br></pre></td></tr></table></figure>\n<p><strong>安装office</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &#x27;Office Suite and Productivity&#x27; -y </span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>P.S:不同版本的系统可能名称会有些许差异,这时可以用yum grouplist | more 来查看要安装的具体名称</p>\n<h3><span id=\"2-qi-dong-openoffice-fu-wu\">2.启动openoffice 服务</span><a href=\"#2-qi-dong-openoffice-fu-wu\" class=\"header-anchor\">#</a></h3><p>进行这一步之前,如果你进行了步骤1,安装完成后需要startx 进入桌面环境,否则会报如下错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/program/soffice.bin X11 error: Can&#x27;t open display: </span><br><span class=\"line\">  Set DISPLAY environment variable, use -display option </span><br><span class=\"line\">  or check permissions of your X-Server </span><br><span class=\"line\">  (See &quot;man X&quot; resp. &quot;man xhost&quot; for details) </span><br></pre></td></tr></table></figure>\n<p>可以修改/etc/inittab,设置默认从桌面启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/inittab</span><br></pre></td></tr></table></figure>\n<p>找到里面的 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id:3:initdefault:</span><br></pre></td></tr></table></figure>\n<p>将里面的3改成5,3是文本模式,5是桌面模式;</p>\n<p>运行如下命令启动openoffice服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soffice --headless --accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; --nofirststartwizard &amp;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-cheng-xu-diao-yong\">3.程序调用</span><a href=\"#3-cheng-xu-diao-yong\" class=\"header-anchor\">#</a></h3><p>其实就是通过程序调用office服务,然后很猥琐的将excel偷偷转化成html输出到项目下的某个文件夹里,然后页面直接加载这个html文件就可以了,以下是我当前项目的调用示例,依赖的jar我放到网盘了 需要可以下载.</p>\n<p><a href=\"http://url.cn/MG3Lwn\">下载依赖jar</a></p>\n<pre class=\" language-java\"><code class=\"language-java\">        String fileID <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        FileUpDown fileUpDown <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileUpDownManager<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>fileID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        String filePath <span class=\"token operator\">=</span> fileUpDown<span class=\"token punctuation\">.</span><span class=\"token function\">getFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String fileName <span class=\"token operator\">=</span> fileUpDown<span class=\"token punctuation\">.</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//处理文件扩展名</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileNameArr <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String extendName <span class=\"token operator\">=</span> fileNameArr<span class=\"token punctuation\">[</span>fileNameArr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        extendName <span class=\"token operator\">=</span> extendName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**浏览器支持格式*/</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> browserFormatArr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jpeg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bmp\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"png\"</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**Openoffice支持格式*/</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> officeFormatArr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"doc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"docx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xls\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"xlsx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ppt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pptx\"</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">boolean</span> browserFormatFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> officeFormatFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>officeFormatArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>extendName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>browserFormatArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                browserFormatFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>extendName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>officeFormatArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                officeFormatFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//处理输入的文件</span>\n        String fullRelativePath <span class=\"token operator\">=</span> filePath<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">;</span>\n        String realPath <span class=\"token operator\">=</span> ServletActionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span>fullRelativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        File inFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//处理输出目录</span>\n        UserView userView <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UserView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>USER_VIEW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String outFileParentRelativePath <span class=\"token operator\">=</span> <span class=\"token string\">\"tmpUploadFile/preview/\"</span><span class=\"token operator\">+</span>userView<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String outFileParentRealPath <span class=\"token operator\">=</span> ServletActionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span>outFileParentRelativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//输出文件处理前  先清空输出目录</span>\n        File outFileParent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outFileParentRealPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>outFileParent<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">deleteFiles</span><span class=\"token punctuation\">(</span>outFileParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//分辨文件类型  执行不同处理</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>browserFormatFlag<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\" spellcheck=\"true\">//浏览器可直接打开的文件，复制文件到预览目录并重命名为preview.(extendName)</span>\n            String outFileRelativePath <span class=\"token operator\">=</span> outFileParentRelativePath <span class=\"token operator\">+</span> <span class=\"token string\">\"/preview\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> extendName <span class=\"token punctuation\">;</span>\n            String outFileRealPath <span class=\"token operator\">=</span> ServletActionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span>outFileRelativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            File outFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outFileRealPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"txt\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>extendName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//文本文件要特殊处理一下   全部转换为web.xml中设置的编码格式  UTF-8   否则会乱码</span>\n                FileUtils<span class=\"token punctuation\">.</span><span class=\"token function\">writeLines</span><span class=\"token punctuation\">(</span>outFile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">,</span> FileUtils<span class=\"token punctuation\">.</span><span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>inFile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                FileUtils<span class=\"token punctuation\">.</span><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span>inFile<span class=\"token punctuation\">,</span> outFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;#123;success:true,previewPath:'\"</span><span class=\"token operator\">+</span>outFileRelativePath<span class=\"token operator\">+</span><span class=\"token string\">\"'&amp;#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>officeFormatFlag<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//Office文档，使用Openoffice处理成html</span>\n            String outFileRealPath <span class=\"token operator\">=</span> outFileParentRealPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/preview.html\"</span> <span class=\"token punctuation\">;</span>\n            File outFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outFileRealPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">convertDocToHtml</span><span class=\"token punctuation\">(</span>inFile<span class=\"token punctuation\">,</span>outFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//更改扩展名html -> htm   原因：html已经被设置为struts的Action后缀名</span>\n                String jspFileRelativePath <span class=\"token operator\">=</span> outFileParentRelativePath <span class=\"token operator\">+</span> <span class=\"token string\">\"/preview.htm\"</span> <span class=\"token punctuation\">;</span>\n                File jspFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outFileParentRealPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/preview.htm\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                outFile<span class=\"token punctuation\">.</span><span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span>jspFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;#123;success:true,previewPath:'\"</span><span class=\"token operator\">+</span>jspFileRelativePath<span class=\"token operator\">+</span><span class=\"token string\">\"'&amp;#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;#123;success:false,msg:'文件转换出现错误，预览失败。'&amp;#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;#123;success:false,msg:'不支持的文件格式(\"</span><span class=\"token operator\">+</span>extendName<span class=\"token operator\">+</span><span class=\"token string\">\")，请下载到本地计算机上预览。'&amp;#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> NONE<span class=\"token punctuation\">;</span></code></pre>\n","categories":["Java"],"tags":["Java"]},{"title":"不良的编程文化","url":"https://pkaq.org/2013/09/13/2013-09-13-codecultureproblem/","content":"<p><img src=\"/images/2013/09/12073258_ufYN.jpg\" alt=\"WTF\"><br><strong>“这代码真垃圾”</strong>，当我们翻查一些代码寻找一个特别讨厌的bug时，同事大声这样说。“是吗”，我回答到。</p>\n<p>像 这样的谴责，以及其它一些类似的话，在办公室里经常会听到，而且频率在增加。而最令人不安的是，这代码并不是特别的糟糕。我这话是什么意思？不能把它们写 的更好吗？当然！大多数的代码都有改善的空间——只要有足够的时间和资源。垃圾代码确实有，我们都看得见，而且都是我们自己写的，但这并不是问题。</p>\n<h3><span id=\"wen-ti-shi-wo-men-you-yi-ge-bu-liang-de-zhe-dai-ma-zhen-la-ji-wen-hua\">问题是我们有一个不良的“这代码真垃圾”文化。</span><a href=\"#wen-ti-shi-wo-men-you-yi-ge-bu-liang-de-zhe-dai-ma-zhen-la-ji-wen-hua\" class=\"header-anchor\">#</a></h3><p>这是一种我感觉在web开发社区中越来越常见的文化。接着上面的例子，我请同事解释一下，解释为什么这代码很垃圾，我得不到一个直接的答复。</p>\n<p>“这还不垃圾，你看这代码”，他回答说，那种趾高气扬我需要仰头才能看到他，紧邹的眉头就好象是说，如果不能看出这代码有多烂，那就是个傻子。结果你知道怎么着？我开始感觉有点傻了。我差点就忍不住开始跟着他一起嘲笑，认定这代码真的有多烂，多糟糕。</p>\n<p>在 我继续下面的内容之前，我发现上面的内容并没有在最好的光线下描绘我的同事。所以，让我弥补一下。他是个非常好的小伙。坦白的说，他是我见过的最和善的小 伙之一。他友善，有一个他很爱的家庭，他跑马拉松，乐于助人，聪明，等等等等。还有一点要说明：他是一个经验不多的新手。他还在学一些基础的开发知识。这 没什么好羞愧的，我们都经历过这个阶段。那么，为什么这样一个友善、聪明的小伙，在他参与的第一个大型web项目上，他的第一反应就是去指责一些代码很垃 圾？——他甚至还没有真正的去理解它。</p>\n<a id=\"more\"></a>\n\n<h3><span id=\"sheng-huo-gui-lu-la-ji-wang-xia-dao\">生活规律：垃圾往下倒。</span><a href=\"#sheng-huo-gui-lu-la-ji-wang-xia-dao\" class=\"header-anchor\">#</a></h3><p>这个问题并不单独出现在程序员新手中。很多精明人士都有这 习惯。你也许是一个奇才，一个久经考验的程序员，但如果有这样一种习惯，整个团队和项目都会受到负面影响。因为新手们把你当作知识和经验的源泉。越多的人 拥抱这种“这代码真垃圾”文化，这种文化就会越被认可，越成为模仿的对象。很快，程序员开始变的不是积极在项目上出力，而是去贬低别人在项目上的贡献。最 大嘴、最反面的程序员很快就成了最受尊敬的人。所有人都受折磨，项目受影响，而一部分人却能能得到赞美，为倒是都是垃圾而感到心满意足。</p>\n<h3><span id=\"wo-men-ying-gai-zen-me-zuo\">我们应该怎么做？</span><a href=\"#wo-men-ying-gai-zen-me-zuo\" class=\"header-anchor\">#</a></h3><p>没有人想显得愚蠢，没有人想自己的工作被认为劣质。一旦“这代码真垃圾”文化开始传播，唯一能确保自己在别人之上的办法就是贬低别人。最终，这变成了一种负能量，而不是想着去解决问题。</p>\n<p>那 么，对这样的一种特殊现象有什么解决方法？阻止它。不要不加思索的否定别人的代码——在没有原因、没有理解的情况下。有很多的方式可以处理那些看起来有问 题的代码。如果发现代码中有异味，想办法改进它。从理解这些代码开始，在此基础上修正。如果你发现项目中有一些不良风气，不要跟随。如果有人对你说“这代 码真垃圾”，问他为什么，然后了解查明，去做一些事情让它变的不垃圾。向最初写这些代码的人了解，也许他们这样写代码是有原因的。帮助他们，而不是诋毁他 们。</p>\n<p>下一次，当我发现从显示器里飘出可疑的异味时，我会转身问我的同事，“我们如何改进这段它？”因为，我们要面对它们，有时候代码会很垃圾，但这不意味着我们也去变成垃圾。</p>\n","categories":["Tucao"],"tags":["转载"]},{"title":"第六章： 构建基础","url":"https://pkaq.org/2013/09/06/2013-09-05-buildscriptbasics/","content":"<h4><span id=\"6-1-projects-he-tasks\">6.1 Projects 和 tasks</span><a href=\"#6-1-projects-he-tasks\" class=\"header-anchor\">#</a></h4><p>  Gradle中最重要的两个概念就是 Projects和tasks</p>\n<p> 任何一个Gradle构建都是由一个或多个 projects 组成.每个project包括许多可构建组成部分.这完全取决于你要构建些什么.举个栗子.每个project或许是一个jar包或者一个web应用,它也可以是一个由许多其他项目中产生的jar构成的zip压缩包.一个project不必描述它只能进行构建操作.它也可以部署你的应用或搭建你的环境.不要担心它像听上去的那样庞大.Gradle的build-by-convention可以让您来具体定义一个project到底该做什么.<br>  每个project都由多个tasks组成.每个task都代表了构建执行过程中的一个原子性操作.如编译,打包,生成javadoc,发布等<br>  到目前为止,可以发现我们可以在一个project中定义一些简单任务,后续章节将会阐述多项目构建和多项目多任务的内容.</p>\n<h4><span id=\"6-2-hello-world\">6.2 Hello world</span><a href=\"#6-2-hello-world\" class=\"header-anchor\">#</a></h4><p>你可以通过在命令行运行gradle命令来执行构建,gradle命令会从当前目录下寻找build.gradle文件来执行构建.我们称build.gradle文件为构建脚本.严格来说这其实是一个构建配置脚本,后面你会了接到这个构建脚本定义了一个project和一些默认tasks<br>你可以创建如下脚本到build.gradle中</p>\n<ul>\n<li>例6.1 第一个构建脚本</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>build.gradle </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task hello &#123;</span><br><span class=\"line\"> doLast &#123;</span><br><span class=\"line\">     println <span class=\"string\">&#x27;Hello world!&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在该文件所在目录执行 gradle -q hello</p>\n<ul>\n<li>例6.2 执行脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> gradle -q hello</span></span><br><span class=\"line\">Hello world!</span><br></pre></td></tr></table></figure>\n<p>上面的脚本定义了一个叫做 hello 的 task,并且给它添加了一个动作.当运行 gradle hello 的时候,Gralde便会去调用 hello 这个任务来执行给定操作.这些操作其实就是一个用groovy书写的闭包<br>如果你觉得它看上去跟Ant中的targets很像,那么是对的.Gradle的tasks就相当于Ant中的targets.不过你会发现他功能更加强大.我们只是换了一个比target更形象的另外一个术语.不幸的是这恰巧与Ant中的术语有些冲突.ant 命令中有诸如javac、copy、tasks.所以当该文档中提及tasks时,除非特别指明 ant task ,否则指的仅仅是与Gradle中的tasks.</p>\n<p>注: -q参数的作用?该文档的示例中很多地方在调用gradle命令时都加了-q参数.该参数用来控制gradle的日志级别,可以保证只输出我们需要的内容.具体可参阅本文档 第十八章 日志 来了解更多参数和信息.</p>\n<h4><span id=\"6-3-kuai-su-ding-yi-ren-wu\">6.3 快速定义任务</span><a href=\"#6-3-kuai-su-ding-yi-ren-wu\" class=\"header-anchor\">#</a></h4><ul>\n<li>例6.3 快速定义任务</li>\n</ul>\n<p>build.gradle</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task hello &lt;&lt;&#123;</span><br><span class=\"line\">   println &#x27;Hello ,world!&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的脚本又一次采用闭包来定义了一个叫做hello的任务,本文档后续章节中我们将会更多的采用这种风格来定义任务.</p>\n<p>####6.4 代码即脚本</p>\n<p>Gradle脚本采用Groovy书写,看下面这道开胃菜.</p>\n<ul>\n<li>例6.4 在gradle任务中采用groovy</li>\n</ul>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task upper &lt;&lt; &#123;</span><br><span class=\"line\">\tString someString = <span class=\"string\">&#x27;mY_NaMe&#x27;</span></span><br><span class=\"line\">\tprintln <span class=\"string\">&quot;Original : &quot;</span> +someString</span><br><span class=\"line\">\tprintln <span class=\"string\">&quot;Upper case : &quot;</span> + someString.toUpperCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">gradle -q upper</span></span><br><span class=\"line\">Original : mY_NaMe</span><br><span class=\"line\">Upper case : MY_NAME</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例 6.5 在gradle任务中采用groovy</li>\n</ul>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task count &lt;&lt; &#123;</span><br><span class=\"line\">\t<span class=\"number\">4.</span>times &#123;</span><br><span class=\"line\">\t\tprint <span class=\"string\">&quot;$it&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">gradle -q count</span></span><br><span class=\"line\">0 1 2 3</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"6-5-ren-wu-yi-lai\">6.5 任务依赖</span><a href=\"#6-5-ren-wu-yi-lai\" class=\"header-anchor\">#</a></h3><p>你可以按如下方式创建任务间的依赖关系</p>\n<p>*例6.6</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task hello &lt;&lt; &#123;</span><br><span class=\"line\">    println <span class=\"string\">&#x27;Hello world!&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task intro(<span class=\"attr\">dependsOn:</span>hello) &lt;&lt; &#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;I&#x27;m Gradle&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">gradle -q intro</span></span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">I&#x27;m Gradle</span><br></pre></td></tr></table></figure>","categories":["Build Tools"],"tags":["Gradle UserGuide"]},{"title":"","url":"https://pkaq.org/README.html","content":"","categories":[],"tags":[]},{"title":"404 Not Found：该页无法显示","url":"https://pkaq.org//404.html","content":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"robots\" content=\"all\">\n<meta name=\"robots\" content=\"index,follow\">\n<title>公益404页面 // PKAQ的博客 - 如是我闻</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://xiaming.com.cn\" homepagename=\"如是我闻 - PKAQ的博客\"></script>\n</body>\n</html>","categories":[],"tags":[]},{"title":"category","url":"https://pkaq.org/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://pkaq.org/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://pkaq.org/css/fexo-theme.css","content":"/**首页背景**/\nhtml.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url(background-cover.jpg);\n  background-color: #CCC;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n\n/**首页导航样式**/\n.content-home .nav .item a {\n    display: block;\n    position: relative;\n    opacity: 0.8;\n    padding: 5px 10px;\n    border: 1px solid #FEFEFE;\n    border-radius: 8px;\n    font-size: 0.9em;\n    font-weight: bold;\n    letter-spacing: 1px;\n    text-shadow: none;\n    -webkit-font-smoothing: antialiased;\n     font-family:'Superrazor7f2b268e317b38';\n}\n\n/** 首页遮罩 **/\n.content-home {\n  z-index: 1;\n}\n\n.panel-cover--overlay {\n  display: block;\n  position: absolute;\n  z-index: 0;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  background-color: rgba(68,68,68,0.6);\n  background-image: -webkit-linear-gradient(-410deg, rgba(68,68,68,0.6) 20%, rgba(0,0,0,0.9));\n  background-image: linear-gradient(140deg, rgba(68,68,68,0.6) 20%, rgba(0,0,0,0.9));\n}\n.cover-purple {\n  background-color: rgba(73,50,82,0.1);\n  background-image: -webkit-linear-gradient(-410deg, rgba(73,50,82,0.6) 20%, rgba(17,11,19,0.8));\n  background-image: linear-gradient(140deg, rgba(73,50,82,0.6) 20%, rgba(17,11,19,0.8));\n}\n/** 博客背景 **/\n.page-archives {\n    background: url(bg-archives.jpg) repeat;\n}\n\n.canvas {\n  position: absolute;\n  z-index: -1;\n  top: 0px;\n  left: 0px;\n}\n\n.content content-archive{\n  position: absolute;\n  z-index: 1;\n}\n/** 博客列表导航气泡 **/\n.toolbox_color_0 {\n  background-color: #\n}\n\n.toolbox_color_0 {\n    background: #1abc9c;\n  }\n.toolbox_color_1 {\n    background: #3498db;\n  }\n.toolbox_color_2 {\n    background: #9b59b6;\n  }\n.toolbox_color_3 {\n    background: #e67e22;\n  }\n.toolbox_color_4 {\n    background: #e74c3c;\n}\n.toolbox_color_5 {\n    background: #B76EF2;\n  }\n.toolbox_color_6 {\n    background: #70B4F4;\n  }\n.toolbox_color_7 {\n    background: #70F4B4;\n}\n","categories":[],"tags":[]},{"title":"link","url":"https://pkaq.org/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://pkaq.org/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://pkaq.org/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://pkaq.org/search/index.html","content":"","categories":[],"tags":[]}]